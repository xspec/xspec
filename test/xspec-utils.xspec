<?xml version="1.0" encoding="UTF-8"?>
<x:description query="x-urn:test:xspec-items" query-at="items.xquery" stylesheet="items.xsl"
	xmlns:items="x-urn:test:xspec-items" xmlns:x="http://www.jenitennison.com/xslt/xspec">

	<!--
		The test target (../src/common/xspec-utils.xsl or xspec-utils.xquery) is included
		implicitly by the XSpec compiler. You don't need to specify it in
		/x:description/@stylesheet or @query-at.
	-->

	<x:scenario label="Scenario for testing function node-type">
		<x:scenario label="Attribute">
			<x:call function="x:node-type">
				<x:param select="$items:attribute" />
			</x:call>
			<x:expect label="attribute" select="'attribute'" />
		</x:scenario>

		<x:scenario label="Comment">
			<x:call function="x:node-type">
				<x:param select="$items:comment" />
			</x:call>
			<x:expect label="comment" select="'comment'" />
		</x:scenario>

		<x:scenario label="Document">
			<x:call function="x:node-type">
				<x:param select="$items:document" />
			</x:call>
			<x:expect label="document-node" select="'document-node'" />
		</x:scenario>

		<x:scenario label="Element">
			<x:call function="x:node-type">
				<x:param select="$items:element" />
			</x:call>
			<x:expect label="element" select="'element'" />
		</x:scenario>

		<x:scenario label="Namespace">
			<x:call function="x:node-type">
				<x:param select="$items:namespace" />
			</x:call>
			<x:expect label="namespace-node" select="'namespace-node'" />
		</x:scenario>

		<x:scenario label="Processing instruction">
			<x:call function="x:node-type">
				<x:param select="$items:processing-instruction" />
			</x:call>
			<x:expect label="processing-instruction" select="'processing-instruction'" />
		</x:scenario>

		<x:scenario label="Text">
			<x:call function="x:node-type">
				<x:param select="$items:text" />
			</x:call>
			<x:expect label="text" select="'text'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function decimal-string">
		<x:scenario label="xs:integer">
			<x:call function="x:decimal-string">
				<x:param select="xs:integer(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (no decimal point)">
			<x:call function="x:decimal-string">
				<x:param select="xs:decimal(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (with decimal point)">
			<x:call function="x:decimal-string">
				<x:param select="xs:decimal(1.2)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.2'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function QName-expression">
		<x:scenario label="With URI">
			<x:variable as="xs:string" name="ridiculous-uri" select="string()"
				>'">&lt;#,|%7D&#x20;%7B][$^</x:variable>

			<x:scenario label="With prefix">
				<x:call function="x:QName-expression">
					<x:param select="QName($ridiculous-uri, 'prefix:foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()"
					>QName('''">&lt;#,|%7D&#x20;%7B][$^',&#x20;'prefix:foo')</x:expect>
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:call function="x:QName-expression">
					<x:param select="QName($ridiculous-uri, 'foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()"
					>QName('''">&lt;#,|%7D&#x20;%7B][$^',&#x20;'foo')</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="Without URI">
			<x:call function="x:QName-expression">
				<x:param select="QName('', 'foo')" />
			</x:call>
			<x:expect label="Converted" select="string()">QName('',&#x20;'foo')</x:expect>
		</x:scenario>
	</x:scenario>

</x:description>
