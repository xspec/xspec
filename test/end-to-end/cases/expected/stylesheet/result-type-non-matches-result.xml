<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="../../result-type-non-matches.xspec"
        stylesheet="../../../../do-nothing.xsl"
        date="2000-01-01T00:00:00Z">
   <scenario id="scenario1" xspec="../../result-type-non-matches.xspec">
      <label>Failures due to @result-type</label>
      <input-wrap xmlns="">
         <x:call xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                 xmlns:ns="some-uri"
                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 function="data">
            <x:param select="()"/>
         </x:call>
      </input-wrap>
      <scenario id="scenario1-scenario1" xspec="../../result-type-non-matches.xspec">
         <label>preventing evaluation of @test</label>
         <result select="()"/>
         <test id="scenario1-scenario1-expect1" successful="false">
            <label>that would be boolean if it didn't raise an error</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of element(ns:nonexistent)"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
         <test id="scenario1-scenario1-expect2" successful="false">
            <label>that would be non-boolean if it didn't raise an error</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of element(x:nonexistent)"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
         <test id="scenario1-scenario1-expect3" successful="false">
            <label>For comparison: boolean @test without @result-type</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         test="$x:result instance of element(ns:nonexistent)"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
      <scenario id="scenario1-scenario2" xspec="../../result-type-non-matches.xspec">
         <label>with no @test</label>
         <result select="()"/>
         <test id="scenario1-scenario2-expect1" successful="false">
            <label>and an explicit expected result</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of element(ns:nonexistent)"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
         <test id="scenario1-scenario2-expect2" successful="false">
            <label>and expected result is implicitly an empty sequence)</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of element(ns:nonexistent)"/>
            </expect-test-wrap>
            <expect select="()"/>
         </test>
      </scenario>
   </scenario>
   <scenario id="scenario2" xspec="../../result-type-non-matches.xspec">
      <label>Failures because xs:integer is not an instance of xs:positiveInteger</label>
      <input-wrap xmlns="">
         <x:call xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                 xmlns:ns="some-uri"
                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 function="one-or-more">
            <x:param select="xs:integer(1)"/>
         </x:call>
      </input-wrap>
      <result select="1"/>
      <test id="scenario2-expect1" successful="false">
         <label>comparing actual result with expected result</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                      xmlns:ns="some-uri"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"
                      result-type="$x:result instance of xs:positiveInteger"/>
         </expect-test-wrap>
         <expect select="1"/>
      </test>
      <test id="scenario2-expect2" successful="false">
         <label>with non-boolean @test</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                      xmlns:ns="some-uri"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"
                      result-type="$x:result instance of xs:positiveInteger"/>
         </expect-test-wrap>
         <expect select="0"/>
      </test>
      <test id="scenario2-expect3" successful="false">
         <label>with boolean @test</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                      xmlns:ns="some-uri"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"
                      result-type="$x:result instance of xs:positiveInteger"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario3" xspec="../../result-type-non-matches.xspec">
      <label>Failures illustrating catch='yes' usage</label>
      <scenario id="scenario3-scenario1" xspec="../../result-type-non-matches.xspec">
         <label>Expected dynamic error does not occur</label>
         <input-wrap xmlns="">
            <x:call xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                    xmlns:ns="some-uri"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                    function="data">
               <x:param select="1"/>
            </x:call>
         </input-wrap>
         <result select="1"/>
         <test id="scenario3-scenario1-expect1" successful="false">
            <label>result-type prevents evaluation of @test</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of map(*)"/>
            </expect-test-wrap>
            <expect select="'I expected an error.'"/>
         </test>
      </scenario>
      <scenario id="scenario3-scenario2" xspec="../../result-type-non-matches.xspec">
         <label>Unexpected dynamic error occurs</label>
         <input-wrap xmlns="">
            <x:call xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                    xmlns:ns="some-uri"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                    function="map:entry">
               <x:param select="'err'"/>
               <x:param select="map:entry('description','Error message')"/>
            </x:call>
         </input-wrap>
         <result select="/*">
            <content-wrap xmlns="">
               <pseudo-map xmlns="http://www.jenitennison.com/xslt/xspec">map{"err":map{"description":"Error message"}}</pseudo-map>
            </content-wrap>
         </result>
         <test id="scenario3-scenario2-expect1" successful="false">
            <label>result-type prevents evaluation of @test</label>
            <expect-test-wrap xmlns="">
               <x:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                         xmlns:ns="some-uri"
                         xmlns:x="http://www.jenitennison.com/xslt/xspec"
                         xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         result-type="$x:result instance of document-node(element(child-element))"/>
            </expect-test-wrap>
            <expect select="/element()">
               <content-wrap xmlns="">
                  <child-element xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                                 xmlns:ns="some-uri"
                                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                                 xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
               </content-wrap>
            </expect>
         </test>
      </scenario>
   </scenario>
   <scenario id="scenario4" xspec="../../result-type-non-matches.xspec">
      <label>Failures to check qualified name notation on Expected side of report</label>
      <input-wrap xmlns="">
         <x:call xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                 xmlns:ns="some-uri"
                 xmlns:x="http://www.jenitennison.com/xslt/xspec"
                 xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 function="data">
            <x:param select="1"/>
         </x:call>
      </input-wrap>
      <result select="1"/>
      <test id="scenario4-expect1" successful="false">
         <label>when expect element uses prefix 't', report uses $t:result</label>
         <expect-test-wrap xmlns="">
            <t:expect xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                      xmlns:ns="some-uri"
                      xmlns:t="http://www.jenitennison.com/xslt/xspec"
                      xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"
                      result-type="$t:result instance of element()"/>
         </expect-test-wrap>
         <expect select="0"/>
      </test>
      <test id="scenario4-expect2" successful="false">
         <label>when expect element does not use a prefix, report uses $result</label>
         <expect-test-wrap xmlns="">
            <expect xmlns="http://www.jenitennison.com/xslt/xspec"
                    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
                    xmlns:ns="some-uri"
                    xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                    result-type="$result instance of element()"/>
         </expect-test-wrap>
         <expect select="0"/>
      </test>
   </scenario>
</report>
