<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="../../schematron-027.xspec"
        stylesheet="schematron-027-sch-preprocessed.xsl"
        schematron="../../../../schematron/schematron-027.sch"
        date="2000-01-01T00:00:00Z">
   <scenario id="scenario1" xspec="../../schematron-027.xspec">
      <label>rule followed</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff type="first"/>
               <aff type="second"/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:fired-rule context="aff"/>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario1-expect1" successful="true">
         <label>not assert t01</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="Q{http://purl.oclc.org/dsdl/svrl}schematron-output[Q{http://purl.oclc.org/dsdl/svrl}fired-rule] and empty(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario2" xspec="../../schematron-027.xspec">
      <label>rule violated</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:failed-assert test="@type" id="t01" location="/contrib[1]/aff[1]">
                  <svrl:text>aff must have a type attribute</svrl:text>
               </svrl:failed-assert>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario2-expect1" successful="true">
         <label>assert t01</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="exists(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario3" xspec="../../schematron-027.xspec">
      <label>rule violated, location is simple</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:failed-assert test="@type" id="t01" location="/contrib[1]/aff[1]">
                  <svrl:text>aff must have a type attribute</svrl:text>
               </svrl:failed-assert>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario3-expect1" successful="true">
         <label>assert t01 contrib/aff</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="exists(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'][if (count($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib/aff)) ne 1) then false() else ($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib/aff) treat as node()) is Q{http://www.jenitennison.com/xslt/xspec}select-node($Q{http://www.jenitennison.com/xslt/xspec}context/root(), @location, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}ns-prefix-in-attribute-values, 3)])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario4" xspec="../../schematron-027.xspec">
      <label>rule violated, location is specific</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:failed-assert test="@type" id="t01" location="/contrib[1]/aff[1]">
                  <svrl:text>aff must have a type attribute</svrl:text>
               </svrl:failed-assert>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario4-expect1" successful="true">
         <label>assert t01 contrib[1]/aff[1]</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="exists(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'][if (count($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib[1]/aff[1])) ne 1) then false() else ($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib[1]/aff[1]) treat as node()) is Q{http://www.jenitennison.com/xslt/xspec}select-node($Q{http://www.jenitennison.com/xslt/xspec}context/root(), @location, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}ns-prefix-in-attribute-values, 3)])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario5" xspec="../../schematron-027.xspec">
      <label>rule violated, location is specific 2</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff type="first"/>
               <aff/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:fired-rule context="aff"/>
               <svrl:failed-assert test="@type" id="t01" location="/contrib[1]/aff[2]">
                  <svrl:text>aff must have a type attribute</svrl:text>
               </svrl:failed-assert>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario5-expect1" successful="true">
         <label>assert t01 contrib[1]/aff[2]</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="exists(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'][if (count($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib[1]/aff[2])) ne 1) then false() else ($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib[1]/aff[2]) treat as node()) is Q{http://www.jenitennison.com/xslt/xspec}select-node($Q{http://www.jenitennison.com/xslt/xspec}context/root(), @location, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}ns-prefix-in-attribute-values, 3)])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
   <scenario id="scenario6" xspec="../../schematron-027.xspec">
      <label>rule violated, location is ambiguous</label>
      <input-wrap xmlns="">
         <x:context xmlns:x="http://www.jenitennison.com/xslt/xspec"
                    select="self::document-node()">
            <contrib>
               <aff type="first"/>
               <aff/>
            </contrib>
         </x:context>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                    xmlns:saxon="http://saxon.sf.net/"
                                    xmlns:schold="http://www.ascc.net/xml/schematron"
                                    xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                    title=""
                                    schemaVersion=""><!--   
		   
		   
		 -->
               <svrl:active-pattern document=""/>
               <svrl:fired-rule context="aff"/>
               <svrl:fired-rule context="aff"/>
               <svrl:failed-assert test="@type" id="t01" location="/contrib[1]/aff[2]">
                  <svrl:text>aff must have a type attribute</svrl:text>
               </svrl:failed-assert>
            </svrl:schematron-output>
         </content-wrap>
      </result>
      <test id="scenario6-expect1" successful="false">
         <label>assert t01 contrib/aff</label>
         <expect-test-wrap xmlns="">
            <x:expect xmlns:x="http://www.jenitennison.com/xslt/xspec"
                      test="exists(Q{http://purl.oclc.org/dsdl/svrl}schematron-output/Q{http://purl.oclc.org/dsdl/svrl}failed-assert[(@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}fired-rule[1]/@id, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}active-pattern[1]/@id)[1] = 't01'][if (count($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib/aff)) ne 1) then false() else ($Q{http://www.jenitennison.com/xslt/xspec}context/root()/(contrib/aff) treat as node()) is Q{http://www.jenitennison.com/xslt/xspec}select-node($Q{http://www.jenitennison.com/xslt/xspec}context/root(), @location, preceding-sibling::Q{http://purl.oclc.org/dsdl/svrl}ns-prefix-in-attribute-values, 3)])"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
   </scenario>
</report>
