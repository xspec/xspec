<?xml version="1.0" encoding="UTF-8"?>
<x:description stylesheet="../../items.xsl" xmlns:x="http://www.jenitennison.com/xslt/xspec">
	<x:scenario>
		<x:label>When the result is a comment node, the report HTML must serialize it as
			<![CDATA[<!-- -->]]>. (xspec/xspec#356) So...</x:label>
		<x:scenario>
			<x:label>When x:result in the report XML contains a comment node,</x:label>
			<x:call function="exactly-one">
				<x:param select="$comment" />
			</x:call>
			<x:expect>
				<x:label>[Result] with diff must be serialized as <![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
			<x:expect test="false()">
				<x:label>[Result] without diff must be serialized as <![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>When x:expect in the report XML contains a comment node,</x:label>
			<x:call function="false" />
			<x:expect select="$comment">
				<x:label>[Expected Result] with diff must be serialized as
					<![CDATA[<!-- -->]]>.</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When the result is indented in the report XML file, the report HTML must serialize
			it with indentation.</x:label>
		<x:scenario>
			<x:label>So... (xspec/xspec#359)</x:label>
			<x:scenario>
				<x:label>When x:result in the report XML file is a sequence of simple nested
					elements serialized with indentation,</x:label>
				<x:call function="one-or-more">
					<x:param as="element()+">
						<foo />
						<bar>
							<baz />
						</bar>
						<qux>
							<quux />
						</qux>
					</x:param>
				</x:call>
				<x:expect>
					<x:label>all elements in [Result] with diff must be serialized with
						indentation.</x:label>
				</x:expect>
				<x:expect test="false()">
					<x:label>all elements in [Result] without diff must be serialized with
						indentation.</x:label>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>When x:expect in the report XML file is a sequence of simple nested
					elements serialized with indentation,</x:label>
				<x:call function="false" />
				<x:expect>
					<x:label>all elements in [Expected Result] with diff must be serialized with
						indentation.</x:label>
					<foo />
					<bar>
						<baz />
					</bar>
					<qux>
						<quux />
					</qux>
				</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario>
			<x:label>But the diff must not be affected by indentation. So...</x:label>
			<x:scenario>
				<x:label>When a node is indented, the diff of the indented node itself must not be
					affected. (xspec/xspec#367) So...</x:label>
				<x:scenario>
					<x:label>When <![CDATA[<bar> is indented but <?bar?>]]> is not indented in
						x:result of the report XML file,</x:label>
					<x:call function="exactly-one">
						<x:param as="element(test)">
							<test>
								<elem1><!--foo--><bar /></elem1>
								<elem2><!--foo--><?bar?></elem2>
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label>both <![CDATA[<bar> and <?bar?>]]> must be green.</x:label>
						<test>
							<elem1>foo<bar /></elem1>
							<elem2>foo<?bar?></elem2>
						</test>
					</x:expect>
				</x:scenario>

				<x:scenario>
					<x:label>When <![CDATA[<bar> is indented but <?bar?>]]> is not indented in
						x:expect of the report XML file,</x:label>
					<x:call function="exactly-one">
						<x:param as="element(test)">
							<test>
								<elem1>foo<bar /></elem1>
								<elem2>foo<?bar?></elem2>
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label>both <![CDATA[<bar> and <?bar?>]]> must be green.</x:label>
						<test>
							<elem1><!--foo--><bar /></elem1>
							<elem2><!--foo--><?bar?></elem2>
						</test>
					</x:expect>
				</x:scenario>
			</x:scenario>

			<x:scenario>
				<x:label>When a child node of an element is indented, the diff of the element must
					not be affected.</x:label>
				<x:scenario>
					<x:label>So, when the same <![CDATA[<bar> in <foo>]]> is indented in x:result
						and x:expect of the report XML file with different indentation
						length,</x:label>
					<x:call function="exactly-one">
						<x:param as="element(test)">
							<test>
								<foo><bar /></foo>
								<baz />
							</test>
						</x:param>
					</x:call>
					<x:expect>
						<x:label><![CDATA[<foo>]]> must be green.</x:label>
						<test>
							<foo><bar /></foo>
							<qux />
						</test>
					</x:expect>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario>
		<x:label>When x:expect has an element of '...',</x:label>
		<x:call function="exactly-one">
			<x:param as="element(foo)">
				<foo>
					<bar />
					<baz />
				</foo>
			</x:param>
		</x:call>
		<x:expect>
			<x:label>the corresponding nodes in [Result] with diff must be serialized in green.
				(xspec/xspec#379)</x:label>
			<foo>...</foo>
			<qux />
		</x:expect>
	</x:scenario>

	<x:scenario>
		<x:label>When the result contains significant text nodes,</x:label>
		<x:call function="exactly-one">
			<x:param as="element(test)">
				<test>
					<oridinary-text-node>
						<same>same</same>
						<diff>actual</diff>
					</oridinary-text-node>
					<significant-whitespace-only-text-node>
						<same xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</same>
						<diff xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</diff>
					</significant-whitespace-only-text-node>
				</test>
			</x:param>
		</x:call>
		<x:expect>
			<x:label>both in [Result] and [Expected Result] with diff, the significant text nodes
				must be serialized with color. (xspec/xspec#386)</x:label>
			<test>
				<oridinary-text-node>
					<same>same</same>
					<diff>expect</diff>
				</oridinary-text-node>
				<significant-whitespace-only-text-node>
					<same xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</same>
					<diff xml:space="preserve">&#x20;&#x09;&#x0A;&#x0D;</diff>
				</significant-whitespace-only-text-node>
			</test>
		</x:expect>
		<x:expect test="false()">
			<x:label>in [Result] without diff, the significant text nodes must be serialized without
				color.</x:label>
		</x:expect>
	</x:scenario>

</x:description>
