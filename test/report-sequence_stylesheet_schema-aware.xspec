<?xml version="1.0" encoding="UTF-8"?>
<?xspec-test require-xslt-to-support-schema?>
<t:description xmlns:rep="urn:x-xspec:common:report-sequence"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               stylesheet="do-nothing.xsl">

   <!--
      The test target (../src/common/report-sequence.xsl) is included implicitly by the XSpec
      compiler. You don't need to specify it in /t:description/@stylesheet.
   -->

   <!--
       Function rep:atom-type
           https://www.w3.org/TR/xmlschema-2/#built-in-datatypes
   -->
   <t:scenario label="rep:atom-type">
      <!-- TODO: These scenarios fail on XQuery.
           XQuery rep:atom-type() does not cover the built-in types classified as
           "additional" in https://www.w3.org/TR/xslt20/#built-in-types. -->

      <t:call function="rep:atom-type" />

      <t:scenario label="Derived string types">

         <!-- xs:IDREFS: list -->

         <!-- xs:ENTITIES: list -->

         <t:scenario label="xs:ID">
            <t:call>
               <t:param select="xs:ID('foo')" />
            </t:call>
            <t:expect label="xs:ID" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}ID</t:expect>
         </t:scenario>

         <t:scenario label="xs:IDREF">
            <t:call>
               <t:param select="xs:IDREF('foo')" />
            </t:call>
            <t:expect label="xs:IDREF" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}IDREF</t:expect>
         </t:scenario>

         <t:scenario label="xs:ENTITY">
            <t:call>
               <t:param select="xs:ENTITY('foo')" />
            </t:call>
            <t:expect label="xs:ENTITY" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}ENTITY</t:expect>
         </t:scenario>

         <t:scenario label="xs:NCName">
            <t:call>
               <t:param select="xs:NCName('foo')" />
            </t:call>
            <t:expect label="xs:NCName" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}NCName</t:expect>
         </t:scenario>

         <!-- xs:NMTOKENS: list -->

         <t:scenario label="xs:language">
            <t:call>
               <t:param select="xs:language('en')" />
            </t:call>
            <t:expect label="xs:language" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}language</t:expect>
         </t:scenario>

         <t:scenario label="xs:Name">
            <t:call>
               <t:param select="xs:Name('foo')" />
            </t:call>
            <t:expect label="xs:Name" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}Name</t:expect>
         </t:scenario>

         <t:scenario label="xs:NMTOKEN">
            <t:call>
               <t:param select="xs:NMTOKEN('foo')" />
            </t:call>
            <t:expect label="xs:NMTOKEN" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}NMTOKEN</t:expect>
         </t:scenario>

         <t:scenario label="xs:token">
            <t:call>
               <t:param select="xs:token('foo')" />
            </t:call>
            <t:expect label="xs:token" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}token</t:expect>
         </t:scenario>

         <t:scenario label="xs:normalizedString">
            <t:call>
               <t:param select="xs:normalizedString('foo')" />
            </t:call>
            <t:expect label="xs:normalizedString" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}normalizedString</t:expect>
         </t:scenario>

      </t:scenario>

      <t:scenario label="Derived numeric types">

         <t:scenario label="xs:negativeInteger">
            <t:call>
               <t:param select="xs:negativeInteger(-1)" />
            </t:call>
            <t:expect label="xs:negativeInteger" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}negativeInteger</t:expect>
         </t:scenario>

         <t:scenario label="xs:nonPositiveInteger">
           <t:call>
              <t:param select="xs:nonPositiveInteger(0)" />
           </t:call>
           <t:expect label="xs:nonPositiveInteger" select="string()"
              >Q{http://www.w3.org/2001/XMLSchema}nonPositiveInteger</t:expect>
         </t:scenario>

         <t:scenario label="xs:byte">
            <t:call>
               <t:param select="xs:byte(1)" />
            </t:call>
            <t:expect label="xs:byte" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}byte</t:expect>
         </t:scenario>

         <t:scenario label="xs:short">
            <t:call>
               <t:param select="xs:short(1)" />
            </t:call>
            <t:expect label="xs:short" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}short</t:expect>
         </t:scenario>

         <t:scenario label="xs:int">
            <t:call>
               <t:param select="xs:int(1)" />
            </t:call>
            <t:expect label="xs:int" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}int</t:expect>
         </t:scenario>

         <t:scenario label="xs:long">
            <t:call>
               <t:param select="xs:long(1)" />
            </t:call>
            <t:expect label="xs:long" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}long</t:expect>
         </t:scenario>

         <t:scenario label="xs:unsignedByte">
            <t:call>
               <t:param select="xs:unsignedByte(1)" />
            </t:call>
            <t:expect label="xs:unsignedByte" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}unsignedByte</t:expect>
         </t:scenario>

         <t:scenario label="xs:unsignedShort">
            <t:call>
               <t:param select="xs:unsignedShort(1)" />
            </t:call>
            <t:expect label="xs:unsignedShort" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}unsignedShort</t:expect>
         </t:scenario>

         <t:scenario label="xs:unsignedInt">
            <t:call>
               <t:param select="xs:unsignedInt(1)" />
            </t:call>
            <t:expect label="xs:unsignedInt" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}unsignedInt</t:expect>
         </t:scenario>

         <t:scenario label="xs:unsignedLong">
            <t:call>
               <t:param select="xs:unsignedLong(1)" />
            </t:call>
            <t:expect label="xs:unsignedLong" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}unsignedLong</t:expect>
         </t:scenario>

         <t:scenario label="xs:positiveInteger">
            <t:call>
               <t:param select="xs:positiveInteger(1)" />
            </t:call>
            <t:expect label="xs:positiveInteger" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}positiveInteger</t:expect>
         </t:scenario>

         <t:scenario label="xs:nonNegativeInteger">
            <t:call>
               <t:param select="xs:nonNegativeInteger(0)" />
            </t:call>
            <t:expect label="xs:nonNegativeInteger" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}nonNegativeInteger</t:expect>
         </t:scenario>

      </t:scenario>

      <t:scenario label="Primitive types">

         <!-- xs:NOTATION: Abstract -->

      </t:scenario>

   </t:scenario>

</t:description>
