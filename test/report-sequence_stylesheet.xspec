<?xml version="1.0" encoding="UTF-8"?>
<?xspec-test saxon-custom-options=--recognize-uri-query-parameters:true?>
<t:description xmlns:local="urn:x-xspec:common:report-sequence:local"
               xmlns:rep="urn:x-xspec:common:report-sequence"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               stylesheet="do-nothing.xsl">

   <!--
      The test target (../src/common/report-sequence.xsl) is included implicitly by the XSpec
      compiler. You don't need to specify it in /t:description/@stylesheet.
   -->

   <t:scenario label="rep:report-sequence" xml:base="report-sequence/">
      <t:call template="rep:report-sequence" />

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L486-L550">
         <!-- These scenarios do not run on XQuery. XQuery implements the tested template as a function. -->

         <t:call>
            <t:param name="report-name" select="'t:result'" />
         </t:call>

         <t:scenario label="Integer">
            <t:call>
               <t:param name="sequence" select="1" as="xs:integer" />
            </t:call>
            <t:expect label="t:result with @select of integer" href="integer.xml" select="t:result" />
         </t:scenario>

         <t:scenario label="Empty Sequence">
            <t:call>
               <t:param name="sequence" select="()" />
            </t:call>
            <t:expect label="t:result with @select of empty sequence" href="empty-sequence.xml"
               select="t:result" />
         </t:scenario>

         <t:scenario label="String">
            <t:call>
               <t:param name="sequence" select="'test'" as="xs:string" />
            </t:call>
            <t:expect label="t:result with @select of string" href="string.xml" select="t:result" />
         </t:scenario>

         <t:scenario label="URI">
            <t:call>
               <t:param name="sequence" select="xs:anyURI('test.xml')" />
            </t:call>
            <t:expect label="t:result with @select of xs:anyURI" href="uri.xml" select="t:result" />
         </t:scenario>

         <t:scenario label="QName">
            <t:call>
               <t:param name="sequence" select="QName('http://www.jenitennison.com/xslt/unit-test', 'tests')" />
            </t:call>
            <t:expect label="t:result with @select of QName" href="qname.xml" select="t:result" />
         </t:scenario>

         <t:scenario label="Attributes">
            <t:call>
               <t:param name="sequence" select="/*/@*" as="attribute()+">
                  <doc a="1" b="2" />
               </t:param>
            </t:call>
            <t:expect label="t:result containing attributes" href="attributes.xml?strip-space=yes"
               select="t:result" />
         </t:scenario>

         <t:scenario label="Attributes and content">
            <t:call>
               <t:param name="sequence" select="/*/@*, /*/foo" as="node()+">
                  <doc a="1" b="2">
                     <foo />
                  </doc>
               </t:param>
            </t:call>
            <t:expect label="t:result containing attributes and content"
               href="attributes-and-content.xml?strip-space=yes" select="t:result" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <t:scenario label="rep:report-atomic-value">
      <t:call function="rep:report-atomic-value" />

      <t:scenario label="xs:integer">

         <!-- FOAR0002 'Value out of range' on BaseX 9.4.5 -->
         <t:scenario label="Max of xs:unsignedLong (a subtype of xs:integer)">
            <t:call>
               <t:param select="xs:integer(18446744073709551615)" />
            </t:call>
            <t:expect label="Numeric literal" select="'18446744073709551615'" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <t:scenario label="Scenario for testing template identity">
      <t:context>
         <foo bar="baz">
            <?qux?>
            <!--quux-->
            <corge>grault</corge>
         </foo>
      </t:context>
      <t:call template="local:identity" />
      <t:expect label="Copied and default template rule applied">
         <foo>bazgrault</foo>
      </t:expect>
   </t:scenario>

</t:description>
