<?xml version="1.0" encoding="UTF-8"?>
<collection xmlns="x-urn:xspec:test:xspec-bat" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="x-urn:xspec:test:xspec-bat collection.xsd">

	<!--
		Usage (CLI)
	-->

	<case name="invoking xspec without arguments prints usage">
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 3 x "Usage: xspec [-t|-q|-s|-c|-j|-catalog file|-h] file [coverage]"
	</case>

	<case name="invoking xspec without arguments prints usage even if Saxon environment variables are not defined">
    set SAXON_CP=
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 2 x "SAXON_CP and SAXON_HOME both not set!"
    call :verify_line 5 r "Usage: xspec "
	</case>

	<case name="invoking xspec with -h prints usage and does so even when it is 11th argument">
    call :run ..\bin\xspec.bat -t -t -t -t -t -t -t -t -t -t -h
    call :verify_retval 0
    call :verify_line 2 r "Usage: xspec "
	</case>

	<!--
		Mutually exclusive test types (CLI)
	-->

	<case name="invoking xspec with -s and -t prints error message">
    call :run ..\bin\xspec.bat -s -t
    call :verify_retval 1
    call :verify_line 2 x "-s and -t are mutually exclusive"
	</case>

	<case name="invoking xspec with -s and -q prints error message">
    call :run ..\bin\xspec.bat -s -q
    call :verify_retval 1
    call :verify_line 2 x "-s and -q are mutually exclusive"
	</case>

	<case name="invoking xspec with -t and -q prints error message">
    call :run ..\bin\xspec.bat -t -q
    call :verify_retval 1
    call :verify_line 2 x "-t and -q are mutually exclusive"
	</case>

	<!--
		Coverage and Saxon versions (CLI)
	-->

	<case name="invoking xspec -c with Saxon9HE returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9he.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9sa.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon8SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8sa.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon8 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9EE creates test stylesheet">
    rem Append non-Saxon jar to see if SAXON_CP is parsed correctly
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar;%SYSTEMDRIVE%\path\to\another.jar

    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 3 x "Creating Test Stylesheet..."
	</case>

	<case name="invoking xspec -c with Saxon9PE creates test stylesheet">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9pe.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 3 x "Creating Test Stylesheet..."
	</case>

	<!--
		Coverage (CLI)
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="invoking xspec -c creates report files">
    rem Other stderr #204
    set JAVA_TOOL_OPTIONS=-Dfoo

    rem Non alphanumeric path #208
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\up &amp; down"
    call :mkdir "%SPECIAL_CHARS_DIR%"

    call :copy ..\tutorial\coverage\demo* "%SPECIAL_CHARS_DIR%"
    set TEST_DIR=

    call :run ..\bin\xspec.bat -c "%SPECIAL_CHARS_DIR%\demo.xspec"
    call :verify_retval 0

    rem XML and HTML report file
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.xml"
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.html"

    rem Coverage report file is created and contains CSS inline #194
    call :run java -jar "%SAXON_JAR%" -s:"%SPECIAL_CHARS_DIR%\xspec\demo-coverage.html" -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="invoking xspec -c -q prints error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar
    call :run ..\bin\xspec.bat -c -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 1
    call :verify_line 2 x "Coverage is supported only for XSLT"
	</case>

	<case name="invoking xspec -c -s prints error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar
    call :run ..\bin\xspec.bat -c -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 1
    call :verify_line 2 x "Coverage is supported only for XSLT"
	</case>

	<!--
		CLI without TEST_DIR
	-->

	<case name="invoking xspec without TEST_DIR set externally (XSLT)">
    set TEST_DIR=

    rem Delete default output dir if exists, to make the line numbers predictable
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0

    rem Verify message
    call :verify_line 20 x "passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line 21 x "Report available at %PARENT_DIR_ABS%\tutorial\xspec\escape-for-regex-result.html"

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * Coverage is disabled by default
    rem * JUnit is disabled by default
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml

    rem HTML report file contains CSS inline #135
    call :run java -jar "%SAXON_JAR%" -s:..\tutorial\xspec\escape-for-regex-result.html -xsl:html-css.xsl
    call :verify_line 1 x "true"

    rem Cleanup
    call :rmdir ..\tutorial\xspec
	</case>

	<case name="invoking xspec without TEST_DIR set externally (XQuery)">
    set TEST_DIR=

    rem Delete default output dir if exists, to make the line numbers predictable
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run
    call :run ..\bin\xspec.bat -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0

    rem Verify message
    call :verify_line 7 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line 8 x "Report available at %PARENT_DIR_ABS%\tutorial\xspec\xquery-tutorial-result.html"

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * JUnit is disabled by default
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 3
    call :verify_line 1 x xquery-tutorial-compiled.xq
    call :verify_line 2 x xquery-tutorial-result.html
    call :verify_line 3 x xquery-tutorial-result.xml

    rem Cleanup
    call :rmdir ..\tutorial\xspec
	</case>

	<case name="invoking xspec without TEST_DIR set externally (Schematron)">
    set TEST_DIR=

    rem Delete default output dir if exists, to make the line numbers predictable
    call :rmdir-if-exist ..\tutorial\schematron\xspec

    rem Run
    call :run ..\bin\xspec.bat -s ..\tutorial\schematron\demo-03.xspec
    call :verify_retval 0

    rem Verify message
    rem * No Schematron warnings #129 #131
    call :verify_line  5 x "Converting Schematron XSpec into XSLT XSpec..."
    call :verify_line 32 x "passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line 33 x "Report available at %PARENT_DIR_ABS%\tutorial\schematron\xspec\demo-03-result.html"

    rem Verify report files
    rem * XML report file is created
    rem * HTML report file is created
    rem * JUnit is disabled by default
    rem * Schematron-specific temporary files are deleted
    call :run dir /b /o:n ..\tutorial\schematron\xspec
    call :verify_line_count 3
    call :verify_line 1 x demo-03-compiled.xsl
    call :verify_line 2 x demo-03-result.html
    call :verify_line 3 x demo-03-result.xml

    rem Cleanup
    call :rmdir ..\tutorial\schematron\xspec
	</case>

	<!--
		JUnit and Saxon versions (CLI)
	-->

	<case name="invoking xspec with -j option with Saxon8 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8.jar
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Saxon8 detected. JUnit report requires Saxon9."
	</case>

	<case name="invoking xspec with -j option with Saxon8-SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8sa.jar
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Saxon8 detected. JUnit report requires Saxon9."
	</case>

	<!--
		JUnit (CLI)
	-->

	<case name="invoking xspec with -j option generates message with JUnit report location and creates report files">
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 22 x "Report available at %TEST_DIR%\escape-for-regex-junit.xml"

    rem XML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.xml"

    rem HTML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.html"

    rem JUnit report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-junit.xml"
	</case>

	<!--
		Saxon-B (CLI)
	-->

	<case name="invoking xspec with Saxon-B-9-1-0-8 creates test stylesheet">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxonb9-1-0-8.jar
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 3 x "Creating Test Stylesheet..."
	</case>

	<!--
		#46
	-->

	<case name="invoking xspec that passes a non xs:boolean does not raise a warning #46">
    call :run ..\bin\xspec.bat xspec-46.xspec
    call :verify_retval 0
    call :verify_line 6 r "Testing with"
	</case>

	<!--
		XProc (Saxon)
	-->

	<case ifdef="XMLCALABASH_JAR" name="XProc harness for Saxon (XSLT)">
    rem HTML report file
    set "ACTUAL_REPORT_DIR=%CD%\end-to-end\cases\actual__\stylesheet"
    call :mkdir-if-not-exist "%ACTUAL_REPORT_DIR%"
    set "ACTUAL_REPORT=%ACTUAL_REPORT_DIR%\xspec-serialize-result.html"

    rem Run
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=end-to-end/cases/xspec-serialize.xspec ^
        -o result="file:///%ACTUAL_REPORT:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :verify_retval 0

    rem Verify HTML report including #72
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%ACTUAL_REPORT%" ^
        -xsl:end-to-end\processor\html\compare.xsl ^
        EXPECTED-DOC-URI="file:///%ACTUAL_REPORT_DIR:\=/%/../../expected/stylesheet/xspec-serialize-result.html" ^
        NORMALIZE-HTML-DATETIME="2000-01-01T00:00:00Z"
    call :verify_retval 0
	</case>

	<case ifdef="XMLCALABASH_JAR" name="XProc harness for Saxon (XQuery)">
    rem HTML report file
    set "ACTUAL_REPORT_DIR=%CD%\end-to-end\cases\actual__\query"
    call :mkdir-if-not-exist "%ACTUAL_REPORT_DIR%"
    set "ACTUAL_REPORT=%ACTUAL_REPORT_DIR%\xspec-serialize-result.html"

    rem Run
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=end-to-end/cases/xspec-serialize.xspec ^
        -o result="file:///%ACTUAL_REPORT:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 0

    rem Verify HTML report including #72
    call :run java -jar "%SAXON_JAR%" ^
        -s:"%ACTUAL_REPORT%" ^
        -xsl:end-to-end\processor\html\compare.xsl ^
        EXPECTED-DOC-URI="file:///%ACTUAL_REPORT_DIR:\=/%/../../expected/query/xspec-serialize-result.html" ^
        NORMALIZE-HTML-DATETIME="2000-01-01T00:00:00Z"
    call :verify_retval 0
	</case>

	<!--
		Path containing special chars (CLI)
	-->

	<case name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (XSLT)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy do-nothing.xsl         "%SPECIAL_CHARS_DIR%"
    call :copy xspec-node-selection.* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\xspec-node-selection-result.html"

    call :run ..\bin\xspec.bat "%SPECIAL_CHARS_DIR%\xspec-node-selection.xspec"
    call :verify_retval 0
    call :verify_line 30 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<case name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (XQuery)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy do-nothing.xquery      "%SPECIAL_CHARS_DIR%"
    call :copy xspec-node-selection.* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\xspec-node-selection-result.html"

    call :run ..\bin\xspec.bat -q "%SPECIAL_CHARS_DIR%\xspec-node-selection.xspec"
    call :verify_retval 0
    call :verify_line 8 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<case name="invoking xspec with path containing special chars (#84 #119 #202 #716) runs and loads doc (#610) successfully and generates HTML report file (Schematron)">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy ..\tutorial\schematron\demo-03* "%SPECIAL_CHARS_DIR%"

    set TEST_DIR=
    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\demo-03-result.html"

    call :run ..\bin\xspec.bat -s "%SPECIAL_CHARS_DIR%\demo-03.xspec"
    call :verify_retval 0
    call :verify_line 33 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<!--
		saxon script
	-->

	<!-- bin\xspec.bat does not support saxon script -->
	<case ifdef="NEVER" name="invoking xspec with saxon script uses the saxon script #121 #122">
    (echo @echo Saxon script with EXPath Packaging System) > "%WORK_DIR%\saxon.bat"
    set "PATH=%PATH%;%WORK_DIR%"
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 1 x "Saxon script found, use it."
	</case>

	<!--
		Schematron phase/parameters
	-->

	<case name="Schematron phase/parameters are passed to Schematron compile (CLI)">
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-param-001-step3.xsl
    call :run ..\bin\xspec.bat -s schematron\schematron-param-001.xspec
    call :verify_retval 0
    call :verify_line 21 x "passed: 9 / pending: 0 / failed: 0 / total: 9"
	</case>

	<case name="Schematron phase/parameters are passed to Schematron compile (Ant)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.schematron.preprocessor.step3="%CD%\schematron\schematron-param-001-step3.xsl" ^
        -Dxspec.xml="%CD%\schematron\schematron-param-001.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 9 / pending: 0 / failed: 0 / total: 9"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<!--
		Schematron XSLTs provided externally
	-->

	<case name="invoking xspec with Schematron XSLTs provided externally uses provided XSLTs for Schematron compile (CLI)">
    set SCHEMATRON_XSLT_INCLUDE=schematron\schematron-xslt-include.xsl
    set SCHEMATRON_XSLT_EXPAND=schematron\schematron-xslt-expand.xsl
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt-compile.xsl

    call :run ..\bin\xspec.bat -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 0
    call :verify_line  5 x "I am schematron-xslt-include.xsl!"
    call :verify_line  6 x "I am schematron-xslt-expand.xsl!"
    call :verify_line  7 x "I am schematron-xslt-compile.xsl!"
    call :verify_line 20 x "passed: 3 / pending: 0 / failed: 0 / total: 3"
	</case>

	<case name="invoking xspec with Schematron XSLTs provided externally uses provided XSLTs for Schematron compile (Ant)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.schematron.preprocessor.step1="%CD%\schematron\schematron-xslt-include.xsl" ^
        -Dxspec.schematron.preprocessor.step2="%CD%\schematron\schematron-xslt-expand.xsl" ^
        -Dxspec.schematron.preprocessor.step3="%CD%\schematron\schematron-xslt-compile.xsl" ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] I am schematron-xslt-include.xsl!"
    call :verify_line  * x "     [xslt] I am schematron-xslt-expand.xsl!"
    call :verify_line  * x "     [xslt] I am schematron-xslt-compile.xsl!"
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<!--
		CLI with TEST_DIR
	-->

	<case name="invoking xspec with TEST_DIR creates files in TEST_DIR (XSLT)">
    rem Delete default output dir if exists
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 21 x "Report available at %TEST_DIR%\escape-for-regex-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml

    rem Default output dir should not be created
    call :verify_not_exist ..\tutorial\xspec\

    rem Run with relative TEST_DIR
    set TEST_DIR=..\tutorial\xspec
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 21 x "Report available at %TEST_DIR%\escape-for-regex-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex-compiled.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml

    rem Cleanup
    call :rmdir "%TEST_DIR%"
	</case>

	<case name="invoking xspec with TEST_DIR creates files in TEST_DIR (XQuery)">
    rem Delete default output dir if exists
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0
    call :verify_line 8 x "Report available at %TEST_DIR%\xquery-tutorial-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x xquery-tutorial-compiled.xq
    call :verify_line 2 x xquery-tutorial-result.html
    call :verify_line 3 x xquery-tutorial-result.xml

    rem Default output dir should not be created
    call :verify_not_exist ..\tutorial\xspec\

    rem Run with relative TEST_DIR
    set TEST_DIR=..\tutorial\xspec
    call :run ..\bin\xspec.bat -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0
    call :verify_line 8 x "Report available at %TEST_DIR%\xquery-tutorial-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x xquery-tutorial-compiled.xq
    call :verify_line 2 x xquery-tutorial-result.html
    call :verify_line 3 x xquery-tutorial-result.xml

    rem Cleanup
    call :rmdir "%TEST_DIR%"
	</case>

	<case name="invoking xspec with TEST_DIR creates files in TEST_DIR (Schematron)">
    rem Delete default output dir if exists
    call :rmdir-if-exist ..\test\xspec

    rem Run with absolute TEST_DIR
    call :run ..\bin\xspec.bat -s schematron-017.xspec
    call :verify_retval 0
    call :verify_line 17 x "Report available at %TEST_DIR%\schematron-017-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x schematron-017-compiled.xsl
    call :verify_line 2 x schematron-017-result.html
    call :verify_line 3 x schematron-017-result.xml

    rem Default output dir should not be created
    call :verify_not_exist xspec\

    rem Run with relative TEST_DIR
    set TEST_DIR=..\test\xspec
    call :run ..\bin\xspec.bat -s schematron-017.xspec
    call :verify_retval 0
    call :verify_line 17 x "Report available at %TEST_DIR%\schematron-017-result.html"

    rem Verify files in specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x schematron-017-compiled.xsl
    call :verify_line 2 x schematron-017-result.html
    call :verify_line 3 x schematron-017-result.xml

    rem Cleanup
    call :rmdir "%TEST_DIR%"
	</case>

	<!--
		XProc (BaseX)
	-->

	<case ifdef="BASEX_JAR XMLCALABASH_JAR" name="XProc harness for BaseX (standalone)">
    rem Output files
    set "COMPILED_FILE=%WORK_DIR%\compiled.xq"
    set "EXPECTED_REPORT=%WORK_DIR%\xquery-tutorial-result.html"

    rem Run
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=../tutorial/xquery-tutorial.xspec ^
        -o result="file:///%EXPECTED_REPORT:\=/%" ^
        -p basex-jar="%BASEX_JAR%" ^
        -p compiled-file="file:///%COMPILED_FILE:\=/%" ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\basex\basex-standalone-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line -1 r "..*:passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem Compiled file
    call :verify_exist "%COMPILED_FILE%"

    rem HTML report file should be created and its charset should be UTF-8 #72
    call :run java -jar "%SAXON_JAR%" -s:"%EXPECTED_REPORT%" -xsl:html-charset.xsl
    call :verify_line 1 x "true"
	</case>

	<case ifdef="BASEX_JAR XMLCALABASH_JAR" name="XProc harness for BaseX (server)">
    rem BaseX dir
    set "BASEX_HOME=%BASEX_JAR%\.."

    rem Start BaseX server
    rem Run the batch file in a child process in order to localize various environment changes
    call :run "%BASEX_HOME%\bin\basexhttp.bat" -S
    call :verify_retval 0

    rem HTML report file
    set "EXPECTED_REPORT=%WORK_DIR%\xquery-tutorial-result.html"

    rem Run
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=../tutorial/xquery-tutorial.xspec ^
        -o result="file:///%EXPECTED_REPORT:\=/%" ^
        -p auth-method=Basic ^
        -p endpoint=http://localhost:8984/rest ^
        -p password=admin ^
        -p username=admin ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\basex\basex-server-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line_count 2
    call :verify_line 2 r "..*:passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem HTML report file should be created and its charset should be UTF-8 #72
    call :run java -jar "%SAXON_JAR%" -s:"%EXPECTED_REPORT%" -xsl:html-charset.xsl
    call :verify_line 1 x "true"

    rem Stop BaseX server
    rem Run the batch file in a child process in order to localize various environment changes
    call :run "%BASEX_HOME%\bin\basexhttpstop.bat"
    call :verify_retval 0
	</case>

	<!--
		Ant with minimum properties
	-->

	<case name="Ant with minimum properties (XSLT)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Delete default output dir if exists
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"

    rem Default xspec.fail is true
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -3 x "BUILD FAILED"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.coverage.enabled is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 4
    call :verify_line 1 x escape-for-regex_xml-to-properties.xml
    call :verify_line 2 x escape-for-regex-compiled.xsl
    call :verify_line 3 x escape-for-regex-result.html
    call :verify_line 4 x escape-for-regex-result.xml

    rem HTML report file contains CSS inline
    call :run java -jar "%SAXON_JAR%" -s:..\tutorial\xspec\escape-for-regex-result.html -xsl:html-css.xsl
    call :verify_line 1 x "true"

    rem Cleanup
    call :rmdir ..\tutorial\xspec
	</case>

	<case name="Ant with minimum properties (XQuery)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Delete default output dir if exists
    call :rmdir-if-exist ..\tutorial\xspec

    rem Run
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 4
    call :verify_line 1 x xquery-tutorial_xml-to-properties.xml
    call :verify_line 2 x xquery-tutorial-compiled.xq
    call :verify_line 3 x xquery-tutorial-result.html
    call :verify_line 4 x xquery-tutorial-result.xml

    rem Cleanup
    call :rmdir ..\tutorial\xspec
	</case>

	<case name="Ant with minimum properties (Schematron)">
    rem Unset any preset args
    set ANT_ARGS=

    rem Delete default output dir if exists
    call :rmdir-if-exists ..\tutorial\schematron\xspec

    rem Run
    rem * Should work without phase #168
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-03.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify default output dir
    rem * Default clean.output.dir is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n ..\tutorial\schematron\xspec
    call :verify_line_count 9
    call :verify_line 1 x demo-03_xml-to-properties.xml
    call :verify_line 2 x demo-03-compiled.xsl
    call :verify_line 3 x demo-03-result.html
    call :verify_line 4 x demo-03-result.xml
    call :verify_line 5 x demo-03-sch-preprocessed.xsl
    call :verify_line 6 x demo-03-sch-preprocessed.xspec
    call :verify_line 7 x demo-03-sch-step3-wrapper.xsl
    call :verify_line 8 x demo-03-step1.sch
    call :verify_line 9 x demo-03-step2.sch

    rem Cleanup
    call :rmdir ..\tutorial\schematron\xspec
	</case>

	<!--
		Catalog (Ant)
	-->

	<case ifdef="XML_RESOLVER_JAR" name="Ant with catalog (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="%CD%\catalog\01\catalog.xml" ^
        -Dxspec.xml="%CD%\catalog\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line -10 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant with catalog (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="%CD%\catalog\01\catalog.xml" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\catalog\catalog-01_query.xspec"
    call :verify_retval 0
    call :verify_line -10 x "     [xslt] passed: 2 / pending: 0 / failed: 0 / total: 2"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant with catalog (Schematron)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="%CD%\catalog\01\catalog.xml" ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\catalog\catalog-01_schematron.xspec"
    call :verify_retval 0
    call :verify_line -10 x "     [xslt] passed: 4 / pending: 0 / failed: 0 / total: 4"
    call :verify_line -2  x "BUILD SUCCESSFUL"
	</case>

	<!--
		xspec.fail (Ant)
	-->

	<case name="Ant with xspec.fail=false continues on test failure (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant with xspec.fail=true makes the build fail on test failure before cleanup (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dxspec.fail=true ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -3 x "BUILD FAILED"

    rem Verify the build fails before cleanup
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 4
	</case>

	<!--
		Ant verbose test.type
			Last char is capitalized to verify case-insensitiveness
	-->

	<case name="Ant verbose test.type (XSLT)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=xslT ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_line * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
	</case>

	<case name="Ant verbose test.type (XQuery)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=xquerY ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_line * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case name="Ant verbose test.type (Schematron)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dtest.type=schematroN ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_line * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
	</case>

	<!--
		Ant various properties
	-->

	<case name="Ant for Schematron with various properties except catalog and xspec.fail">
    set "BUILD_XML=%WORK_DIR%\build.xml"

    rem For testing -Dxspec.project.dir
    call :copy ..\build.xml "%BUILD_XML%"

    rem Delete default output dir if exists
    call :rmdir-if-exist ..\tutorial\schematron\xspec

    rem Run
    call :run ant ^
        -buildfile "%BUILD_XML%" ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dxspec.project.dir="%CD%\.." ^
        -Dxspec.properties="%CD%\schematron.properties" ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-03.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify that -Dxspec.dir was honored and the default output dir was not created
    call :verify_not_exist ..\tutorial\schematron\xspec\

    rem Verify clean.output.dir=true
    call :verify_not_exist "%TEST_DIR%"
	</case>

	<!--
		Catalog (CLI) (-catalog)
	-->

	<case ifdef="XML_RESOLVER_JAR" name="CLI with -catalog uses XML Catalog resolver and does so even with spaces in file path (XSLT)">
    set "SPACE_DIR=%WORK_DIR%\cat a log"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog "%SPACE_DIR%\01\catalog.xml" "%SPACE_DIR%\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line 16 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="CLI with -catalog uses XML Catalog resolver (XQuery)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog catalog\01\catalog.xml -q catalog\catalog-01_query.xspec
    call :verify_retval 0
    call :verify_line 7 x "passed: 2 / pending: 0 / failed: 0 / total: 2"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="CLI with -catalog uses XML Catalog resolver (Schematron)">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog catalog\01\catalog.xml -s catalog\catalog-01_schematron.xspec
    call :verify_retval 0
    call :verify_line 19 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog (CLI) (XML_CATALOG)
	-->

	<case ifdef="XML_RESOLVER_JAR" name="CLI with XML_CATALOG set uses XML Catalog resolver and does so even with spaces in file path (XSLT)">
    set "SPACE_DIR=%WORK_DIR%\cat a log"
    call :mkdir "%SPACE_DIR%\01"
    call :copy catalog\catalog-01* "%SPACE_DIR%"
    call :copy catalog\01          "%SPACE_DIR%\01"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=%SPACE_DIR%\01\catalog.xml"

    call :run ..\bin\xspec.bat "%SPACE_DIR%\catalog-01_stylesheet.xspec"
    call :verify_retval 0
    call :verify_line 16 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		Catalog resolver and SAXON_HOME (CLI)
	-->

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec using SAXON_HOME finds Saxon jar and XML Catalog Resolver jar">
    set "SAXON_HOME=%WORK_DIR%\saxon"
    call :mkdir "%SAXON_HOME%"
    call :copy "%SAXON_JAR%"        "%SAXON_HOME%"
    call :copy "%XML_RESOLVER_JAR%" "%SAXON_HOME%\xml-resolver-1.2.jar"
    set SAXON_CP=

    rem To avoid "No license file found" warning on commercial Saxon
    set "SAXON_LICENSE=%SAXON_JAR%\..\saxon-license.lic"
    if exist "%SAXON_LICENSE%" call :copy "%SAXON_LICENSE%" "%SAXON_HOME%"

    call :run ..\bin\xspec.bat -catalog catalog\01\catalog.xml catalog\catalog-01_stylesheet.xspec
    call :verify_retval 0
    call :verify_line 16 x "passed: 4 / pending: 0 / failed: 0 / total: 4"
	</case>

	<!--
		RelaxNG Schema
	-->

	<case ifdef="JING_JAR" name="Schema detects no error in known good .xspec files">
    call :run ant -buildfile schema\build.xml -lib "%JING_JAR%"
    call :verify_retval 0

    rem Verify that the fileset includes test and tutorial files recursively
    call :verify_line * r "..*\\test\\catalog\\..*"
    call :verify_line * r "..*\\tutorial\\coverage\\..*"
	</case>

	<case ifdef="JING_JAR" name="Schema detects errors in node-selection test">
    rem '-t' for identifying the last line
    call :run java -jar "%JING_JAR%" -c -t ..\src\schemas\xspec.rnc ^
        xspec-node-selection.xspec ^
        xspec-node-selection_stylesheet.xspec
    call :verify_retval 1
    call :verify_line 1 r ".*-child-not-allowed"
    call :verify_line 2 r ".*-child-not-allowed"
    call :verify_line 3 r ".*-child-not-allowed"
    call :verify_line 4 r ".*-child-not-allowed"
    call :verify_line 5 r ".*-child-not-allowed"
    call :verify_line 6 r ".*-child-not-allowed"
    call :verify_line 7 r ".*-child-not-allowed"
    call :verify_line 8 r "Elapsed time"
	</case>

	<!--
		saxon.custom.options (Ant)
	-->

	<case name="Ant for XSLT with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t" ^
        -Dxspec.xml="%CD%\saxon-custom-options\test.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<case name="Ant for XQuery with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\saxon-custom-options\test.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<!--
		SAXON_CUSTOM_OPTIONS (CLI)
	-->

	<case name="invoking xspec for XSLT with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 3 / pending: 0 / failed: 0 / total: 3"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<case name="invoking xspec for XQuery with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat -q saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 3 / pending: 0 / failed: 0 / total: 3"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<!--
		Coverage (Ant)
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Ant for XSLT with coverage creates report files">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem XML and HTML report file
    call :verify_exist "%TEST_DIR%\demo-result.xml"
    call :verify_exist "%TEST_DIR%\demo-result.html"

    rem Coverage report file is created and contains CSS inline
    call :run java -jar "%SAXON_JAR%" -s:"%TEST_DIR%\demo-coverage.html" -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="Ant for XQuery with coverage fails">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=q ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec"
    call :verify_retval 1
    call :verify_line -3 x "BUILD FAILED"
    call :verify_line -2 r ".*Coverage is supported only for XSLT"
	</case>

	<case name="Ant for Schematron with coverage fails">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dtest.type=s ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_retval 1
    call :verify_line -3 x "BUILD FAILED"
    call :verify_line -2 r ".*Coverage is supported only for XSLT"
	</case>

	<!--
		JUnit (Ant)
	-->

	<case name="Ant for XSLT with JUnit creates report files">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.junit.enabled=true ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -3 x "BUILD FAILED"

    rem XML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.xml"

    rem HTML report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-result.html"

    rem JUnit report file
    call :verify_exist "%TEST_DIR%\escape-for-regex-junit.xml"
	</case>

	<!--
		#185
	-->

	<case name="Import order #185">
    call :run ..\bin\xspec.bat xspec-185\import-1.xspec
    call :verify_retval 0
    call :verify_line  7 x "Scenario 1-1"
    call :verify_line  8 x "Scenario 1-2"
    call :verify_line  9 x "Scenario 1-3"
    call :verify_line 10 x "Scenario 2a-1"
    call :verify_line 11 x "Scenario 2a-2"
    call :verify_line 12 x "Scenario 2b-1"
    call :verify_line 13 x "Scenario 2b-2"
    call :verify_line 14 x "Scenario 3"
    call :verify_line 15 x "Formatting Report..."
	</case>

	<case name="Import order with Ant #185">
    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -Dxspec.xml="%CD%\xspec-185\import-1.xspec"
    call :verify_retval 0

    call :run %SYSTEMROOT%\system32\find " Scenario " "%ANT_LOG%"
    call :verify_line_count 9
    call :verify_line  2 x "     [java] Scenario 1-1"
    call :verify_line  3 x "     [java] Scenario 1-2"
    call :verify_line  4 x "     [java] Scenario 1-3"
    call :verify_line  5 x "     [java] Scenario 2a-1"
    call :verify_line  6 x "     [java] Scenario 2a-2"
    call :verify_line  7 x "     [java] Scenario 2b-1"
    call :verify_line  8 x "     [java] Scenario 2b-2"
    call :verify_line  9 x "     [java] Scenario 3"
	</case>

	<!--
		Ambiguous x:expect
	-->

	<case name="Ambiguous x:expect generates warning">
    call :run ..\bin\xspec.bat end-to-end\cases\xspec-ambiguous-expect.xspec
    call :verify_line 12 r "WARNING: x:expect has boolean @test"
    call :verify_line 17 r "WARNING: x:expect has boolean @test"
    call :verify_line 24 r "WARNING: x:expect has boolean @test"
    call :verify_line 33 x "Formatting Report..."
	</case>

	<!--
		Obsolete x:space
	-->

	<case name="Obsolete x:space">
    call :run ..\bin\xspec.bat obsolete-space\test.xspec
    call :verify_retval 2
    call :verify_line  * x "x:space is obsolete. Use x:text instead."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<!--
		#423
	-->

	<case ifdef="XMLCALABASH_JAR" name="XSLT selecting nodes without context should be error (XProc) #423">
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=xspec-423/test.xspec ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :verify_retval 1
    call :verify_line -3 r "..*err:XPDY0002:"
    call :verify_line -1 r "ERROR:"
	</case>

	<case ifdef="XMLCALABASH_JAR" name="XQuery selecting nodes without context should be error (XProc) #423">
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=xspec-423/test.xspec ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xquery-harness.xproc
    call :verify_retval 1
    call :verify_line -3 r "..*err:XPDY0002:"
    call :verify_line -1 r "ERROR:"
	</case>

	<case name="XSLT selecting nodes without context should be error (Ant) #423">
    rem Should be error even when xspec.fail=false
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\test\xspec-423\test.xspec"
    call :verify_retval 2
    call :verify_line  * r "     \[java\]   XPDY0002:"
    call :verify_line -3 x "BUILD FAILED"
	</case>

	<case name="XSLT selecting nodes without context should be error (CLI) #423">
    call :run ..\bin\xspec.bat xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="XSLT selecting nodes without context should be error (CLI -c) #423">
    call :run ..\bin\xspec.bat -c xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error collecting test coverage data"
	</case>

	<case name="XQuery selecting nodes without context should be error (CLI) #423">
    call :run ..\bin\xspec.bat -q xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		Invalid @xquery-version
	-->

	<case name="Invalid @xquery-version should be error">
    call :run ..\bin\xspec.bat -q xquery-version\invalid.xspec
    call :verify_retval 2
    call :verify_line  * r ".*XQST0031..*InVaLiD"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<!--
		report-css-uri
	-->

	<case name="report-css-uri for HTML report file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.result.html.css="%CD%\html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_DIR%\escape-for-regex-result.html" ^
        -xsl:html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_line 1 x "true"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="report-css-uri for coverage report file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.coverage.html.css="%CD%\html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:"%TEST_DIR%\demo-coverage.html" ^
        -xsl:html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_line 1 x "true"
	</case>

	<!--
		#522
	-->

	<case name="Error message when source is not XSpec #522">
    call :run ..\bin\xspec.bat do-nothing.xsl
    call :verify_retval 2
    call :verify_line 5 r "Source document is not XSpec"
	</case>

	<!--
		User-defined variable in XSpec namespace
	-->

	<case name="Error on user-defined variable in XSpec namespace">
    call :run ..\bin\xspec.bat variable\reserved-name.xspec
    call :verify_retval 2
    call :verify_line 6 r ".*x:XSPEC008:"
	</case>

	<!--
		Deprecated Saxon version
	-->

	<case name="Deprecated Saxon version">
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0

    java -cp "%SAXON_JAR%" net.sf.saxon.Version 2>&amp;1 | %SYSTEMROOT%\system32\find " 9.7."
    if errorlevel 1 (
        call :verify_line 4 x " "
    ) else (
        call :verify_line 4 r "WARNING: Saxon version ..*"
    )
	</case>

	<!--
		No warning on Ant
	-->

	<case name="No warning on Ant (XSLT) #633">
    java -cp "%SAXON_JAR%" net.sf.saxon.Version 2>&amp;1 | %SYSTEMROOT%\system32\find " 9.7."
    if not errorlevel 1 (
        call :skip "Always expect a deprecation warning on Saxon 9.7"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=t ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1
	</case>

	<case name="No warning on Ant (XQuery) #633">
    java -cp "%SAXON_JAR%" net.sf.saxon.Version 2>&amp;1 | %SYSTEMROOT%\system32\find " 9.7."
    if not errorlevel 1 (
        call :skip "Always expect a deprecation warning on Saxon 9.7"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1
	</case>

	<case name="No warning on Ant (Schematron) #633">
    java -cp "%SAXON_JAR%" net.sf.saxon.Version 2>&amp;1 | %SYSTEMROOT%\system32\find " 9.7."
    if not errorlevel 1 (
        call :skip "Always expect a deprecation warning on Saxon 9.7"
        goto :EOF
    )

    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -logfile "%ANT_LOG%" ^
        -verbose ^
        -Dtest.type=s ^
        -Dxspec.xml="%CD%\xspec-uri.xspec"
    call :verify_retval 0
    call :verify_exist "%ANT_LOG%"

    call :run %SYSTEMROOT%\system32\find /i "warning" "%ANT_LOG%"
    call :verify_retval 1

    rem Verify Ant makepath task
    call :run type "%ANT_LOG%"
    call :verify_line * x " [makepath] Setting xspec.schematron.file to file path %CD%\do-nothing.sch"
	</case>

	<!--
		@catch should not catch error outside SUT
	-->

	<case ifdef="XSLT_SUPPORTS_3_0" name="@catch should not catch error outside SUT (XSLT)">
    call :run ..\bin\xspec.bat catch\compiler-error.xspec
    call :verify_retval 2
    call :verify_line * r "ERROR in scenario .*"

    call :run ..\bin\xspec.bat catch\error-in-context-avt-for-template-call.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-context-avt-for-template-call: Error signalled .*"

    call :run ..\bin\xspec.bat catch\error-in-context-param-for-matching-template.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-context-param-for-matching-template: Error signalled .*"

    call :run ..\bin\xspec.bat catch\error-in-function-call-param.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-function-call-param: Error signalled .*"

    call :run ..\bin\xspec.bat catch\error-in-template-call-param.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-template-call-param: Error signalled .*"

    call :run ..\bin\xspec.bat catch\error-in-variable.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-variable: Error signalled .*"

    call :run ..\bin\xspec.bat catch\static-error-in-compiled-test.xspec
    call :verify_retval 2
    call :verify_line * r ".*XPST0017:"
	</case>

	<case ifdef="XQUERY_SUPPORTS_3_1_DEFAULT" name="@catch should not catch error outside SUT (XQuery)">
    call :run ..\bin\xspec.bat -q catch\compiler-error.xspec
    call :verify_retval 2
    call :verify_line * r ".*x:XSPEC005:"

    call :run ..\bin\xspec.bat -q catch\error-in-function-call-param.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-function-call-param: Error signalled .*"

    call :run ..\bin\xspec.bat -q catch\error-in-variable.xspec
    call :verify_retval 2
    call :verify_line * r "  error-code-of-my-variable: Error signalled .*"

    call :run ..\bin\xspec.bat -q catch\static-error-in-compiled-test.xspec
    call :verify_retval 2
    call :verify_line * r ".*XPST0017:"
	</case>

	<!--
		Error in SUT should not be caught by default
	-->

	<case name="Error in SUT should not be caught by default (XSLT)">
    call :run ..\bin\xspec.bat catch\no-by-default.xspec
    call :verify_retval 2
    call :verify_line * r "  my-error-code: Error signalled .*"
	</case>

	<case name="Error in SUT should not be caught by default (XQuery)">
    call :run ..\bin\xspec.bat -q catch\no-by-default.xspec
    call :verify_retval 2
    call :verify_line * r "  my-error-code: Error signalled .*"
	</case>

	<!--
		Importing Ant build file
	-->

	<case name="Importing Ant build file">
    call :run ant ^
        -buildfile ant-import\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line -9 x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -5 x "     [echo] Target overridden!"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<!--
		#655
	-->

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Trace listener should not hardcode output dir #655">
    rem TEST_DIR should not contain "xspec". (Assume TEMP does not contain it.)
    set "TEST_DIR=%TEMP%\XSpec-655"

    call :run ..\bin\xspec.bat -c ..\tutorial\coverage\demo.xspec
    call :verify_retval 0

    call :run %SYSTEMROOT%\system32\find "&lt;pre>01:" "%TEST_DIR%\demo-coverage.html"
    call :verify_retval 0
    call :verify_line_count 3

    call :rmdir "%TEST_DIR%"
	</case>

	<!--
		x:like errors
	-->

	<case name="x:like errors">
    call :run ..\bin\xspec.bat like\none.xspec
    call :verify_retval 2
    call :verify_line 6 x "  x:XSPEC009: x:like: Scenario not found: none"

    call :run ..\bin\xspec.bat like\multiple.xspec
    call :verify_retval 2
    call :verify_line 5 x "  x:XSPEC010: x:like: 2 scenarios found with same label: shared scenario"

    call :run ..\bin\xspec.bat like\loop.xspec
    call :verify_retval 2
    call :verify_line 5 x "  x:XSPEC011: x:like: Reference to ancestor scenario creates infinite loop: parent scenario"
	</case>

	<!--
		Override ID generation templates
	-->

	<case name="Override ID generation">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.compiler.xsl="%CD%\override-id\generate-xspec-tests.xsl" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    call :run type "%TEST_DIR%\escape-for-regex-compiled.xsl"
    call :verify_line * r "..*x:overridden-scenario-id-"
    call :verify_line * r "..*x:overridden-expect-id-"
	</case>

</collection>
