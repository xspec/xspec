<?xml version="1.0" encoding="UTF-8"?>
<collection xmlns="x-urn:xspec:test:xspec-bat" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="x-urn:xspec:test:xspec-bat collection.xsd">

	<case name="invoking xspec without arguments prints usage">
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 3 x "Usage: xspec [-t|-q|-s|-c|-j|-catalog file|-h] file [coverage]"
	</case>

	<case name="invoking xspec without arguments prints usage even if Saxon environment variables are not defined">
    set SAXON_CP=
    call :run ..\bin\xspec.bat
    call :verify_retval 1
    call :verify_line 2 x "SAXON_CP and SAXON_HOME both not set!"
    call :verify_line 5 r "Usage: xspec "
	</case>

	<case name="invoking xspec with -h prints usage and does so even when it is 11th argument">
    call :run ..\bin\xspec.bat -t -t -t -t -t -t -t -t -t -t -h
    call :verify_retval 0
    call :verify_line 2 r "Usage: xspec "
	</case>

	<case name="invoking xspec with -s and -t prints error message">
    call :run ..\bin\xspec.bat -s -t
    call :verify_retval 1
    call :verify_line 2 x "-s and -t are mutually exclusive"
	</case>

	<case name="invoking xspec with -s and -q prints error message">
    call :run ..\bin\xspec.bat -s -q
    call :verify_retval 1
    call :verify_line 2 x "-s and -q are mutually exclusive"
	</case>

	<case name="invoking xspec with -t and -q prints error message">
    call :run ..\bin\xspec.bat -t -q
    call :verify_retval 1
    call :verify_line 2 x "-t and -q are mutually exclusive"
	</case>

	<case name="invoking xspec -c with Saxon9HE returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9he.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9sa.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon8SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8sa.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon8 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Code coverage requires Saxon extension functions which are available only under Saxon9EE or Saxon9PE."
	</case>

	<case name="invoking xspec -c with Saxon9EE creates test stylesheet">
    rem Append non-Saxon jar to see if SAXON_CP is parsed correctly
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar;%SYSTEMDRIVE%\path\to\another.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Creating Test Stylesheet..."
	</case>

	<case name="invoking xspec -c with Saxon9PE creates test stylesheet">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9pe.jar
    call :run ..\bin\xspec.bat -c ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Creating Test Stylesheet..."
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="invoking xspec -c creates report files">
    rem Other stderr #204
    set JAVA_TOOL_OPTIONS=-Dfoo

    rem Non alphanumeric path #208
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\up &amp; down"
    call :mkdir "%SPECIAL_CHARS_DIR%"

    call :copy ..\tutorial\coverage\demo* "%SPECIAL_CHARS_DIR%"
    call :run ..\bin\xspec.bat -c "%SPECIAL_CHARS_DIR%\demo.xspec"
    call :verify_retval 0

    rem XML and HTML report file
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.xml"
    call :verify_exist "%SPECIAL_CHARS_DIR%\xspec\demo-result.html"

    rem Coverage report file is created and contains CSS inline #194
    call :run java -jar "%SAXON_JAR%" -s:"%SPECIAL_CHARS_DIR%\xspec\demo-coverage.html" -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="invoking xspec -c -q prints error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar
    call :run ..\bin\xspec.bat -c -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 1
    call :verify_line 2 x "Coverage is supported only for XSLT"
	</case>

	<case name="invoking xspec -c -s prints error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon9ee.jar
    call :run ..\bin\xspec.bat -c -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 1
    call :verify_line 2 x "Coverage is supported only for XSLT"
	</case>

	<case name="invoking xspec generates message with default report location and creates report files">
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 19 x "Report available at %PARENT_DIR_ABS%\tutorial\xspec\escape-for-regex-result.html"

    rem Verify
    rem * XML report file is created
    rem * HTML report file is created
    rem * Coverage is disabled by default
    rem * JUnit is disabled by default
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 3
    call :verify_line 1 x escape-for-regex.xsl
    call :verify_line 2 x escape-for-regex-result.html
    call :verify_line 3 x escape-for-regex-result.xml

    rem HTML report file contains CSS inline #135
    call :run java -jar "%SAXON_JAR%" -s:..\tutorial\xspec\escape-for-regex-result.html -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="invoking xspec with -j option with Saxon8 returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8.jar
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Saxon8 detected. JUnit report requires Saxon9."
	</case>

	<case name="invoking xspec with -j option with Saxon8-SA returns error message">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxon8sa.jar
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Saxon8 detected. JUnit report requires Saxon9."
	</case>

	<case name="invoking xspec with -j option generates message with JUnit report location and creates report files">
    call :run ..\bin\xspec.bat -j ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 20 x "Report available at %PARENT_DIR_ABS%\tutorial\xspec\escape-for-regex-junit.xml"

    rem XML report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-result.xml

    rem HTML report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-result.html

    rem JUnit report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-junit.xml
	</case>

	<case name="invoking xspec with Saxon-B-9-1-0-8 creates test stylesheet">
    set SAXON_CP=%SYSTEMDRIVE%\path\to\saxonb9-1-0-8.jar
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 1
    call :verify_line 2 x "Creating Test Stylesheet..."
	</case>

	<case name="invoking xspec with TEST_DIR already set externally generates files inside TEST_DIR">
    set "TEST_DIR=%WORK_DIR%"
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 19 x "Report available at %TEST_DIR%\escape-for-regex-result.html"
	</case>

	<case name="invoking xspec that passes a non xs:boolean does not raise a warning #46">
    call :run ..\bin\xspec.bat xspec-46.xspec
    call :verify_retval 0
    call :verify_line 4 r "Testing with"
	</case>

	<case ifdef="XMLCALABASH_JAR" name="executing the Saxon XProc harness generates a report with UTF-8 encoding">
    call :run java -Xmx1024m -cp "%XMLCALABASH_JAR%" com.xmlcalabash.drivers.Main -isource=xspec-72.xspec -p xspec-home="file:/%PARENT_DIR_ABS:\=/%/" -oresult=xspec/xspec-72-result.html ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :run java -jar "%SAXON_JAR%" -s:xspec\xspec-72-result.html -xsl:html-charset.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="invoking xspec with path containing parentheses #84, an apostrophe #119 or an ampersand #202 runs successfully and generates HTML report file">
    set "SPECIAL_CHARS_DIR=%WORK_DIR%\some'path (84) here &amp; there"
    call :mkdir "%SPECIAL_CHARS_DIR%"
    call :copy ..\tutorial\escape-for-regex.* "%SPECIAL_CHARS_DIR%"

    set "EXPECTED_REPORT=%SPECIAL_CHARS_DIR%\xspec\escape-for-regex-result.html"

    call :run ..\bin\xspec.bat "%SPECIAL_CHARS_DIR%\escape-for-regex.xspec"
    call :verify_retval 0
    call :verify_line 20 x "Report available at %EXPECTED_REPORT%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<!-- bin\xspec.bat does not support saxon script -->
	<case ifdef="NEVER" name="invoking xspec with saxon script uses the saxon script #121 #122">
    (echo @echo Saxon script with EXPath Packaging System) > "%WORK_DIR%\saxon.bat"
    set "PATH=%PATH%;%WORK_DIR%"
    call :run ..\bin\xspec.bat ..\tutorial\escape-for-regex.xspec
    call :verify_retval 0
    call :verify_line 1 x "Saxon script found, use it."
	</case>

	<case name="Schematron phase/parameters are passed to Schematron compile (command line)">
    rem Make the line numbers predictable by providing an existing output dir
    set "TEST_DIR=%WORK_DIR%"

    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-param-001-step3.xsl
    call :run ..\bin\xspec.bat -s schematron\schematron-param-001.xspec
    call :verify_retval 0
    call :verify_line 19 x "passed: 9 / pending: 0 / failed: 0 / total: 9"
	</case>

	<case name="Schematron phase/parameters are passed to Schematron compile (Ant)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dtest.type=s ^
        -Dxspec.schematron.preprocessor.step3="%CD%\schematron\schematron-param-001-step3.xsl" ^
        -Dxspec.xml="%CD%\schematron\schematron-param-001.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 9 / pending: 0 / failed: 0 / total: 9"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="invoking xspec with Schematron XSLTs provided externally uses provided XSLTs for Schematron compile (command line)">
    set SCHEMATRON_XSLT_INCLUDE=schematron\schematron-xslt-include.xsl
    set SCHEMATRON_XSLT_EXPAND=schematron\schematron-xslt-expand.xsl
    set SCHEMATRON_XSLT_COMPILE=schematron\schematron-xslt-compile.xsl

    call :run ..\bin\xspec.bat -s ..\tutorial\schematron\demo-01.xspec
    call :verify_retval 0
    call :verify_line  4 x "I am schematron-xslt-include.xsl!"
    call :verify_line  5 x "I am schematron-xslt-expand.xsl!"
    call :verify_line  6 x "I am schematron-xslt-compile.xsl!"
    call :verify_line 18 x "passed: 3 / pending: 0 / failed: 0 / total: 3"
	</case>

	<case name="invoking xspec with Schematron XSLTs provided externally uses provided XSLTs for Schematron compile (Ant)">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dclean.output.dir=true ^
        -Dtest.type=s ^
        -Dxspec.schematron.preprocessor.step1="%CD%\schematron\schematron-xslt-include.xsl" ^
        -Dxspec.schematron.preprocessor.step2="%CD%\schematron\schematron-xslt-expand.xsl" ^
        -Dxspec.schematron.preprocessor.step3="%CD%\schematron\schematron-xslt-compile.xsl" ^
        -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] I am schematron-xslt-include.xsl!"
    call :verify_line  * x "     [xslt] I am schematron-xslt-expand.xsl!"
    call :verify_line  * x "     [xslt] I am schematron-xslt-compile.xsl!"
    call :verify_line  * x "     [xslt] passed: 3 / pending: 0 / failed: 0 / total: 3"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="invoking xspec with the -s option does not display Schematron warnings #129 #131 and removes temporary files">
    call :run ..\bin\xspec.bat -s ..\tutorial\schematron\demo-03.xspec
    call :verify_retval 0
    call :verify_line 4 x "Converting Schematron XSpec into XSLT XSpec..."

    rem Cleanup removes temporary files in TEST_DIR
    call :run dir /b /o:n ..\tutorial\schematron\xspec
    call :verify_line_count 3
    call :verify_line 1 x demo-03.xsl
    call :verify_line 2 x demo-03-result.html
    call :verify_line 3 x demo-03-result.xml
	</case>

	<case name="invoking xspec -s with TEST_DIR creates files in TEST_DIR">
    rem Absolute
    set "TEST_DIR=%WORK_DIR%\test_dir"
    call :run ..\bin\xspec.bat -s schematron-017.xspec
    call :verify_retval 0

    rem Specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x schematron-017.xsl
    call :verify_line 2 x schematron-017-result.html
    call :verify_line 3 x schematron-017-result.xml

    rem Default TEST_DIR
    call :run dir /b xspec
    call :verify_line_count 0

    rem Relative
    set TEST_DIR=xspec
    call :run ..\bin\xspec.bat -s schematron-017.xspec
    call :verify_retval 0

    rem Specified TEST_DIR
    call :run dir /b /o:n "%TEST_DIR%"
    call :verify_line_count 3
    call :verify_line 1 x schematron-017.xsl
    call :verify_line 2 x schematron-017-result.html
    call :verify_line 3 x schematron-017-result.xml
	</case>

	<case name="invoking xspec with -q option runs XSpec test for XQuery">
    call :run ..\bin\xspec.bat -q ..\tutorial\xquery-tutorial.xspec
    call :verify_retval 0
    call :verify_line 5 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case ifdef="BASEX_JAR XMLCALABASH_JAR" name="XProc harness for BaseX (standalone)">
    rem Output files
    set "COMPILED_FILE=%WORK_DIR%\compiled.xq"
    set "EXPECTED_REPORT=%WORK_DIR%\xquery-tutorial-result.html"

    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=../tutorial/xquery-tutorial.xspec ^
        -p xspec-home="file:/%PARENT_DIR_ABS:\=/%/" ^
        -p basex-jar="%BASEX_JAR%" ^
        -p compiled-file="file:/%COMPILED_FILE:\=/%" ^
        -o result="file:/%EXPECTED_REPORT:\=/%" ^
        ..\src\harnesses\basex\basex-standalone-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line -1 r "..*/src/harnesses/harness-lib.xpl:267:45:passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem Output files
    call :verify_exist "%COMPILED_FILE%"
    call :verify_exist "%EXPECTED_REPORT%"
	</case>

	<case ifdef="BASEX_JAR XMLCALABASH_JAR" name="XProc harness for BaseX (server)">
    rem BaseX dir
    set "BASEX_HOME=%BASEX_JAR%\.."

    rem Start BaseX server
    call "%BASEX_HOME%\bin\basexhttp.bat" -S

    rem Output file
    set "EXPECTED_REPORT=%WORK_DIR%/xquery-tutorial-result.html"

    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=../tutorial/xquery-tutorial.xspec ^
        -p xspec-home="file:/%PARENT_DIR_ABS:\=/%/" ^
        -p endpoint=http://localhost:8984/rest ^
        -p username=admin ^
        -p password=admin ^
        -p auth-method=Basic ^
        -o result="file:/%EXPECTED_REPORT:\=/%" ^
        ..\src\harnesses\basex\basex-server-xquery-harness.xproc
    call :verify_retval 0
    call :verify_line_count 1
    call :verify_line 1 r "..*/src/harnesses/harness-lib.xpl:267:45:passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem Output file
    call :verify_exist "%EXPECTED_REPORT%"

    rem Stop BaseX server
    call "%BASEX_HOME%\bin\basexhttpstop.bat"
	</case>

	<case name="Ant for XSLT with default properties fails on test failure">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec" -lib "%SAXON_JAR%"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -4 x "BUILD FAILED"

    rem Verify
    rem * Default xspec.coverage.enabled is false
    rem * Default xspec.junit.enabled is false
    call :run dir /b /o:n ..\tutorial\xspec
    call :verify_line_count 4
    call :verify_line 1 x escape-for-regex.xsl
    call :verify_line 2 x escape-for-regex_xml-to-properties.xml
    call :verify_line 3 x escape-for-regex-result.html
    call :verify_line 4 x escape-for-regex-result.xml

    rem HTML report file contains CSS inline
    call :run java -jar "%SAXON_JAR%" -s:..\tutorial\xspec\escape-for-regex-result.html -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="Ant for XSLT with xspec.fail=false continues on test failure">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec" -lib "%SAXON_JAR%" -Dxspec.fail=false
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant for XSLT with catalog resolves URI">
    call :run ant -buildfile ..\build.xml -Dxspec.xml="%CD%\catalog\catalog-02-xslt.xspec" -lib "%SAXON_JAR%" -Dcatalog="%CD%\catalog\catalog-02-catalog.xml" -lib "%XML_RESOLVER_JAR%"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant for XQuery with default properties">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec" -lib "%SAXON_JAR%" -Dtest.type=q
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant for XQuery with catalog resolves URI">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -lib "%XML_RESOLVER_JAR%" ^
        -Dcatalog="%CD%\catalog\catalog-02-catalog.xml" ^
        -Dtest.type=q ^
        -Dxspec.xml="%CD%\catalog\catalog-02-xquery.xspec"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case name="Ant for Schematron with minimum properties #168">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\schematron\demo-03.xspec" -lib "%SAXON_JAR%" -Dtest.type=s
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify that the default clean.output.dir is false and leaves temp files. Delete the left XSLT file at the same time.
    call :verify_exist ..\tutorial\schematron\xspec\
    call :del          ..\tutorial\schematron\demo-03.sch-preprocessed.xsl
	</case>

	<case name="Ant for Schematron with various properties except catalog">
    set "BUILD_XML=%WORK_DIR%\build.xml"
    set "ANT_TEST_DIR=%WORK_DIR%\ant-temp"

    rem Remove a temp dir created by setup
    call :rmdir ..\tutorial\schematron\xspec

    rem For testing -Dxspec.project.dir
    call :copy ..\build.xml "%BUILD_XML%"

    call :run ant -buildfile "%BUILD_XML%" -Dxspec.xml="%CD%\..\tutorial\schematron\demo-03.xspec" -lib "%SAXON_JAR%" -Dxspec.properties="%CD%\schematron.properties" -Dxspec.project.dir="%CD%\.." -Dxspec.dir="%ANT_TEST_DIR%" -Dclean.output.dir=true
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 10 / pending: 1 / failed: 0 / total: 11"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify that -Dxspec-dir was honered and the default dir was not created
    call :verify_not_exist ..\tutorial\schematron\xspec\

    rem Verify clean.output.dir=true
    call :verify_not_exist "%ANT_TEST_DIR%"
    call :verify_not_exist ..\tutorial\schematron\demo-03.sch-preprocessed.xsl
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant for Schematron with catalog and default xspec.fail resolves URI and fails on test failure">
    call :run ant -buildfile ..\build.xml -Dxspec.xml="%CD%\catalog\catalog-02-schematron.xspec" -lib "%SAXON_JAR%" -Dtest.type=s -Dclean.output.dir=true -Dcatalog="%CD%\catalog\catalog-02-catalog.xml" -lib "%XML_RESOLVER_JAR%"
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 1 / total: 2"
    call :verify_line -4 x "BUILD FAILED"

    rem Verify the build fails before cleanup
    call :verify_exist catalog\xspec\

    rem Verify that the build fails after Schematron setup and leaves temp XSLT file. Delete it at the same time.
    call :del catalog\02\tested.sch-preprocessed.xsl
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="Ant for Schematron with catalog and xspec.fail=false resolves URI and continues on test failure">
    call :run ant -buildfile ..\build.xml -Dxspec.xml="%CD%\catalog\catalog-02-schematron.xspec" -lib "%SAXON_JAR%" -Dtest.type=s -Dclean.output.dir=true -Dcatalog="%CD%\catalog\catalog-02-catalog.xml" -lib "%XML_RESOLVER_JAR%" -Dxspec.fail=false
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 1 / total: 2"
    call :verify_line -2 x "BUILD SUCCESSFUL"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec for XSLT with -catalog uses XML Catalog resolver and does so even with spaces in file path">
    set "SPACE_DIR=%WORK_DIR%\cat a log"
    call :mkdir "%SPACE_DIR%\xspec"
    call :copy catalog\catalog-01* "%SPACE_DIR%"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog "%SPACE_DIR%\catalog-01-catalog.xml" "%SPACE_DIR%\catalog-01-xslt.xspec"
    call :verify_retval 0
    call :verify_line 8 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec for XQuery with -catalog uses XML Catalog resolver">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog catalog\catalog-01-catalog.xml -q catalog\catalog-01-xquery.xspec
    call :verify_retval 0
    call :verify_line 5 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec for Schematron with -catalog uses XML Catalog resolver">
    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    call :run ..\bin\xspec.bat -catalog catalog\catalog-02-catalog.xml -s catalog\catalog-02-schematron.xspec
    call :verify_retval 0
    call :verify_line 13 x "passed: 1 / pending: 0 / failed: 1 / total: 2"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec with XML_CATALOG set uses XML Catalog resolver and does so even with spaces in file path">
    set "SPACE_DIR=%WORK_DIR%\cat a log"
    call :mkdir "%SPACE_DIR%\xspec"
    call :copy catalog\catalog-01* "%SPACE_DIR%"

    set "SAXON_CP=%SAXON_JAR%;%XML_RESOLVER_JAR%"
    set "XML_CATALOG=%SPACE_DIR%\catalog-01-catalog.xml"
    call :run ..\bin\xspec.bat "%SPACE_DIR%\catalog-01-xslt.xspec"
    call :verify_retval 0
    call :verify_line 8 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case ifdef="XML_RESOLVER_JAR" name="invoking xspec using SAXON_HOME finds Saxon jar and XML Catalog Resolver jar">
    set "SAXON_HOME=%WORK_DIR%\saxon"
    call :mkdir "%SAXON_HOME%"
    call :copy "%SAXON_JAR%" "%SAXON_HOME%"
    call :copy "%XML_RESOLVER_JAR%" "%SAXON_HOME%\xml-resolver-1.2.jar"
    set SAXON_CP=

    rem To avoid "No license file found" warning on commercial Saxon
    set "SAXON_LICENSE=%SAXON_JAR%\..\saxon-license.lic"
    if exist "%SAXON_LICENSE%" call :copy "%SAXON_LICENSE%" "%SAXON_HOME%"

    call :run ..\bin\xspec.bat -catalog catalog\catalog-01-catalog.xml catalog\catalog-01-xslt.xspec
    call :verify_retval 0
    call :verify_line 8 x "passed: 1 / pending: 0 / failed: 0 / total: 1"
	</case>

	<case ifdef="JING_JAR" name="Schema detects no error in known good .xspec files">
    call :run ant -buildfile schema\build.xml -lib "%JING_JAR%"
    call :verify_retval 0

    rem Verify that the fileset includes test and tutorial files recursively
    call :verify_line * r "..*\\test\\catalog\\..*"
    call :verify_line * r "..*\\tutorial\\coverage\\..*"
	</case>

	<case ifdef="JING_JAR" name="Schema detects errors in node-selection test">
    rem -t for identifying the last line
    call :run java -jar "%JING_JAR%" -c -t ..\src\schemas\xspec.rnc ^
        xspec-node-selection.xspec ^
        xspec-node-selection_stylesheet.xspec
    call :verify_retval 1
    call :verify_line 1 r ".*-child-not-allowed"
    call :verify_line 2 r ".*-child-not-allowed"
    call :verify_line 3 r ".*-child-not-allowed"
    call :verify_line 4 r ".*-child-not-allowed"
    call :verify_line 5 r ".*-child-not-allowed"
    call :verify_line 6 r "Elapsed time"
	</case>

	<case name="Ant for XSLT with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\saxon-custom-options\test.xspec" -lib "%SAXON_JAR%" -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t"
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<case name="Ant for XQuery with saxon.custom.options">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\saxon-custom-options\test.xspec" -lib "%SAXON_JAR%" -Dsaxon.custom.options="-config:""%SAXON_CONFIG%"" -t" -Dtest.type=q
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem Verify '-t'
    call :verify_line  * r "     \[java\] Memory used:"
	</case>

	<case name="invoking xspec for XSLT with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<case name="invoking xspec for XQuery with SAXON_CUSTOM_OPTIONS">
    rem Test with a space in file name
    set "SAXON_CONFIG=%WORK_DIR%\saxon config.xml"
    call :copy saxon-custom-options\config.xml "%SAXON_CONFIG%"

    set "SAXON_CUSTOM_OPTIONS=-config:"%SAXON_CONFIG%" -t"
    call :run ..\bin\xspec.bat -q saxon-custom-options\test.xspec
    call :verify_retval 0
    call :verify_line -3 x "passed: 1 / pending: 0 / failed: 0 / total: 1"

    rem Verify '-t'
    call :verify_line  * r "Memory used:"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="Ant for XSLT with coverage creates report files">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec" -lib "%SAXON_JAR%" -Dxspec.coverage.enabled=true
    call :verify_retval 0
    call :verify_line  * x "     [xslt] passed: 1 / pending: 0 / failed: 0 / total: 1"
    call :verify_line -2 x "BUILD SUCCESSFUL"

    rem XML and HTML report file
    call :verify_exist ..\tutorial\coverage\xspec\demo-result.xml
    call :verify_exist ..\tutorial\coverage\xspec\demo-result.html

    rem Coverage report file is created and contains CSS inline
    call :run java -jar "%SAXON_JAR%" -s:..\tutorial\coverage\xspec\demo-coverage.html -xsl:html-css.xsl
    call :verify_line 1 x "true"
	</case>

	<case name="Ant for XQuery with coverage fails">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\xquery-tutorial.xspec" -lib "%SAXON_JAR%" -Dtest.type=q -Dxspec.coverage.enabled=true
    call :verify_retval 1
    call :verify_line -3 x "BUILD FAILED"
    call :verify_line -2 r ".*Coverage is supported only for XSLT"
	</case>

	<case name="Ant for Schematron with coverage fails">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\schematron\demo-01.xspec" -lib "%SAXON_JAR%" -Dtest.type=s -Dxspec.coverage.enabled=true
    call :verify_retval 1
    call :verify_line -3 x "BUILD FAILED"
    call :verify_line -2 r ".*Coverage is supported only for XSLT"
	</case>

	<case name="Ant for XSLT with JUnit creates report files">
    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec" -lib "%SAXON_JAR%" -Dxspec.junit.enabled=true
    call :verify_retval 1
    call :verify_line  * x "     [xslt] passed: 5 / pending: 0 / failed: 1 / total: 6"
    call :verify_line -4 x "BUILD FAILED"

    rem XML report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-result.xml

    rem HTML report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-result.html

    rem JUnit report file
    call :verify_exist ..\tutorial\xspec\escape-for-regex-junit.xml
	</case>

	<case name="Import order #185">
    rem Make the line numbers predictable by providing an existing output dir
    set "TEST_DIR=%WORK_DIR%"

    call :run ..\bin\xspec.bat xspec-185\import-1.xspec
    call :verify_retval 0
    call :verify_line  5 x "Scenario 1-1"
    call :verify_line  6 x "Scenario 1-2"
    call :verify_line  7 x "Scenario 1-3"
    call :verify_line  8 x "Scenario 2a-1"
    call :verify_line  9 x "Scenario 2a-2"
    call :verify_line 10 x "Scenario 2b-1"
    call :verify_line 11 x "Scenario 2b-2"
    call :verify_line 12 x "Scenario 3"
    call :verify_line 13 x "Formatting Report..."
	</case>

	<case name="Import order with Ant #185">
    set "ANT_LOG=%WORK_DIR%\ant.log"

    call :run ant -buildfile "%CD%\..\build.xml" -Dxspec.xml="%CD%\xspec-185\import-1.xspec" -lib "%SAXON_JAR%" -logfile "%ANT_LOG%"
    call :verify_retval 0

    call :run find " Scenario " "%ANT_LOG%"
    call :verify_line_count 9
    call :verify_line  2 x "     [java] Scenario 1-1"
    call :verify_line  3 x "     [java] Scenario 1-2"
    call :verify_line  4 x "     [java] Scenario 1-3"
    call :verify_line  5 x "     [java] Scenario 2a-1"
    call :verify_line  6 x "     [java] Scenario 2a-2"
    call :verify_line  7 x "     [java] Scenario 2b-1"
    call :verify_line  8 x "     [java] Scenario 2b-2"
    call :verify_line  9 x "     [java] Scenario 3"
	</case>

	<case name="Ambiguous x:expect generates warning">
    rem Provide TEST_DIR with an existing directory to make the output lines predictable
    set "TEST_DIR=%WORK_DIR%"
    call :run ..\bin\xspec.bat end-to-end\cases\xspec-ambiguous-expect.xspec
    call :verify_line 10 r "WARNING: x:expect has boolean @test"
    call :verify_line 15 r "WARNING: x:expect has boolean @test"
    call :verify_line 22 r "WARNING: x:expect has boolean @test"
    call :verify_line 31 x "Formatting Report..."
	</case>

	<case name="Deprecate x:space">
    call :run ..\bin\xspec.bat deprecated-space\test.xspec
    call :verify_retval 2
    call :verify_line  * x "x:space is deprecated. Use x:text instead."
    call :verify_line -1 x "*** Error compiling the test suite"
	</case>

	<case ifdef="XMLCALABASH_JAR" name="XSLT selecting nodes without context should be error (XProc) #423">
    call :run java -jar "%XMLCALABASH_JAR%" ^
        -i source=xspec-423/test.xspec ^
        -p xspec-home="file:///%PARENT_DIR_ABS:\=/%/" ^
        ..\src\harnesses\saxon\saxon-xslt-harness.xproc
    call :verify_retval 1
    call :verify_line -3 r "..*err:XPDY0002:"
    call :verify_line -1 r "ERROR:"
	</case>

	<case name="XSLT selecting nodes without context should be error (Ant) #423">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.xml="%CD%\..\test\xspec-423\test.xspec"
    call :verify_retval 2
    call :verify_line  * r "     \[java\]   XPDY0002:"
    call :verify_line -3 x "BUILD FAILED"
	</case>

	<case name="XSLT selecting nodes without context should be error (command line) #423">
    call :run ..\bin\xspec.bat xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="XSLT selecting nodes without context should be error (command line -c) #423">
    call :run ..\bin\xspec.bat -c xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error collecting test coverage data"
	</case>

	<case name="XQuery selecting nodes without context should be error #423">
    call :run ..\bin\xspec.bat -q xspec-423\test.xspec
    call :verify_retval 2
    call :verify_line  * r "  XPDY0002:"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="Invalid xquery-version should be error">
    call :run ..\bin\xspec.bat -q xquery-version\invalid.xspec
    call :verify_retval 2
    call :verify_line  * r ".*XQST0031..*InVaLiD"
    call :verify_line -1 x "*** Error running the test suite"
	</case>

	<case name="report-css-uri for HTML report file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.fail=false ^
        -Dxspec.result.html.css="%CD%\html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\escape-for-regex.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:..\tutorial\xspec\escape-for-regex-result.html ^
        -xsl:html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_line 1 x "true"
	</case>

	<case ifdef="XSLT_SUPPORTS_COVERAGE" name="report-css-uri for coverage report file">
    call :run ant ^
        -buildfile ..\build.xml ^
        -lib "%SAXON_JAR%" ^
        -Dxspec.coverage.enabled=true ^
        -Dxspec.coverage.html.css="%CD%\html-css.css" ^
        -Dxspec.xml="%CD%\..\tutorial\coverage\demo.xspec"
    call :verify_retval 0

    call :run java -jar "%SAXON_JAR%" ^
        -s:..\tutorial\coverage\xspec\demo-coverage.html ^
        -xsl:html-css.xsl ^
        STYLE-CONTAINS="This CSS file is for testing report-css-uri parameter"
    call :verify_line 1 x "true"
	</case>

	<case name="Error message when source is not XSpec #522">
    call :run ..\bin\xspec.bat do-nothing.xsl
    call :verify_retval 2
    call :verify_line 3 r "Source document is not XSpec"
	</case>
</collection>
