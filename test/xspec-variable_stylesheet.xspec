<?xml version="1.0" encoding="UTF-8"?>
<x:description
	xmlns:mirror="x-urn:test:mirror"
	xmlns:my="http://example.org/ns/my"
	xmlns:myv="http://example.org/ns/my/variable"
	xmlns:t="http://www.jenitennison.com/xslt/xspec"
	xmlns:x="http://www.jenitennison.com/xslt/xspec"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	stylesheet="mirror.xsl">
	<!-- Variables used only in this test file are in a dedicated namespace to prevent conflict with
	 global parameters or global variables in the file to be tested. -->

	<!-- Scenarios specific to XSLT -->

	<x:scenario label="Variables can appear in different parts of scenario.">
		<!-- For tests using function call scenarios, see xspec-variable.xspec. -->
		<x:scenario label="x:variable interspersed with x:context, x:call[@template], and x:expect">
			<x:variable name="myv:before_context" select="'before_context'"/>
			<x:context><mycontext role="{$myv:before_context}"/></x:context>
			<x:variable name="myv:after_context" select="'after_context'"/>
			<x:call template="mirror:context-mirror"/>
			<x:variable name="myv:after_call" select="'after_call'"/>
			<x:expect label="reflects expected behavior of named template for this context,">
				<mycontext role="before_context"/>
			</x:expect>
			<x:variable name="myv:after_expect" select="'after_expect'"/>
			<x:expect label="and expected value for each variable."
				test="($myv:before_context='before_context') and
				($myv:after_context='after_context') and
				($myv:after_call='after_call') and
				($myv:after_expect='after_expect')"
			/>
		</x:scenario>
		<x:scenario label="x:variable interspersed with x:context and x:expect">
			<x:variable name="myv:before_context" select="'before_context'"/>
			<x:context mode="mirror:context-mirror"><mycontext role="{$myv:before_context}"/></x:context>
			<x:variable name="myv:after_context" select="'after_context'"/>
			<x:expect label="reflects expected behavior of template rule for this context,">
				<mycontext role="before_context"/>
			</x:expect>
			<x:variable name="myv:after_expect" select="'after_expect'"/>
			<x:expect label="and expected value for each variable."
				test="($myv:before_context='before_context') and
				($myv:after_context='after_context') and
				($myv:after_expect='after_expect')"
			/>
		</x:scenario>
		<x:scenario label="x:variable interspersed with x:context[x:param] and x:expect">
			<x:variable name="myv:before_context" select="'before_context'"/>
			<x:context mode="mirror:param-mirror">
				<x:param name="param-items" select="$myv:before_context"/>
				<mycontext/>
			</x:context>
			<x:variable name="myv:after_context" select="'after_context'"/>
			<x:expect label="reflects expected behavior of template rule for this parameter,"
				select="'before_context'"/>
			<x:variable name="myv:after_expect" select="'after_expect'"/>
			<x:expect label="and expected value for each variable."
				test="($myv:before_context='before_context') and
				($myv:after_context='after_context') and
				($myv:after_expect='after_expect')"
			/>
		</x:scenario>
		<x:scenario label="x:variable used to store the context">
			<x:variable name="myv:context"><foo/></x:variable>
			<x:context select="$myv:context" mode="mirror:context-mirror" />
			<x:expect label="reflects expected behavior of template rule for this context."><foo/></x:expect>
		</x:scenario>
	</x:scenario>

</x:description>
