<?xml version="1.0" encoding="UTF-8"?>
<x:description query="x-urn:test:do-nothing" query-at="do-nothing.xqm" stylesheet="do-nothing.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!--
		The test target (../src/common/common-utils.xsl or common-utils.xqm) is included implicitly
		by the XSpec compiler. You don't need to specify it in /x:description/@stylesheet or
		@query-at.
	-->

	<x:scenario label="Scenario for testing variable xspec-namespace">
		<x:call function="false" />
		<x:expect label="xs:anyURI of XSpec namespace URI"
			select="doc($x:xspec-uri)/element() => namespace-uri()"
			test="$x:xspec-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable apos">
		<x:call function="false" />
		<x:expect label="xs:string of one apostrophe character" select="string()"
			test="$x:apos treat as xs:string">'</x:expect>
	</x:scenario>

	<x:scenario label="Scenario for testing function decimal-string">
		<x:call function="x:decimal-string" />

		<x:scenario label="xs:integer">
			<x:call>
				<x:param select="xs:integer(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (no decimal point)">
			<x:call>
				<x:param select="xs:decimal(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (with decimal point)">
			<x:call>
				<x:param select="xs:decimal(1.2)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.2'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function QName-expression">
		<x:call function="x:QName-expression" />

		<x:scenario label="With URI">
			<x:variable as="xs:string" name="ridiculous-uri" select="string()"
				>'">&lt;#,|%7D&#x20;%7B][$^</x:variable>

			<x:scenario label="With prefix">
				<x:call>
					<x:param select="QName($ridiculous-uri, 'prefix:foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()"
					>QName('''">&lt;#,|%7D&#x20;%7B][$^',&#x20;'prefix:foo')</x:expect>
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:call>
					<x:param select="QName($ridiculous-uri, 'foo')" />
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()"
					>QName('''">&lt;#,|%7D&#x20;%7B][$^',&#x20;'foo')</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="Without URI">
			<x:call>
				<x:param select="QName('', 'foo')" />
			</x:call>
			<x:expect label="Converted" select="string()">QName('',&#x20;'foo')</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function quote-with-apos">
		<x:call function="x:quote-with-apos" />

		<x:scenario label="One">
			<x:call>
				<x:param>foo'bar</x:param>
			</x:call>
			<x:expect label="Duplicated and quoted" select="string()">'foo''bar'</x:expect>
		</x:scenario>

		<x:scenario label="Three">
			<x:scenario label="Consecutive">
				<x:call>
					<x:param>foo'''bar</x:param>
				</x:call>
				<x:expect label="Duplicated and quoted" select="string()">'foo''''''bar'</x:expect>
			</x:scenario>

			<x:scenario label="Sparse">
				<x:call>
					<x:param>foo'bar'baz'qux</x:param>
				</x:call>
				<x:expect label="Duplicated and quoted" select="string()"
					>'foo''bar''baz''qux'</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="No apos">
			<x:call>
				<x:param> foo bar </x:param>
			</x:call>
			<x:expect label="Just quoted" select="string()">' foo bar '</x:expect>
		</x:scenario>

		<x:scenario label="Zero-length string">
			<x:call>
				<x:param select="''" />
			</x:call>
			<x:expect label="Just quoted" select="string()">''</x:expect>
		</x:scenario>
	</x:scenario>

</x:description>
