<?xml version="1.0" encoding="UTF-8"?>
<x:description stylesheet="do-nothing.xsl" xmlns:err="http://www.w3.org/2005/xqt-errors"
	xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!--
		The test target (../src/common/xspec-utils.xsl) is included
		implicitly by the XSpec compiler. You don't need to specify it in
		/x:description/@stylesheet.
	-->

	<x:scenario label="Scenario for testing variable legacy-namespace">
		<x:context />
		<x:expect label="'test' namespace URI"
			select="
				namespace-uri-for-prefix(
					'test',
					doc(resolve-uri('../src/compiler/generate-tests-utils.xsl', $x:xspec-uri))/element()
				)"
			test="$x:legacy-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable xspec-namespace">
		<x:context />
		<x:expect label="XSpec namespace URI"
			select="doc($x:xspec-uri)/element() => namespace-uri()"
			test="$x:xspec-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable xs-namespace">
		<x:context />
		<x:expect label="'xs' namespace URI"
			select="
				namespace-uri-for-prefix(
					'xs',
					doc(resolve-uri('../src/common/xspec-utils.xsl', $x:xspec-uri))/element()
				)"
			test="$x:xs-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable xsl-namespace">
		<x:context />
		<x:expect label="'xsl' namespace URI" select="doc('')/element() => namespace-uri()"
			test="$x:xsl-namespace treat as xs:anyURI" />
	</x:scenario>

	<x:scenario label="Scenario for testing variable capture-NCName">
		<x:context />
		<x:expect label="Captured" select="'bar'"
			test="
				replace(
					'foo:bar[baz]',
					'^.+:' || $x:capture-NCName || '.*$',
					'$1'
				)"
		 />
	</x:scenario>

	<x:scenario label="Scenario for testing variable saxon-version">
		<x:scenario label="Assume we test this on Saxon versions from 9.8 to 10.x">
			<x:context />
			<x:expect label="Greater than or equal to 9.8.0.0"
				test="($x:saxon-version treat as xs:integer) ge x:pack-version((9, 8))" />
			<x:expect label="Less than 11.0"
				test="($x:saxon-version treat as xs:integer) lt x:pack-version(11)" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing template identity">
		<x:context>
			<foo bar="baz">
				<?qux?>
				<!--quux-->
				<corge>grault</corge>
			</foo>
		</x:context>
		<x:call template="x:identity" />
		<x:expect label="Copied and default template rule applied">
			<foo>bazgrault</foo>
		</x:expect>
	</x:scenario>

	<x:scenario label="Scenario for testing function filename-and-extension">
		<x:scenario label="URI">
			<x:call function="x:filename-and-extension">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename with extension" select="'foo.bar.baz'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:filename-and-extension">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename with extension" select="'foo.bar.baz'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function filename-without-extension">
		<x:scenario label="URI">
			<x:call function="x:filename-without-extension">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo.bar'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo.bar'" />
		</x:scenario>

		<x:scenario label="No filename">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/.foo'" />
			</x:call>
			<x:expect label="zero-length string" select="''" />
		</x:scenario>

		<x:scenario label="No extension">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo'" />
		</x:scenario>

		<x:scenario label="Ends with dot">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo.'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function extension-without-filename">
		<x:scenario label="URI">
			<x:call function="x:extension-without-filename">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="extension without filename" select="'.baz'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="extension without filename" select="'.baz'" />
		</x:scenario>

		<x:scenario label="No filename">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/.foo'" />
			</x:call>
			<x:expect label="extension without filename" select="'.foo'" />
		</x:scenario>

		<x:scenario label="No extension">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo'" />
			</x:call>
			<x:expect label="zero-length string" select="''" />
		</x:scenario>

		<x:scenario label="Ends with dot">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo.'" />
			</x:call>
			<x:expect label="dot" select="'.'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function resolve-xml-uri-with-catalog">
		<!-- TODO: Use catalog -->
		<x:call function="x:resolve-xml-uri-with-catalog">
			<x:param select="''" />
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="Must work around https://issues.apache.org/jira/browse/XMLCOMMONS-24"
			test="
				$x:result
				=> substring-after(':')
				=> starts-with('/')" />
	</x:scenario>

	<x:scenario label="Scenario for testing function actual-document-uri">
		<!-- TODO: Use catalog -->
		<x:call function="x:actual-document-uri">
			<x:param select="doc('')" />
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="Must work around https://issues.apache.org/jira/browse/XMLCOMMONS-24"
			test="
				$x:result
				=> substring-after(':')
				=> starts-with('/')" />
	</x:scenario>

	<x:scenario label="Scenario for testing function base-uri">
		<!-- TODO: Use catalog -->
		<x:call function="x:base-uri">
			<x:param>
				<test />
			</x:param>
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="Must work around https://issues.apache.org/jira/browse/XMLCOMMONS-24"
			test="starts-with(substring-after($x:result, ':'), '/')" />
	</x:scenario>

	<x:scenario label="Scenario for testing function copy-of-namespaces">
		<x:call function="x:copy-of-namespaces">
			<x:param select="//*:input-element">
				<wrapper-element xmlns="wrapper-default-ns"
					xmlns:wrapper-prefix="wrapper-prefixed-ns">
					<input-element xmlns="default-ns" xmlns:prefix="prefixed-ns" />
				</wrapper-element>
			</x:param>
		</x:call>
		<x:expect label="Default namespace is copied" select="'default-ns'"
			test="$x:result[name() eq '']/string()" />
		<x:expect label="Prefixed namespace is copied" select="'prefixed-ns'"
			test="$x:result[name() eq 'prefix']/string()" />
		<x:expect label="Inherited prefixed namespace is copied" select="'wrapper-prefixed-ns'"
			test="$x:result[name() eq 'wrapper-prefix']/string()" />
		<x:expect label="'xml' namespace is not copied"
			test="
				$x:result[(name() eq 'xml') or (string() eq 'http://www.w3.org/XML/1998/namespace')]
				=> empty()"
		 />
	</x:scenario>

	<x:scenario label="Scenario for testing function is-user-content">

		<x:scenario label="function-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="//x:call[@function]/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec"
							select="//x:call[@function]/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:call[@function]/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="//x:call[@function]/x:param/attribute()"
						 />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="global-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="/x:description/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec"
							select="/x:description/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(/x:description/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(/x:description/x:param/attribute())[1]"
						 />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="global variable">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="/x:description/x:variable/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec"
							select="/x:description/x:variable/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(/x:description/x:variable)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec"
							select="(/x:description/x:variable/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="local variable">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="//x:scenario/x:variable/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec"
							select="//x:scenario/x:variable/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:scenario/x:variable)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:scenario/x:variable/attribute())[1]"
						 />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="assertion">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:expect/element())[1]" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="//x:expect/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:expect)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt.xspec" select="(//x:expect/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="context template-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec" select="//x:context/x:param/element()"
						 />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="//x:context/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec" select="(//x:context/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="(//x:context/x:param/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="context">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="//x:context[not(x:param)]/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="//x:context[not(x:param)]/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec" select="(//x:context[not(x:param)])[1]"
						 />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="(//x:context[not(x:param)]/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="template-call template-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="//x:call[@template]/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="//x:call[@template]/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="(//x:call[@template]/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="avt_stylesheet.xspec"
							select="(//x:call[@template]/x:param/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="label">
			<x:scenario label="scenario label">
				<x:scenario label="x:label element">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="//x:scenario/x:label" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="child text">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="(//x:scenario/x:label/text())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="assertion label">
				<x:scenario label="x:label element">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="//x:expect/x:label" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="child text">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="(//x:expect/x:label/text())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="like label">
				<x:scenario label="x:label element">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="//x:like/x:label" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="child text">
					<x:call function="x:is-user-content">
						<x:param href="end-to-end/cases/label-element.xspec"
							select="(//x:like/x:label/text())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

	</x:scenario>

	<x:scenario label="Scenario for testing function pack-version">
		<x:scenario label="Valid parameter">
			<x:scenario label="76.0.3809.132">
				<x:call function="x:pack-version">
					<x:param select="76, 0, 3809, 132" />
				</x:call>
				<x:expect label="0x004C00000EE10084" select="21392098479636612" />
			</x:scenario>

			<x:scenario label="1.2.3">
				<x:call function="x:pack-version">
					<x:param select="1, 2, 3" />
				</x:call>
				<x:expect label="0x0001000200030000" select="281483566841856" />
			</x:scenario>

			<x:scenario label="10.11">
				<x:call function="x:pack-version">
					<x:param select="10, 11" />
				</x:call>
				<x:expect label="0x000A000B00000000" select="2814797011746816" />
			</x:scenario>

			<x:scenario label="9">
				<x:call function="x:pack-version">
					<x:param select="9" />
				</x:call>
				<x:expect label="0x0009000000000000" select="2533274790395904" />
			</x:scenario>
		</x:scenario>

		<x:scenario catch="true" label="Invalid parameter">
			<x:scenario label="5 components">
				<x:call function="x:pack-version">
					<x:param select="1, 2, 3, 4, 5" />
				</x:call>
				<x:expect label="Error" select="xs:QName('err:XTTE0780')"
					test="$x:result?err?code treat as xs:QName" />
			</x:scenario>

			<x:scenario label="Greater than uint16">
				<x:call function="x:pack-version">
					<x:param select="65536" />
				</x:call>
				<x:expect label="Error" select="xs:QName('err:XTTE0780')"
					test="$x:result?err?code treat as xs:QName" />
			</x:scenario>

			<x:scenario label="Less than uint16">
				<x:call function="x:pack-version">
					<x:param select="-1" />
				</x:call>
				<x:expect label="Error" select="xs:QName('err:XTTE0780')"
					test="$x:result?err?code treat as xs:QName" />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function extract-version">
		<x:scenario label="Saxon 9">
			<x:scenario label="Typical xsl:product-version">
				<x:call function="x:extract-version">
					<x:param select="'HE 9.9.1.5'" />
				</x:call>
				<x:expect label="Extracted" select="9, 9, 1, 5" />
			</x:scenario>

			<x:scenario label="java -cp saxon.jar net.sf.saxon.Version">
				<x:call function="x:extract-version">
					<x:param select="'SAXON-HE 9.9.1.5J from Saxonica (build 090514)'" />
				</x:call>
				<x:expect label="Extracted, stripping platform suffix ('J')" select="9, 9, 1, 5" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Saxon 10">
			<!--
				https://sourceforge.net/p/saxon/mailman/message/36949659/
				> In future we intend to use two-part version numbers rather than four-part:
				> the next major release will be 11.0, the next maintenance release 10.1.
			-->

			<x:scenario label="Typical xsl:product-version">
				<x:scenario label="10.0">
					<x:call function="x:extract-version">
						<x:param select="'HE 10.0'" />
					</x:call>
					<x:expect label="Extracted as major.minor.0.0" select="10, 0, 0, 0" />
				</x:scenario>

				<x:scenario label="10.1">
					<x:call function="x:extract-version">
						<x:param select="'HE 10.1'" />
					</x:call>
					<x:expect label="Extracted as major.minor.0.0" select="10, 1, 0, 0" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="java -cp saxon.jar net.sf.saxon.Version">
				<x:call function="x:extract-version">
					<x:param select="'SAXON-HE 10.0J from Saxonica (build 31609)'" />
				</x:call>
				<x:expect label="Extracted, stripping platform suffix ('J')" select="10, 0, 0, 0" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Relatively large version">
			<x:call function="x:extract-version">
				<x:param select="'76.0.3809.132'" />
			</x:call>
			<x:expect label="Extracted" select="76, 0, 3809, 132" />
		</x:scenario>

		<x:scenario label="No #.#.#.#">
			<x:call function="x:extract-version">
				<x:param select="'１.２.３.４'" />
			</x:call>
			<x:expect label="Empty sequence" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function yes-no-synonym#1">
		<x:scenario label="Valid strings">
			<x:scenario label="Base (yes or no)">
				<x:scenario label="'yes'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'yes'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'no'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'no'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="Synonym (true or false)">
				<x:scenario label="'true'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'true'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'false'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'false'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="Synonym (1 or 0)">
				<x:scenario label="'1'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'1'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'0'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'0'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function yes-no-synonym#2">
		<x:scenario label="Input true">
			<x:scenario label="Default true">
				<x:call function="x:yes-no-synonym">
					<x:param select="'true'" />
					<x:param select="true()" />
				</x:call>
				<x:expect label="True" select="true()" />
			</x:scenario>

			<x:scenario label="Default false">
				<x:call function="x:yes-no-synonym">
					<x:param select="'true'" />
					<x:param select="false()" />
				</x:call>
				<x:expect label="True" select="true()" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Input false">
			<x:scenario label="Default true">
				<x:call function="x:yes-no-synonym">
					<x:param select="'false'" />
					<x:param select="true()" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>

			<x:scenario label="Default false">
				<x:call function="x:yes-no-synonym">
					<x:param select="'false'" />
					<x:param select="false()" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Input empty">
			<x:scenario label="Default true">
				<x:call function="x:yes-no-synonym">
					<x:param select="()" />
					<x:param select="true()" />
				</x:call>
				<x:expect label="True" select="true()" />
			</x:scenario>

			<x:scenario label="Default false">
				<x:call function="x:yes-no-synonym">
					<x:param select="()" />
					<x:param select="false()" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>
		</x:scenario>

		<x:scenario catch="true" label="Unexpected input">
			<x:scenario label="Zero-length string">
				<x:call function="x:yes-no-synonym">
					<x:param select="''" />
					<x:param select="true()" />
				</x:call>
				<x:expect label="Error without falling back on the default value"
					select="xs:QName('err:XTTE0780')" test="$x:result?err?code treat as xs:QName" />
			</x:scenario>

			<x:scenario label="Bogus">
				<x:call function="x:yes-no-synonym">
					<x:param select="'bogus'" />
					<x:param select="true()" />
				</x:call>
				<x:expect label="Error without falling back on the default value"
					select="xs:QName('err:XTTE0780')" test="$x:result?err?code treat as xs:QName" />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function format-uri">
		<x:scenario label="file: (%20 should be unescaped)">
			<x:scenario label="Windows">
				<x:scenario label="Drive">
					<x:scenario label="Win32 (file:///C:/)">
						<x:scenario label="Upper-case drive letter">
							<x:call function="x:format-uri">
								<x:param select="'file:///C:/dir/file%20name.ext'" />
							</x:call>
							<x:expect label="Discard everything before drive letter"
								select="'C:/dir/file name.ext'" />
						</x:scenario>

						<x:scenario label="Lower-case drive letter">
							<x:call function="x:format-uri">
								<x:param select="'file:///c:/dir/file%20name.ext'" />
							</x:call>
							<x:expect label="Discard everything before drive letter"
								select="'c:/dir/file name.ext'" />
						</x:scenario>
					</x:scenario>

					<x:scenario label="Java (file:/C:/)">
						<x:scenario label="Upper-case drive letter">
							<x:call function="x:format-uri">
								<x:param select="'file:/C:/dir/file%20name.ext'" />
							</x:call>
							<x:expect label="Discard everything before drive letter"
								select="'C:/dir/file name.ext'" />
						</x:scenario>

						<x:scenario label="Lower-case drive letter">
							<x:call function="x:format-uri">
								<x:param select="'file:/c:/dir/file%20name.ext'" />
							</x:call>
							<x:expect label="Discard everything before drive letter"
								select="'c:/dir/file name.ext'" />
						</x:scenario>
					</x:scenario>
				</x:scenario>

				<x:scenario label="UNC">
					<x:scenario label="Win32 (file://host/)">
						<x:call function="x:format-uri">
							<x:param select="'file://host/share/dir/file%20name.ext'" />
						</x:call>
						<x:expect label="Discard file:" select="'//host/share/dir/file name.ext'" />
					</x:scenario>

					<x:scenario label="Java (file:////host/)">
						<x:call function="x:format-uri">
							<x:param select="'file:////host/share/dir/file%20name.ext'" />
						</x:call>
						<x:expect label="Discard file://" select="'//host/share/dir/file name.ext'"
						 />
					</x:scenario>
				</x:scenario>
			</x:scenario>

			<x:scenario label="*nix">
				<x:scenario label="One slash">
					<x:call function="x:format-uri">
						<x:param select="'file:/dir/file%20name.ext'" />
					</x:call>
					<x:expect label="Discard file:" select="'/dir/file name.ext'" />
				</x:scenario>

				<x:scenario label="Two slashes">
					<x:call function="x:format-uri">
						<x:param select="'file://host/dir/file%20name.ext'" />
					</x:call>
					<x:expect label="Discard file:" select="'//host/dir/file name.ext'" />
				</x:scenario>

				<x:scenario label="Three slashes">
					<x:call function="x:format-uri">
						<x:param select="'file:///dir/file%20name.ext'" />
					</x:call>
					<x:expect label="Discard file://" select="'/dir/file name.ext'" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="Non file: (Everything including %20 should be intact)">
			<x:call function="x:format-uri">
				<x:param select="'http://www.example.com/dir/file%20name.ext'" />
			</x:call>
			<x:expect label="Intact" select="'http://www.example.com/dir/file%20name.ext'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function parse-preserve-space">
		<x:call function="x:parse-preserve-space">
			<x:param href="xspec-utils/parse-preserve-space.xspec" select="x:description" />
		</x:call>
		<x:expect label="2 items" select="2" test="count($x:result)" />
		<x:expect label="1st QName"
			test="
				x:QName-exactly-equal(
					$x:result[1],
					QName('http://www.jenitennison.com/xslt/xspec', 'element-without-prefix')
				)" />
		<x:expect label="2nd QName"
			test="
				x:QName-exactly-equal(
					$x:result[2],
					QName('x-urn:test:preserve-space:prefix', 'prefix:element-with-prefix')
				)"
		 />
	</x:scenario>

	<x:scenario label="Scenario for testing function is-ws-only-text-node-significant">
		<x:scenario label="xml:space">
			<x:scenario label="override default with preserve">
				<x:scenario label="specified by parent">
					<x:call function="x:is-ws-only-text-node-significant">
						<x:param select="//text()">
							<great-grandparent>
								<grandparent xml:space="default">
									<parent xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;</parent>
								</grandparent>
							</great-grandparent>
						</x:param>
						<x:param />
					</x:call>
					<x:expect label="true" select="true()" />
				</x:scenario>

				<x:scenario label="specified by grandparent">
					<x:call function="x:is-ws-only-text-node-significant">
						<x:param select="//text()">
							<great-grandparent xml:space="default">
								<grandparent xml:space="preserve"><parent>&#x09;&#x0A;&#x0D;&#x20;</parent></grandparent>
							</great-grandparent>
						</x:param>
						<x:param />
					</x:call>
					<x:expect label="true" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="override preserve with default">
				<x:scenario label="specified by parent">
					<x:call function="x:is-ws-only-text-node-significant">
						<x:param select="//text()">
							<great-grandparent>
								<grandparent xml:space="preserve"><parent xml:space="default">
										<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
									</parent></grandparent>
							</great-grandparent>
						</x:param>
						<x:param />
					</x:call>
					<x:expect label="false" select="false()" />
				</x:scenario>

				<x:scenario label="specified by grandparent">
					<x:call function="x:is-ws-only-text-node-significant">
						<x:param select="//text()">
							<great-grandparent xml:space="preserve"><grandparent xml:space="default">
									<parent>
										<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
									</parent>
								</grandparent></great-grandparent>
						</x:param>
						<x:param />
					</x:call>
					<x:expect label="false" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<!-- The other cases are tested indirectly by ws-only-text.xspec -->
	</x:scenario>

	<x:scenario label="Scenario for testing function xslt-version">
		<x:scenario label="default">
			<x:call function="x:xslt-version">
				<x:param as="element(context)" select="//context">
					<test>
						<grandparent>
							<parent>
								<context>
									<child xslt-version="0" />
								</context>
							</parent>
						</grandparent>
					</test>
				</x:param>
			</x:call>
			<x:expect label="3.0" select="3.0" />
		</x:scenario>

		<x:scenario label="defined in self">
			<x:call function="x:xslt-version">
				<x:param as="element(context)" select="//context">
					<test>
						<grandparent>
							<parent>
								<context xslt-version="999">
									<child xslt-version="0" />
								</context>
							</parent>
						</grandparent>
					</test>
				</x:param>
			</x:call>
			<x:expect label="take it" select="999.0" />
		</x:scenario>

		<x:scenario label="defined in parent">
			<x:call function="x:xslt-version">
				<x:param as="element(context)" select="//context">
					<test>
						<grandparent>
							<parent xslt-version="999">
								<context>
									<child xslt-version="0" />
								</context>
							</parent>
						</grandparent>
					</test>
				</x:param>
			</x:call>
			<x:expect label="take it" select="999.0" />
		</x:scenario>

		<x:scenario label="defined in grandparent">
			<x:call function="x:xslt-version">
				<x:param as="element(context)" select="//context">
					<test>
						<grandparent xslt-version="999">
							<parent>
								<context>
									<child xslt-version="0" />
								</context>
							</parent>
						</grandparent>
					</test>
				</x:param>
			</x:call>
			<x:expect label="take it" select="999.0" />
		</x:scenario>

		<x:scenario label="override">
			<x:call function="x:xslt-version">
				<x:param as="element(context)" select="//context">
					<test>
						<grandparent xslt-version="9999">
							<parent xslt-version="999">
								<context xslt-version="99">
									<child xslt-version="0" />
								</context>
							</parent>
						</grandparent>
					</test>
				</x:param>
			</x:call>
			<x:expect label="take the nearest ancestor-or-self" select="99.0" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function locate-schematron-uri">
		<!-- TODO: Use catalog -->
		<x:call function="x:locate-schematron-uri">
			<x:param href="../tutorial/schematron/demo-01.xspec" select="x:description" />
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="filename and extension" select="'demo-01.sch'"
			test="x:filename-and-extension($x:result)" />
		<x:expect label="reachable" test="doc-available($x:result)" />
	</x:scenario>

	<x:scenario label="Scenario for testing function left-trim">
		<x:call function="x:left-trim">
			<x:param
				select="'&#x09;&#x0A;&#x0D;&#x20;foo&#x09;&#x0A;&#x0D;&#x20;bar&#x09;&#x0A;&#x0D;&#x20;'"
			 />
		</x:call>
		<x:expect label="Leading trimmed. In-between and trailing intact."
			select="'foo&#x09;&#x0A;&#x0D;&#x20;bar&#x09;&#x0A;&#x0D;&#x20;'" />
	</x:scenario>

	<x:scenario label="Scenario for testing function right-trim">
		<x:call function="x:right-trim">
			<x:param
				select="'&#x09;&#x0A;&#x0D;&#x20;foo&#x09;&#x0A;&#x0D;&#x20;bar&#x09;&#x0A;&#x0D;&#x20;'"
			 />
		</x:call>
		<x:expect label="Trailing trimmed. Leading and in-between intact."
			select="'&#x09;&#x0A;&#x0D;&#x20;foo&#x09;&#x0A;&#x0D;&#x20;bar'" />
	</x:scenario>

	<x:scenario label="Scenario for testing function trim">
		<x:call function="x:trim">
			<x:param
				select="'&#x09;&#x0A;&#x0D;&#x20;foo&#x09;&#x0A;&#x0D;&#x20;bar&#x09;&#x0A;&#x0D;&#x20;'"
			 />
		</x:call>
		<x:expect label="Leading and trailing trimmed. In-between intact."
			select="'foo&#x09;&#x0A;&#x0D;&#x20;bar'" />
	</x:scenario>

	<x:scenario label="Scenario for testing function resolve-UQName">
		<x:scenario label="With URI">
			<x:variable as="xs:anyURI" name="ridiculous-uri">'">&lt;#,|%7D&#x20;%7B][$^</x:variable>
			<x:call function="x:resolve-UQName">
				<x:param select="x:UQName($ridiculous-uri, 'foo')" />
			</x:call>
			<x:expect label="Resolved"
				test="x:QName-exactly-equal($x:result, QName($ridiculous-uri, 'foo'))" />
		</x:scenario>

		<x:scenario label="Without URI">
			<x:call function="x:resolve-UQName">
				<x:param select="'Q{}foo'" />
			</x:call>
			<x:expect label="Resolved as no namespace"
				test="x:QName-exactly-equal($x:result, QName('', 'foo'))" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function resolve-EQName-ignoring-default-ns">
		<x:scenario label="URIQualifiedName">
			<x:scenario label="With URI">
				<x:variable as="xs:anyURI" name="ridiculous-uri"
					>'">&lt;#,|%7D&#x20;%7B][$^</x:variable>
				<x:call function="x:resolve-EQName-ignoring-default-ns">
					<x:param select="x:UQName($ridiculous-uri, 'foo')" />
					<x:param>
						<e xmlns="default-ns" />
					</x:param>
				</x:call>
				<x:expect label="Resolved without being affected by the default namespace"
					test="x:QName-exactly-equal($x:result, QName($ridiculous-uri, 'foo'))" />
			</x:scenario>

			<x:scenario label="Without URI">
				<x:call function="x:resolve-EQName-ignoring-default-ns">
					<x:param select="'Q{}foo'" />
					<x:param>
						<e xmlns="default-ns" />
					</x:param>
				</x:call>
				<x:expect
					label="Resolved as no namespace without being affected by the default namespace"
					test="x:QName-exactly-equal($x:result, QName('', 'foo'))" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Lexical QName">
			<x:scenario label="With prefix">
				<x:call function="x:resolve-EQName-ignoring-default-ns">
					<x:param select="'prefix:foo'" />
					<x:param>
						<e xmlns:prefix="prefixed-ns" />
					</x:param>
				</x:call>
				<x:expect label="Resolved"
					test="x:QName-exactly-equal($x:result, QName('prefixed-ns', 'prefix:foo'))" />
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:scenario label="With default namespace">
					<x:call function="x:resolve-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="default-ns" />
						</x:param>
					</x:call>
					<x:expect label="Resolved without using the default namespace"
						test="x:QName-exactly-equal($x:result, QName('', 'foo'))" />
				</x:scenario>

				<x:scenario label="Without default namespace">
					<x:call function="x:resolve-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="" />
						</x:param>
					</x:call>
					<x:expect label="Resolved"
						test="x:QName-exactly-equal($x:result, QName('', 'foo'))" />
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function QName-exactly-equal">
		<x:scenario label="Both have URI">
			<x:scenario label="Both have prefix">
				<x:scenario label="Exactly equal">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'prefix:local')" />
						<x:param select="QName('uri', 'prefix:local')" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="Different URI">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'prefix:local')" />
						<x:param select="QName('uri2', 'prefix:local')" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="Different prefix">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'prefix:local')" />
						<x:param select="QName('uri', 'prefix2:local')" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="Different local">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'prefix:local')" />
						<x:param select="QName('uri', 'prefix:local2')" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="One has prefix, the other lacks prefix">
				<x:call function="x:QName-exactly-equal">
					<x:param select="QName('uri', 'prefix:local')" />
					<x:param select="QName('uri', 'local')" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>

			<x:scenario label="Both lack prefix">
				<x:scenario label="Exactly equal">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'local')" />
						<x:param select="QName('uri', 'local')" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="Different URI">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'local')" />
						<x:param select="QName('uri2', 'local')" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="Different local">
					<x:call function="x:QName-exactly-equal">
						<x:param select="QName('uri', 'local')" />
						<x:param select="QName('uri', 'local2')" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="One has URI, the other lacks URI">
			<x:scenario label="One has prefix, the other lacks prefix">
				<x:call function="x:QName-exactly-equal">
					<x:param select="QName('uri', 'prefix:local')" />
					<x:param select="QName('', 'local')" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>

			<x:scenario label="Both lack prefix">
				<x:call function="x:QName-exactly-equal">
					<x:param select="QName('uri', 'local')" />
					<x:param select="QName('', 'local')" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Both lack URI">
			<x:scenario label="Exactly equal">
				<x:call function="x:QName-exactly-equal">
					<x:param select="QName('', 'local')" />
					<x:param select="QName('', 'local')" />
				</x:call>
				<x:expect label="True" select="true()" />
			</x:scenario>

			<x:scenario label="Different local">
				<x:call function="x:QName-exactly-equal">
					<x:param select="QName('', 'local')" />
					<x:param select="QName('', 'local2')" />
				</x:call>
				<x:expect label="False" select="false()" />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario
		label="Scenario for testing function QName-expression-from-EQName-ignoring-default-ns">
		<x:scenario label="URIQualifiedName">
			<x:scenario label="With URI">
				<x:call function="x:QName-expression-from-EQName-ignoring-default-ns">
					<x:param>Q{'">&lt;#,|%7D&#x20;%7B][$^}foo</x:param>
					<x:param>
						<e />
					</x:param>
				</x:call>
				<x:expect label="Converted with apostrophe escaped" select="string()"
					>QName('''">&lt;#,|%7D&#x20;%7B][$^',&#x20;'foo')</x:expect>
			</x:scenario>

			<x:scenario label="Without URI">
				<x:call function="x:QName-expression-from-EQName-ignoring-default-ns">
					<x:param select="'Q{}foo'" />
					<x:param>
						<e xmlns="default-ns" />
					</x:param>
				</x:call>
				<x:expect label="Converted without being affected by the default namespace"
					select="string()">QName('',&#x20;'foo')</x:expect>
			</x:scenario>
		</x:scenario>

		<x:scenario label="Lexical QName">
			<x:scenario label="With prefix">
				<x:call function="x:QName-expression-from-EQName-ignoring-default-ns">
					<x:param select="'prefix:foo'" />
					<x:param>
						<e xmlns:prefix="prefixed-ns" />
					</x:param>
				</x:call>
				<x:expect label="Converted" select="string()"
					>QName('prefixed-ns',&#x20;'prefix:foo')</x:expect>
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:scenario label="With default namespace">
					<x:call function="x:QName-expression-from-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="default-ns" />
						</x:param>
					</x:call>
					<x:expect label="Converted without using the default namespace"
						select="string()">QName('',&#x20;'foo')</x:expect>
				</x:scenario>

				<x:scenario label="Without default namespace">
					<x:call function="x:QName-expression-from-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="" />
						</x:param>
					</x:call>
					<x:expect label="Converted" select="string()">QName('',&#x20;'foo')</x:expect>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function UQName">
		<x:scenario label="URI length ge 1">
			<x:call function="x:UQName">
				<x:param select="'my-uri'" />
				<x:param select="'my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()">Q{my-uri}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="URI is zero-length string">
			<x:call function="x:UQName">
				<x:param select="''" />
				<x:param select="'my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()">Q{}my-local-name</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function known-UQName">
		<x:scenario label="err">
			<x:call function="x:known-UQName">
				<x:param select="'err:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.w3.org/2005/xqt-errors}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="impl">
			<x:call function="x:known-UQName">
				<x:param select="'impl:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{urn:x-xspec:compile:impl}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="map">
			<x:call function="x:known-UQName">
				<x:param select="'map:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.w3.org/2005/xpath-functions/map}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="output">
			<x:call function="x:known-UQName">
				<x:param select="'output:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.w3.org/2010/xslt-xquery-serialization}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="svrl">
			<x:call function="x:known-UQName">
				<x:param select="'svrl:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://purl.oclc.org/dsdl/svrl}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="test">
			<x:call function="x:known-UQName">
				<x:param select="'test:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.jenitennison.com/xslt/unit-test}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="x">
			<x:call function="x:known-UQName">
				<x:param select="'x:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.jenitennison.com/xslt/xspec}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="xs">
			<x:call function="x:known-UQName">
				<x:param select="'xs:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.w3.org/2001/XMLSchema}my-local-name</x:expect>
		</x:scenario>

		<x:scenario label="xsl">
			<x:call function="x:known-UQName">
				<x:param select="'xsl:my-local-name'" />
			</x:call>
			<x:expect label="Constructed" select="string()"
				>Q{http://www.w3.org/1999/XSL/Transform}my-local-name</x:expect>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function variable-UQName"
		xmlns:my-element-prefix="my-element-namespace">
		<x:scenario label="With @name">
			<x:call function="x:variable-UQName">
				<x:param>
					<my-element-prefix:my-element name="my-name-prefix:my-name"
						xmlns:my-name-prefix="my-name-namespace" />
				</x:param>
			</x:call>
			<x:expect label="URIQualifiedName with namespace and local name specified in @name"
				select="string()">Q{my-name-namespace}my-name</x:expect>
		</x:scenario>

		<x:scenario label="Without @name">
			<x:call function="x:variable-UQName">
				<x:param>
					<my-element-prefix:my-element />
				</x:param>
			</x:call>
			<x:expect label="URIQualifiedName with predefined namespace and dynamic ID"
				test="matches($x:result, '^Q\{urn:x-xspec:compile:impl\}my-element-\S+$')" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function UQName-from-EQName-ignoring-default-ns">
		<x:scenario label="URIQualifiedName">
			<x:scenario label="With URI">
				<x:variable as="xs:anyURI" name="ridiculous-uri"
					>'">&lt;#,|%7D&#x20;%7B][$^</x:variable>
				<x:variable as="xs:string" name="uqname" select="x:UQName($ridiculous-uri, 'foo')" />
				<x:call function="x:UQName-from-EQName-ignoring-default-ns">
					<x:param select="$uqname" />
					<x:param>
						<e xmlns="default-ns" />
					</x:param>
				</x:call>
				<x:expect label="Intact" select="$uqname" />
			</x:scenario>

			<x:scenario label="Without URI">
				<x:variable as="xs:string" name="uqname">Q{}foo</x:variable>
				<x:call function="x:UQName-from-EQName-ignoring-default-ns">
					<x:param select="$uqname" />
					<x:param>
						<e xmlns="default-ns" />
					</x:param>
				</x:call>
				<x:expect label="Intact" select="$uqname" />
			</x:scenario>
		</x:scenario>

		<x:scenario label="Lexical QName">
			<x:scenario label="With prefix">
				<x:call function="x:UQName-from-EQName-ignoring-default-ns">
					<x:param select="'prefix:foo'" />
					<x:param>
						<e xmlns:prefix="prefixed-ns" />
					</x:param>
				</x:call>
				<x:expect label="Resolved with prefix" select="string()"
					>Q{prefixed-ns}foo</x:expect>
			</x:scenario>

			<x:scenario label="Without prefix">
				<x:scenario label="With default namespace">
					<x:call function="x:UQName-from-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="default-ns" />
						</x:param>
					</x:call>
					<x:expect label="Resolved without using the default namespace" select="string()"
						>Q{}foo</x:expect>
				</x:scenario>

				<x:scenario label="Without default namespace">
					<x:call function="x:UQName-from-EQName-ignoring-default-ns">
						<x:param select="'foo'" />
						<x:param>
							<e xmlns="" />
						</x:param>
					</x:call>
					<x:expect label="Resolved as no prefix" select="string()">Q{}foo</x:expect>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function element-additional-namespace-nodes">
		<x:scenario label="Element has a prefix">
			<x:call function="x:element-additional-namespace-nodes">
				<x:param>
					<prefix1:e xmlns="default-ns" xmlns:prefix1="ns1" xmlns:prefix2="ns2" />
				</x:param>
			</x:call>
			<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
			<x:expect label="xml" test="$x:result[name() eq 'xml'] => empty()" />
			<x:expect label="Default" test="$x:result[name() eq ''][. eq 'default-ns'] => exists()" />
			<x:expect label="prefix1" test="$x:result[name() eq 'prefix1'] => empty()" />
			<x:expect label="prefix2" test="$x:result[name() eq 'prefix2'][. eq 'ns2'] => exists()"
			 />
		</x:scenario>

		<x:scenario label="Element does not have a prefix">
			<x:call function="x:element-additional-namespace-nodes">
				<x:param>
					<e xmlns="default-ns" xmlns:prefix1="ns1" xmlns:prefix2="ns2" />
				</x:param>
			</x:call>
			<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
			<x:expect label="xml" test="$x:result[name() eq 'xml'] => empty()" />
			<x:expect label="Default" test="$x:result[name() eq ''] => empty()" />
			<x:expect label="prefix1" test="$x:result[name() eq 'prefix1'][. eq 'ns1'] => exists()" />
			<x:expect label="prefix2" test="$x:result[name() eq 'prefix2'][. eq 'ns2'] => exists()"
			 />
		</x:scenario>

		<x:scenario label="Element namespace is undeclared">
			<x:call function="x:element-additional-namespace-nodes">
				<x:param>
					<e xmlns="" xmlns:prefix1="ns1" xmlns:prefix2="ns2" />
				</x:param>
			</x:call>
			<x:expect label="Namespace nodes" test="$x:result instance of namespace-node()+" />
			<x:expect label="xml" test="$x:result[name() eq 'xml'] => empty()" />
			<x:expect label="Default" test="$x:result[name() eq ''] => empty()" />
			<x:expect label="prefix1" test="$x:result[name() eq 'prefix1'][. eq 'ns1'] => exists()" />
			<x:expect label="prefix2" test="$x:result[name() eq 'prefix2'][. eq 'ns2'] => exists()"
			 />
		</x:scenario>
	</x:scenario>

</x:description>
