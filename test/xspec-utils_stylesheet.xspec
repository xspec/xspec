<?xml version="1.0" encoding="UTF-8"?>
<x:description stylesheet="items.xsl" xmlns:items="x-urn:test:xspec-items"
	xmlns:x="http://www.jenitennison.com/xslt/xspec">

	<!--
		The test target (../src/common/xspec-utils.xsl) is included
		implicitly by the XSpec compiler. You don't need to specify it in
		/x:description/@stylesheet.
	-->

	<x:scenario label="Scenario for testing template identity">
		<x:context>
			<foo bar="baz">
				<?qux?>
				<!--quux-->
				<corge>grault</corge>
			</foo>
		</x:context>
		<x:call template="x:identity" />
		<x:expect label="Copied and default template rule applied">
			<foo>bazgrault</foo>
		</x:expect>
	</x:scenario>

	<x:scenario label="Scenario for testing function filename-and-extension">
		<x:scenario label="URI">
			<x:call function="x:filename-and-extension">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename with extension" select="'foo.bar.baz'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:filename-and-extension">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename with extension" select="'foo.bar.baz'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function filename-without-extension">
		<x:scenario label="URI">
			<x:call function="x:filename-without-extension">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo.bar'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo.bar'" />
		</x:scenario>

		<x:scenario label="No filename">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/.foo'" />
			</x:call>
			<x:expect label="zero-length string" select="''" />
		</x:scenario>

		<x:scenario label="No extension">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo'" />
		</x:scenario>

		<x:scenario label="Ends with dot">
			<x:call function="x:filename-without-extension">
				<x:param select="'/path/to/foo.'" />
			</x:call>
			<x:expect label="filename without extension" select="'foo'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function extension-without-filename">
		<x:scenario label="URI">
			<x:call function="x:extension-without-filename">
				<x:param select="'file:/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="extension without filename" select="'.baz'" />
		</x:scenario>

		<x:scenario label="*nix file path">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo.bar.baz'" />
			</x:call>
			<x:expect label="extension without filename" select="'.baz'" />
		</x:scenario>

		<x:scenario label="No filename">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/.foo'" />
			</x:call>
			<x:expect label="extension without filename" select="'.foo'" />
		</x:scenario>

		<x:scenario label="No extension">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo'" />
			</x:call>
			<x:expect label="zero-length string" select="''" />
		</x:scenario>

		<x:scenario label="Ends with dot">
			<x:call function="x:extension-without-filename">
				<x:param select="'/path/to/foo.'" />
			</x:call>
			<x:expect label="dot" select="'.'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function resolve-xml-uri-with-catalog">
		<!-- TODO: Use catalog -->
		<x:call function="x:resolve-xml-uri-with-catalog">
			<x:param select="''" />
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="Must work around https://issues.apache.org/jira/browse/XMLCOMMONS-24"
			test="starts-with(substring-after($x:result, ':'), '/')" />
	</x:scenario>

	<x:scenario label="Scenario for testing function base-uri">
		<!-- TODO: Use catalog -->
		<x:call function="x:base-uri">
			<x:param>
				<test />
			</x:param>
		</x:call>
		<x:expect label="'file' scheme" select="'file'" test="substring-before($x:result, ':')" />
		<x:expect label="Must work around https://issues.apache.org/jira/browse/XMLCOMMONS-24"
			test="starts-with(substring-after($x:result, ':'), '/')" />
	</x:scenario>

	<x:scenario label="Scenario for testing function copy-namespaces">
		<x:call function="x:copy-namespaces">
			<x:param select="//*:input-element">
				<wrapper-element xmlns="wrapper-default-ns"
					xmlns:wrapper-prefix="wrapper-prefixed-ns">
					<input-element xmlns="default-ns" xmlns:prefix="prefixed-ns" />
				</wrapper-element>
			</x:param>
		</x:call>
		<x:expect label="Default namespace is copied" select="'default-ns'"
			test="$x:result[name() eq '']/string()" />
		<x:expect label="Prefixed namespace is copied" select="'prefixed-ns'"
			test="$x:result[name() eq 'prefix']/string()" />
		<x:expect label="Inherited prefixed namespace is copied" select="'wrapper-prefixed-ns'"
			test="$x:result[name() eq 'wrapper-prefix']/string()" />
	</x:scenario>

	<x:scenario label="Scenario for testing function is-user-content">

		<x:scenario label="function-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="//x:call[@function]/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="//x:call[@function]/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(//x:call[@function]/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="//x:call[@function]/x:param/attribute()" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="global-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="/x:description/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="/x:description/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(/x:description/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="(/x:description/x:param/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="global variable">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="/x:description/x:variable/element()"
						 />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="/x:description/x:variable/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(/x:description/x:variable)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="(/x:description/x:variable/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="local variable">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="//x:scenario/x:variable/element()"
						 />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="//x:scenario/x:variable/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(//x:scenario/x:variable)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec"
							select="(//x:scenario/x:variable/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="assertion">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(//x:expect/element())[1]" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="//x:expect/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(//x:expect)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt.xspec" select="(//x:expect/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="context template-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:context/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:context/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec" select="(//x:context/x:param)[1]"
						 />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="(//x:context/x:param/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="context">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:context[not(x:param)]/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:context[not(x:param)]/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="(//x:context[not(x:param)])[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="(//x:context[not(x:param)]/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

		<x:scenario label="template-call template-param">
			<x:scenario label="user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:call[@template]/x:param/element()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="//x:call[@template]/x:param/element()/attribute()" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="not user-content">
				<x:scenario label="element">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="(//x:call[@template]/x:param)[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>

				<x:scenario label="attribute">
					<x:call function="x:is-user-content">
						<x:param href="xspec-avt_stylesheet.xspec"
							select="(//x:call[@template]/x:param/attribute())[1]" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>

	</x:scenario>

	<x:scenario label="Scenario for testing function pack-version">
		<x:scenario label="76.0.3809.132">
			<x:call function="x:pack-version">
				<x:param select="76" />
				<x:param select="0" />
				<x:param select="3809" />
				<x:param select="132" />
			</x:call>
			<x:expect label="0x004C00000EE10084" select="21392098479636612" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function extract-version">
		<x:scenario label="Saxon typical xsl:product-version">
			<x:call function="x:extract-version">
				<x:param select="'HE 9.9.1.5'" />
			</x:call>
			<x:expect label="Extracted" select="9, 9, 1, 5" />
		</x:scenario>

		<x:scenario label="Saxon likely v10 xsl:product-version">
			<x:call function="x:extract-version">
				<!-- This string is just a guesswork -->
				<x:param select="'HE 10.0.0.1'" />
			</x:call>
			<x:expect label="Extracted" select="10, 0, 0, 1" />
		</x:scenario>

		<x:scenario label="Saxon unlicensed xsl:product-version">
			<x:call function="x:extract-version">
				<x:param select="'EE (unlicensed) 9.4.0.9'" />
			</x:call>
			<x:expect label="Extracted" select="9, 4, 0, 9" />
		</x:scenario>

		<x:scenario label="java -cp saxon.jar net.sf.saxon.Version">
			<x:call function="x:extract-version">
				<x:param select="'SAXON-HE 9.9.1.5J from Saxonica (build 090514)'" />
			</x:call>
			<x:expect label="Extracted, stripping platform suffix ('J')" select="9, 9, 1, 5" />
		</x:scenario>

		<x:scenario label="Relatively large version">
			<x:call function="x:extract-version">
				<x:param select="'76.0.3809.132'" />
			</x:call>
			<x:expect label="Extracted" select="76, 0, 3809, 132" />
		</x:scenario>

		<x:scenario label="No #.#.#.#">
			<x:call function="x:extract-version">
				<x:param select="'１.２.３.４'" />
			</x:call>
			<x:expect label="Empty sequence" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function saxon-version">
		<x:scenario label="Assume we test this on Saxon versions from 9.7 to 9.9">
			<x:call function="x:saxon-version" />
			<x:expect label="Greater than or equal to 9.7.y.z"
				test="$x:result treat as xs:integer ge x:pack-version(9,7,0,0)" />
			<x:expect label="Less than 10.0.y.z"
				test="$x:result treat as xs:integer lt x:pack-version(10,0,0,0)" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function decimal-string">
		<x:scenario label="xs:integer">
			<x:call function="x:decimal-string">
				<x:param select="xs:integer(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (no decimal point)">
			<x:call function="x:decimal-string">
				<x:param select="xs:decimal(1)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.0'" />
		</x:scenario>

		<x:scenario label="xs:decimal (with decimal point)">
			<x:call function="x:decimal-string">
				<x:param select="xs:decimal(1.2)" />
			</x:call>
			<x:expect label="Numeric literal of xs:decimal" select="'1.2'" />
		</x:scenario>
	</x:scenario>

	<x:scenario label="Scenario for testing function yes-no-synonym">
		<x:scenario label="Valid strings">
			<x:scenario label="Base (yes or no)">
				<x:scenario label="'yes'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'yes'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'no'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'no'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="Synonym (true or false)">
				<x:scenario label="'true'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'true'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'false'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'false'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>

			<x:scenario label="Synonym (1 or 0)">
				<x:scenario label="'1'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'1'" />
					</x:call>
					<x:expect label="True" select="true()" />
				</x:scenario>

				<x:scenario label="'0'">
					<x:call function="x:yes-no-synonym">
						<x:param select="'0'" />
					</x:call>
					<x:expect label="False" select="false()" />
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

</x:description>
