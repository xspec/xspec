<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       test/generate-x-utils.xspec                              -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<t:description xmlns:items="x-urn:test:xspec-items"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:test="http://www.jenitennison.com/xslt/unit-test"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               query="x-urn:test:xspec-items"
               query-at="items.xqm"
               stylesheet="items.xsl">

   <!--
       Test the source files generate-tests-utils.xsl and generate-query-utils.xqm.

       The test target is included implicitly by the XSpec compiler. You don't need
       to specify it in /t:description/@stylesheet or @query-at.
   -->

   <!--
       Function test:deep-equal($seq1, $seq2, '').
   -->
   <t:scenario label="test:deep-equal($seq1, $seq2, '')">

      <t:scenario label="Identical Sequences">
         <t:call function="test:deep-equal">
            <t:param select="1, 2"/>
            <t:param select="1, 2"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Non-Identical Sequences">
         <t:call function="test:deep-equal">
            <t:param select="1, 2"/>
            <t:param select="1, 3"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="Sequences with Same Items in Different Orders">
         <t:call function="test:deep-equal">
            <t:param select="1, 2"/>
            <t:param select="2, 1"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="Empty Sequences">
         <t:call function="test:deep-equal">
            <t:param select="()"/>
            <t:param select="()"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="One empty sequence">
         <t:call function="test:deep-equal">
            <t:param select="()"/>
            <t:param select="1"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="false()"/>
      </t:scenario>

      <t:scenario label="A text node and several text nodes">
         <t:variable name="elems" as="element()+">
            <e>foo</e>
            <e>bar</e>
         </t:variable>
         <t:call function="test:deep-equal">
            <t:param as="text()">foobar</t:param>
            <t:param select="$elems/text()" as="text()+"/>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Identical text nodes">
         <t:call function="test:deep-equal">
            <t:param as="text()">foobar</t:param>
            <t:param as="text()">foobar</t:param>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Identical Element Sequences">
         <t:call function="test:deep-equal">
            <t:param as="element()+"><foo/><bar/></t:param>
            <t:param as="element()+"><foo/><bar/></t:param>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

   </t:scenario>

   <!--
       Function test:deep-equal($seq1, $seq2, version).
   -->
   <t:scenario label="test:deep-equal($seq1, $seq2, version)">

      <t:scenario label="In version 1.0">

         <t:scenario label="comparing text nodes with analogous">

            <t:scenario label="string">
               <t:call function="test:deep-equal">
                  <t:param select="'12'"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="'1'" />
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="double">
               <t:call function="test:deep-equal">
                  <t:param select="xs:double('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="'1'" />
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="decimal">
               <t:call function="test:deep-equal">
                  <t:param select="xs:decimal('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="'1'" />
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

            <t:scenario label="integer">
               <t:call function="test:deep-equal">
                  <t:param select="xs:integer('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="'1'" />
               </t:call>
               <t:expect label="returns true" select="true()"/>
            </t:scenario>

         </t:scenario>

         <t:scenario label="comparing the same strings">
            <t:call function="test:deep-equal">
               <t:param select="'foo'"/>
               <t:param select="'foo'"/>
               <t:param select="'1'" />
            </t:call>
            <t:expect label="returns true" select="true()"/>
         </t:scenario>

         <t:scenario label="comparing different strings">
            <t:call function="test:deep-equal">
               <t:param select="'foo'"/>
               <t:param select="'bar'"/>
               <t:param select="'1'" />
            </t:call>
            <t:expect label="returns false" select="false()"/>
         </t:scenario>

      </t:scenario>

      <t:scenario label="In version 2.0">

         <t:scenario label="comparing text nodes with analogous">

            <t:scenario label="string">
               <t:call function="test:deep-equal">
                  <t:param select="'12'"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="''" />
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="double">
               <t:call function="test:deep-equal">
                  <t:param select="xs:double('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="''" />
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="decimal">
               <t:call function="test:deep-equal">
                  <t:param select="xs:decimal('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="''" />
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

            <t:scenario label="integer">
               <t:call function="test:deep-equal">
                  <t:param select="xs:integer('12')"/>
                  <t:param select="descendant::text()" as="text()+">
                     <wrap>1</wrap>
                     <wrap>2</wrap>
                  </t:param>
                  <t:param select="''" />
               </t:call>
               <t:expect label="returns false" select="false()"/>
            </t:scenario>

         </t:scenario>

         <t:scenario label="comparing the same strings">
            <t:call function="test:deep-equal">
               <t:param select="'foo'"/>
               <t:param select="'foo'"/>
               <t:param select="''" />
            </t:call>
            <t:expect label="returns true" select="true()"/>
         </t:scenario>

         <t:scenario label="comparing different strings">
            <t:call function="test:deep-equal">
               <t:param select="'foo'"/>
               <t:param select="'bar'"/>
               <t:param select="''" />
            </t:call>
            <t:expect label="returns false" select="false()"/>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:deep-equal($seq1, $seq2, 'w').
   -->
   <t:scenario label="test:deep-equal($seq1, $seq2, 'w')" xml:base="generate-x-utils/">
      <t:scenario label="Identical whitespace-only text nodes">
         <t:scenario label="In ordinal element">
            <t:scenario label="No flag">
               <t:call function="test:deep-equal">
                  <t:param href="09.xml" />
                  <t:param href="09.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call function="test:deep-equal">
                  <t:param href="09.xml" />
                  <t:param href="09.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>
         </t:scenario>

         <t:scenario label="In test:ws">
            <t:scenario label="No flag">
               <t:call function="test:deep-equal">
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-09.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call function="test:deep-equal">
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-09.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True" select="true()" />
            </t:scenario>
         </t:scenario>
      </t:scenario>

      <t:scenario label="Different whitespace-only text nodes">
         <t:scenario label="In ordinal element">
            <t:scenario label="No flag">
               <t:call function="test:deep-equal">
                  <t:param href="09.xml" />
                  <t:param href="20.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="False" select="false()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call function="test:deep-equal">
                  <t:param href="09.xml" />
                  <t:param href="20.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="True (Whitespace-only text nodes are ignored)" select="true()" />
            </t:scenario>
         </t:scenario>

         <t:scenario label="In test:ws">
            <t:scenario label="No flag">
               <t:call function="test:deep-equal">
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-20.xml" />
                  <t:param select="''" />
               </t:call>
               <t:expect label="False" select="false()" />
            </t:scenario>

            <t:scenario label="w">
               <t:call function="test:deep-equal">
                  <t:param href="ws-09.xml" />
                  <t:param href="ws-20.xml" />
                  <t:param select="'w'" />
               </t:call>
               <t:expect label="False (Whitespace-only text nodes are compared)" select="false()" />
            </t:scenario>
         </t:scenario>
      </t:scenario>
   </t:scenario>

   <!--
       Function test:item-deep-equal
   -->
   <t:scenario label="test:item-deep-equal">

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L207-L227">

         <t:scenario label="Identical Integers">
            <t:call function="test:item-deep-equal">
               <t:param name="item1" select="1" />
               <t:param name="item2" select="1" />
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Non-Identical Strings">
            <t:call function="test:item-deep-equal">
               <t:param name="item1" select="'abc'" />
               <t:param name="item2" select="'def'" />
               <t:param select="''" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="String and Integer">
            <t:call function="test:item-deep-equal">
               <t:param name="item1" select="'1'" as="xs:string"/>
               <t:param name="item2" select="1" as="xs:integer"/>
               <t:param select="''" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:node-deep-equal($seq1, $seq2, '').
   -->
   <t:scenario label="test:node-deep-equal($seq1, $seq2, '')">

      <t:scenario label="Identical Attribute Sequences">
         <t:call function="test:node-deep-equal">
            <t:param name="node1" select="/node/@attribute" as="attribute(attribute)">
               <node attribute="foobar"/>
            </t:param>
            <t:param name="node2" select="/node/@attribute" as="attribute(attribute)">
               <node attribute="foobar"/>
            </t:param>
            <t:param select="''" />
         </t:call>
         <t:expect label="the result" select="true()"/>
      </t:scenario>

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L246-L372">

         <t:scenario label="Identical Elements">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/*" as="element(result)">
                  <result/>
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result/>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Elements with Identical Attributes in Different Orders">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/*" as="element(result)">
                  <result a="1" b="2" />
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result b="2" a="1" />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Elements with Identical Children">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/*" as="element(result)">
                  <result><child1/><child2/></result>
               </t:param>
               <t:param name="node2" select="/*" as="element(result)">
                  <result><child1/><child2/></result>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Attributes">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/*/@a" as="attribute(a)">
                  <result a="1" />
               </t:param>
               <t:param name="node2" select="/*/@a" as="attribute(a)">
                  <result a="1" />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Document Nodes">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/" as="document-node(element(result))">
                  <result />
               </t:param>
               <t:param name="node2" select="/" as="document-node(element(result))">
                  <result />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Text Nodes">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/*/text()" as="text()">
                  <result>Test</result>
               </t:param>
               <t:param name="node2" select="/*/text()" as="text()">
                  <result>Test</result>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Comments">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/comment()" as="comment()">
                  <!-- Comment -->
                  <doc />
               </t:param>
               <t:param name="node2" select="/comment()" as="comment()">
                  <!-- Comment -->
                  <doc />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical Processing Instructions">
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/processing-instruction()" as="processing-instruction(pi)">
                  <?pi data?>
                  <doc />
               </t:param>
               <t:param name="node2" select="/processing-instruction()" as="processing-instruction(pi)">
                  <?pi data?>
                  <doc />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing text</t:label>
            <t:call function="test:node-deep-equal">
               <t:param name="node1" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" as="element(foo)">
                  <foo>foo</foo>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing mixed content</t:label>
            <t:call function="test:node-deep-equal">
               <t:param name="node1" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" as="element(foo)">
                  <foo>foo<bar />foo</foo>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing attribute values</t:label>
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/foo/@bar" as="attribute(bar)">
                  <foo bar="..." />
               </t:param>
               <t:param name="node2" select="/foo/@bar" as="attribute(bar)">
                  <foo bar="bar" />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario>
            <t:label>Using "..." to indicate missing empty content</t:label>
            <t:call function="test:node-deep-equal">
               <t:param name="node1" select="/foo" as="element(foo)">
                  <foo>...</foo>
               </t:param>
               <t:param name="node2" select="/foo" as="element(foo)">
                  <foo />
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Namespace Nodes">

         <t:scenario label="Identical">
            <t:call function="test:node-deep-equal">
               <t:param select="$items:namespace" />
               <t:param select="$items:namespace" />
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Identical default namespace">
            <t:call function="test:node-deep-equal">
               <t:param select="$items:default-namespace" />
               <t:param select="$items:default-namespace" />
               <t:param select="''" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Different">
            <t:call function="test:node-deep-equal">
               <t:param select="$items:namespace" />
               <t:param select="$items:another-namespace" />
               <t:param select="''" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:sorted-children
   -->
   <t:scenario label="test:sorted-children">

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L466-L477">

         <t:scenario label="Original order preserved">
            <t:call function="test:sorted-children">
               <t:param name="node" as="element(foo)">
                  <foo><bar /><baz /></foo>
               </t:param>
               <t:param select="''" />
            </t:call>
            <t:expect label="bar baz">
               <bar /><baz />
            </t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:report-atomic-value
   -->
   <t:scenario label="test:report-atomic-value">

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/8931b371bd619feeeee25bd7014d8a677ab88505/src/compiler/generate-tests-utils.xsl#L622-L629">

         <t:scenario label="String Containing Single Quotes">
            <t:call function="test:report-atomic-value">
               <t:param select="'don''t'" />
            </t:call>
            <t:expect label="Escaped" select="'''don''''t'''" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:integer">

         <t:scenario label="Max of xs:unsignedLong (a subtype of xs:integer)">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(18446744073709551615)" />
            </t:call>
            <t:expect label="Numeric literal" select="'18446744073709551615'" />
         </t:scenario>

         <t:scenario label="0">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(0)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0'" />
         </t:scenario>

         <t:scenario label="-1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(-1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:decimal">

         <t:scenario label="1.2">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(1.2)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.2'" />
         </t:scenario>

         <t:scenario label="1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.0'" />
         </t:scenario>

         <t:scenario label="0.1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(0.1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0.1'" />
         </t:scenario>

         <t:scenario label="0">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(0)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0.0'" />
         </t:scenario>

         <t:scenario label="-0.1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-0.1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-0.1'" />
         </t:scenario>

         <t:scenario label="-1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1.0'" />
         </t:scenario>

         <t:scenario label="-1.2">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-1.2)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1.2'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:double">

         <t:scenario label="1.234e56">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double(1.234e56)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.234e56'" />
         </t:scenario>

         <t:scenario label="1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double(1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.0e0'" />
         </t:scenario>

         <t:scenario label="NaN">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('NaN')" />
            </t:call>
            <t:expect label="Constructor" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}double('NaN')</t:expect>
         </t:scenario>

         <t:scenario label="INF">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('INF')" />
            </t:call>
            <t:expect label="Constructor" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}double('INF')</t:expect>
         </t:scenario>

         <t:scenario label="-INF">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('-INF')" />
            </t:call>
            <t:expect label="Constructor" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}double('-INF')</t:expect>
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:QName">

         <t:scenario label="No namespace">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:QName('foo')" />
            </t:call>
            <t:expect label="Function" select="'QName('''', ''foo'')'" />
         </t:scenario>

         <t:scenario label="In namespace, with prefix">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:QName('t:foo')" />
            </t:call>
            <t:expect label="Function" select="'QName(''http://www.jenitennison.com/xslt/xspec'', ''t:foo'')'" />
         </t:scenario>

         <t:scenario label="In namespace, without prefix">
            <t:call function="test:report-atomic-value">
               <t:param select="QName('x-urn:test:report-atomic-value', 'foo')" />
            </t:call>
            <t:expect label="Function" select="'QName(''x-urn:test:report-atomic-value'', ''foo'')'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Other types that enter the ELSE branch of the function">

         <t:scenario label="xs:untypedAtomic">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:untypedAtomic('foo')" />
            </t:call>
            <t:expect label="Constructor" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}untypedAtomic('foo')</t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:atom-type
           http://www.w3.org/TR/xslt20/#built-in-types
   -->
   <t:scenario label="test:atom-type">
      <t:scenario label="All the primitive atomic types defined in [XML Schema Part 2], with the exception of xs:NOTATION">

         <t:scenario label="xs:string">
            <t:call function="test:atom-type">
               <t:param select="xs:string('foo')" />
            </t:call>
            <t:expect label="xs:string" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}string</t:expect>
         </t:scenario>

         <t:scenario label="xs:boolean">
            <t:call function="test:atom-type">
               <t:param select="xs:boolean('true')" />
            </t:call>
            <t:expect label="xs:boolean" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}boolean</t:expect>
         </t:scenario>

         <t:scenario label="xs:decimal">
            <t:call function="test:atom-type">
               <t:param select="xs:decimal(1)" />
            </t:call>
            <t:expect label="xs:decimal" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}decimal</t:expect>
         </t:scenario>

         <t:scenario label="xs:double">
            <t:call function="test:atom-type">
               <t:param select="xs:double(1)" />
            </t:call>
            <t:expect label="xs:double" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}double</t:expect>
         </t:scenario>

         <t:scenario label="xs:float">
            <t:call function="test:atom-type">
               <t:param select="xs:float(1)" />
            </t:call>
            <t:expect label="xs:float" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}float</t:expect>
         </t:scenario>

         <t:scenario label="xs:date">
            <t:call function="test:atom-type">
               <t:param select="xs:date('1111-11-11')" />
            </t:call>
            <t:expect label="xs:date" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}date</t:expect>
         </t:scenario>

         <t:scenario label="xs:time">
           <t:call function="test:atom-type">
              <t:param select="xs:time('11:11:11')" />
           </t:call>
           <t:expect label="xs:time" select="string()"
              >Q{http://www.w3.org/2001/XMLSchema}time</t:expect>
         </t:scenario>

         <t:scenario label="xs:dateTime">
            <t:call function="test:atom-type">
               <t:param select="xs:dateTime('1111-11-11T11:11:11')" />
            </t:call>
            <t:expect label="xs:dateTime" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}dateTime</t:expect>
         </t:scenario>

         <t:scenario label="xs:duration">
            <t:call function="test:atom-type">
               <t:param select="xs:duration('PT1S')" />
            </t:call>
            <t:expect label="xs:duration" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}duration</t:expect>
         </t:scenario>

         <t:scenario label="xs:QName">
            <t:call function="test:atom-type">
               <t:param select="xs:QName('foo')" />
            </t:call>
            <t:expect label="xs:QName" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}QName</t:expect>
         </t:scenario>

         <t:scenario label="xs:anyURI">
            <t:call function="test:atom-type">
               <t:param select="xs:anyURI('foo')" />
            </t:call>
            <t:expect label="xs:anyURI" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}anyURI</t:expect>
         </t:scenario>

         <t:scenario label="xs:gDay">
            <t:call function="test:atom-type">
               <t:param select="xs:gDay('---11')" />
            </t:call>
            <t:expect label="xs:gDay" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}gDay</t:expect>
         </t:scenario>

         <t:scenario label="xs:gMonthDay">
            <t:call function="test:atom-type">
               <t:param select="xs:gMonthDay('--11-11')" />
            </t:call>
            <t:expect label="xs:gMonthDay" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}gMonthDay</t:expect>
         </t:scenario>

         <t:scenario label="xs:gMonth">
            <t:call function="test:atom-type">
               <t:param select="xs:gMonth('--11')" />
            </t:call>
            <t:expect label="xs:gMonth" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}gMonth</t:expect>
         </t:scenario>

         <t:scenario label="xs:gYearMonth">
            <t:call function="test:atom-type">
               <t:param select="xs:gYearMonth('1111-11')" />
            </t:call>
            <t:expect label="xs:gYearMonth" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}gYearMonth</t:expect>
         </t:scenario>

         <t:scenario label="xs:gYear">
            <t:call function="test:atom-type">
               <t:param select="xs:gYear('1111')" />
            </t:call>
            <t:expect label="xs:gYear" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}gYear</t:expect>
         </t:scenario>

         <t:scenario label="xs:base64Binary">
            <t:call function="test:atom-type">
               <t:param select="xs:base64Binary(xs:hexBinary('11'))" />
            </t:call>
            <t:expect label="xs:base64Binary" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}base64Binary</t:expect>
         </t:scenario>

         <t:scenario label="xs:hexBinary">
            <t:call function="test:atom-type">
               <t:param select="xs:hexBinary('11')" />
            </t:call>
            <t:expect label="xs:hexBinary" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}hexBinary</t:expect>
         </t:scenario>

      </t:scenario>

      <t:scenario label="The derived atomic type xs:integer defined in [XML Schema Part 2]">

         <t:scenario label="xs:integer">
            <t:call function="test:atom-type">
               <t:param select="xs:integer(1)" />
            </t:call>
            <t:expect label="xs:integer" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}integer</t:expect>
         </t:scenario>

      </t:scenario>

      <!-- The types xs:anyType and xs:anySimpleType: Not atomic -->

      <t:scenario label="The following types defined in [XPath 2.0]">

         <t:scenario label="xs:yearMonthDuration">
            <t:call function="test:atom-type">
               <t:param select="xs:yearMonthDuration('P1M')" />
            </t:call>
            <t:expect label="xs:yearMonthDuration" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}yearMonthDuration</t:expect>
         </t:scenario>

         <t:scenario label="xs:dayTimeDuration">
            <t:call function="test:atom-type">
               <t:param select="xs:dayTimeDuration('PT1S')" />
            </t:call>
            <t:expect label="xs:dayTimeDuration" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}dayTimeDuration</t:expect>
         </t:scenario>

         <!-- xs:anyAtomicType: Abstract -->

         <!-- xs:untyped: Not atomic -->

         <t:scenario label="xs:untypedAtomic">
            <t:call function="test:atom-type">
               <t:param select="xs:untypedAtomic('foo')" />
            </t:call>
            <t:expect label="xs:untypedAtomic" select="string()"
               >Q{http://www.w3.org/2001/XMLSchema}untypedAtomic</t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

</t:description>


<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
