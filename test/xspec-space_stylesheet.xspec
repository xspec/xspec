<?xml version="1.0" encoding="UTF-8"?>
<x:description preserve-space="pre" stylesheet="xspec-space.xsl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec">

	<x:scenario
		label="In context template-param, whitespace-only text nodes in user-content are removed by default.">
		<x:scenario>
			<x:label>So, in
				//x:context/x:param/element()[not(ancestor-or-self::element()/@xml:space)],
				whitespace-only text nodes are removed.</x:label>
			<x:context mode="param-mirror-mode">
				<x:param name="param-items">
					<span>&#x09;&#x0A;&#x0D;&#x20;</span>
				</x:param>
				<foo />
			</x:context>
			<x:expect label="(verified via $x:result)"
				test="deep-equal($x:result, $span-element-empty)" />
			<x:expect label="(verified via wrapper document)"
				test="deep-equal(node(), $span-element-empty)" />
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					//x:context/x:param/element()[ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"], whitespace-only text nodes are kept.</x:label>
				<x:context mode="param-mirror-mode">
					<x:param name="param-items" xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:param>
					<foo />
				</x:context>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					//x:context/x:param/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:context mode="param-mirror-mode">
					<x:param href="xspec-space.xml" name="param-items" />
					<foo />
				</x:context>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result/node(), $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					//x:context/x:param/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.)
					= (for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))], whitespace-only text nodes are
					kept.</x:label>
				<x:context mode="param-mirror-mode">
					<x:param name="param-items">
						<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
					</x:param>
					<foo />
				</x:context>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $pre-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $pre-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					//x:context/x:param/x:text[not(ancestor-or-self::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:context mode="param-mirror-mode">
					<x:param name="param-items">
						<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
					</x:param>
					<foo />
				</x:context>
				<x:expect label="(verified via $x:result)" test="deep-equal($x:result, $wsot)" />
				<x:expect label="(verified via wrapper document)" test="deep-equal(node(), $wsot)"
				 />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario
		label="In context, whitespace-only text nodes in user-content are removed by default.">
		<x:scenario>
			<x:label>So, in //x:context/element()[namespace-uri() ne
				'http://www.jenitennison.com/xslt/xspec'][not(ancestor-or-self::element()/@xml:space)],
				whitespace-only text nodes are removed.</x:label>
			<x:context>
				<span>&#x09;&#x0A;&#x0D;&#x20;</span>
			</x:context>
			<x:call template="context-mirror-template" />
			<x:expect label="(verified via $x:result)"
				test="deep-equal($x:result, $span-element-empty)" />
			<x:expect label="(verified via wrapper document)"
				test="deep-equal(node(), $span-element-empty)" />
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					//x:context/element()[namespace-uri() ne
					'http://www.jenitennison.com/xslt/xspec'][ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"], whitespace-only text nodes are kept.</x:label>
				<x:context xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:context>
				<x:call template="context-mirror-template" />
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					//x:context/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:context href="xspec-space.xml" />
				<x:call template="context-mirror-template" />
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result/node(), $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					//x:context/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.)
					= (for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))], whitespace-only text nodes are
					kept.</x:label>
				<x:context>
					<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
				</x:context>
				<x:call template="context-mirror-template" />
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $pre-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $pre-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					//x:context/x:text[not(ancestor-or-self::element()/@xml:space)], whitespace-only
					text nodes are kept.</x:label>
				<x:context>
					<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
				</x:context>
				<x:call template="context-mirror-template" />
				<x:expect label="(verified via $x:result)" test="deep-equal($x:result, $wsot)" />
				<x:expect label="(verified via wrapper document)" test="deep-equal(node(), $wsot)"
				 />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario
		label="In function-param, whitespace-only text nodes in user-content are removed by default.">
		<x:scenario>
			<x:label>So, in
				//x:call[@function]/x:param/element()[not(ancestor-or-self::element()/@xml:space)],
				whitespace-only text nodes are removed.</x:label>
			<x:call function="exactly-one">
				<x:param>
					<span>&#x09;&#x0A;&#x0D;&#x20;</span>
				</x:param>
			</x:call>
			<x:expect label="(verified via $x:result)"
				test="deep-equal($x:result, $span-element-empty)" />
			<x:expect label="(verified via wrapper document)"
				test="deep-equal(node(), $span-element-empty)" />
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					//x:call[@function]/x:param/element()[ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"], whitespace-only text nodes are kept.</x:label>
				<x:call function="exactly-one">
					<x:param xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:param>
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					//x:call[@function]/x:param/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:call function="exactly-one">
					<x:param href="xspec-space.xml" />
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result/node(), $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					//x:call[@function]/x:param/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.)
					= (for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))], whitespace-only text nodes are
					kept.</x:label>
				<x:call function="exactly-one">
					<x:param>
						<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
					</x:param>
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $pre-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $pre-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					//x:call[@function]/x:param/x:text[not(ancestor-or-self::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:call function="exactly-one">
					<x:param>
						<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
					</x:param>
				</x:call>
				<x:expect label="(verified via $x:result)" test="deep-equal($x:result, $wsot)" />
				<x:expect label="(verified via wrapper document)" test="deep-equal(node(), $wsot)"
				 />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario
		label="In template-call template-param, whitespace-only text nodes in user-content are removed by default.">
		<x:scenario>
			<x:label>So, in
				//x:call[@template]/x:param/element()[not(ancestor-or-self::element()/@xml:space)],
				whitespace-only text nodes are removed.</x:label>
			<x:call template="param-mirror-template">
				<x:param name="param-items">
					<span>&#x09;&#x0A;&#x0D;&#x20;</span>
				</x:param>
			</x:call>
			<x:expect label="(verified via $x:result)"
				test="deep-equal($x:result, $span-element-empty)" />
			<x:expect label="(verified via wrapper document)"
				test="deep-equal(node(), $span-element-empty)" />
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					//x:call[@template]/x:param/element()[ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"], whitespace-only text nodes are kept.</x:label>
				<x:call template="param-mirror-template">
					<x:param name="param-items" xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:param>
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					//x:call[@template]/x:param/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:call template="param-mirror-template">
					<x:param href="xspec-space.xml" name="param-items" />
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result/node(), $span-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					//x:call[@template]/x:param/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.)
					= (for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))], whitespace-only text nodes are
					kept.</x:label>
				<x:call template="param-mirror-template">
					<x:param name="param-items">
						<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
					</x:param>
				</x:call>
				<x:expect label="(verified via $x:result)"
					test="deep-equal($x:result, $pre-element-wsot)" />
				<x:expect label="(verified via wrapper document)"
					test="deep-equal(node(), $pre-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					//x:call[@template]/x:param/x:text[not(ancestor-or-self::element()/@xml:space)],
					whitespace-only text nodes are kept.</x:label>
				<x:call template="param-mirror-template">
					<x:param name="param-items">
						<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
					</x:param>
				</x:call>
				<x:expect label="(verified via $x:result)" test="deep-equal($x:result, $wsot)" />
				<x:expect label="(verified via wrapper document)" test="deep-equal(node(), $wsot)"
				 />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:param name="global-param-span-element">
		<span>&#x09;&#x0A;&#x0D;&#x20;</span>
	</x:param>
	<x:param name="global-param-span-element-preserve" xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:param>
	<x:param href="xspec-space.xml" name="global-param-href" />
	<x:param name="global-param-pre-element">
		<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
	</x:param>
	<x:param name="global-param-x-text">
		<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
	</x:param>
	<x:scenario
		label="In global-param, whitespace-only text nodes in user-content are removed by default.">
		<x:context />

		<x:scenario>
			<x:label>So, in
				/x:description/x:param/element()[not(ancestor-or-self::element()/@xml:space)],</x:label>
			<x:expect label="whitespace-only text nodes are removed."
				test="deep-equal($global-param-span-element, $span-element-empty)" />
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					/x:description/x:param/element()[ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"],</x:label>
				<x:expect label="whitespace-only text nodes are kept."
					test="deep-equal($global-param-span-element-preserve, $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					/x:description/x:param/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],</x:label>
				<x:expect label="whitespace-only text nodes are kept."
					test="deep-equal($global-param-href/node(), $span-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					/x:description/x:param/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.)
					= (for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))],</x:label>
				<x:expect label="whitespace-only text nodes are kept."
					test="deep-equal($global-param-pre-element, $pre-element-wsot)" />
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					/x:description/x:param/x:text[not(ancestor-or-self::element()/@xml:space)],</x:label>
				<x:expect label="whitespace-only text nodes are kept."
					test="deep-equal($global-param-x-text, $wsot)" />
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario
		label="In assertion, whitespace-only text nodes in user-content are removed by default.">
		<x:scenario>
			<x:label>So, in //x:expect/element()[namespace-uri() ne
				'http://www.jenitennison.com/xslt/xspec'][not(ancestor-or-self::element()/@xml:space)],</x:label>
			<x:call function="exactly-one">
				<x:param select="$span-element-empty" />
			</x:call>
			<x:expect label="whitespace-only text nodes are removed.">
				<span>&#x09;&#x0A;&#x0D;&#x20;</span>
			</x:expect>
		</x:scenario>

		<x:scenario label="But...">
			<x:scenario>
				<x:label>@xml:space overrides the default. So, in
					//x:expect/element()[namespace-uri() ne
					'http://www.jenitennison.com/xslt/xspec'][ancestor-or-self::element()[@xml:space][1]/@xml:space
					= "preserve"],</x:label>
				<x:call function="exactly-one">
					<x:param select="$span-element-wsot" />
				</x:call>
				<x:expect label="whitespace-only text nodes are kept." xml:space="preserve"><span>&#x09;&#x0A;&#x0D;&#x20;</span></x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>node-selection @href is always intact. So, in
					//x:expect/@href[not(ancestor::element()/@xml:space)]/doc(.)[not(descendant::element()/@xml:space)],</x:label>
				<x:call function="exactly-one">
					<x:param select="$span-element-wsot" />
				</x:call>
				<x:expect href="xspec-space.xml" label="whitespace-only text nodes are kept."
					select="node()" />
			</x:scenario>

			<x:scenario>
				<x:label>Elements specified by @preserve-space are intact. So, in
					//x:expect/element()[not(ancestor-or-self::element()/@xml:space)][node-name(.) =
					(for $qname in tokenize(/x:description/@preserve-space, '\s+') return
					resolve-QName($qname, /x:description))],</x:label>
				<x:call function="exactly-one">
					<x:param select="$pre-element-wsot" />
				</x:call>
				<x:expect label="whitespace-only text nodes are kept.">
					<pre>&#x09;&#x0A;&#x0D;&#x20;</pre>
				</x:expect>
			</x:scenario>

			<x:scenario>
				<x:label>Text nodes created by x:text are intact. So, in
					//x:expect/x:text[not(ancestor-or-self::element()/@xml:space)],</x:label>
				<x:call function="exactly-one">
					<x:param select="$wsot" />
				</x:call>
				<x:expect label="whitespace-only text nodes are kept.">
					<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
				</x:expect>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="In user-content,">
		<x:scenario>
			<x:label>@xml:space="preserve" takes effect on descendant whitespace-only text node.
				So...</x:label>
			<x:call function="exactly-one">
				<x:param>
					<p xml:space="preserve">&#x09;&#x0A;&#x0D;&#x20;<span>&#x09;&#x0A;&#x0D;&#x20;</span></p>
				</x:param>
			</x:call>
			<x:expect label="Child whitespace-only text nodes are kept."
				test="deep-equal(p/(node() except span), $wsot)" />
			<x:expect label="Grandchild whitespace-only text nodes are kept."
				test="deep-equal(p/span, $span-element-wsot)" />
		</x:scenario>

		<x:scenario>
			<x:label>For elements specified by @preserve-space, effect is only on child
				whitespace-only text node. So...</x:label>
			<x:call function="exactly-one">
				<x:param>
					<pre>&#x09;&#x0A;&#x0D;&#x20;<span>&#x09;&#x0A;&#x0D;&#x20;</span></pre>
				</x:param>
			</x:call>
			<x:expect test="deep-equal(pre/node(), ($wsot, $span-element-empty))">
				<x:label>Child whitespace-only text nodes are kept, whereas grandchild
					whitespace-only text nodes are removed.</x:label>
			</x:expect>
		</x:scenario>

		<x:scenario>
			<x:label>x:text can be used side by side with other nodes. So...</x:label>
			<x:call function="exactly-one">
				<x:param>
					<p>
						<x:text>&#x09;&#x0A;&#x0D;&#x20;</x:text>
						<span>&#x09;&#x0A;&#x0D;&#x20;</span>
					</p>
				</x:param>
			</x:call>
			<x:expect test="deep-equal(p/node(), ($wsot, $span-element-empty))">
				<x:label>Whitespace-only text nodes created by x:text are kept, whereas those in
					sibling nodes are removed.</x:label>
			</x:expect>
		</x:scenario>
	</x:scenario>

</x:description>
