<?xml version="1.0" encoding="UTF-8"?>
<t:description stylesheet="prefix-conflict.xsl" xmlns:t="http://www.jenitennison.com/xslt/xspec"
	xmlns:x="x-urn:test:prefix-conflict-root">

	<!-- Unlike prefix-conflict.xspec, this test relies on namespace declarations
		on descendants of the XSpec <description> element. Also, this test is for XSLT only,
		because XQuery tests must declare namespaces on <description> when using prefixes
		in arbitrary XPath expressions stored in attributes of XSpec elements.

		See prefix-conflict_local_xquery.xspec for the analogous test for XQuery. -->

	<t:scenario
		label="Using x: prefix in function-call @function, function-param @name, @select, @as, and child node">
		<t:call function="x:param-mirror" xmlns:x="x-urn:test:prefix-conflict">
			<t:param as="element(x:function-param-child)" name="x:param-items"
				select="element(x:function-param-child)">
				<x:function-param-child />
			</t:param>
		</t:call>
		<t:expect label="should work" test="$t:result instance of element(Q{x-urn:test:prefix-conflict}function-param-child)" />
	</t:scenario>

	<t:param as="element(x:global-param-child)" name="x:global-param"
		select="element(x:global-param-child)" xmlns:x="x-urn:test:prefix-conflict">
		<x:global-param-child />
	</t:param>
	<t:scenario label="Using x: prefix in global-param @name, @select, @as, and child node">
		<t:call function="x:false" xmlns:x="x-urn:test:prefix-conflict" />
		<t:expect label="should work" test="$y:global-param instance of element(Q{x-urn:test:prefix-conflict}global-param-child)"
			xmlns:y="x-urn:test:prefix-conflict" />
	</t:scenario>

	<!-- Naming an XSpec variable (global or local) using a namespace also used in the
		system under test is not necessarily recommended, but it should still work. -->
	<t:variable as="element(x:global-var-child)" name="x:global-var"
		select="element(x:global-var-child)" xmlns:x="x-urn:test:prefix-conflict">
		<x:global-var-child />
	</t:variable>
	<t:scenario label="Using x: prefix in global variable @name, @select, @as, and child node">
		<t:call function="x:false" xmlns:x="x-urn:test:prefix-conflict" />
		<t:expect label="should work" test="$y:global-var instance of element(Q{x-urn:test:prefix-conflict}global-var-child)"
			xmlns:y="x-urn:test:prefix-conflict" />
	</t:scenario>

	<t:scenario label="Using x: prefix in local variable @name, @select, @as, and child node">
		<t:variable as="element(x:var-child)" name="x:var" select="element(x:var-child)"
			xmlns:x="x-urn:test:prefix-conflict">
			<x:var-child />
		</t:variable>
		<t:call function="x:false" xmlns:x="x-urn:test:prefix-conflict" />
		<t:expect label="should work" test="$y:var instance of element(Q{x-urn:test:prefix-conflict}var-child)"
			xmlns:y="x-urn:test:prefix-conflict" />
	</t:scenario>

	<t:scenario label="Using x: prefix in assertion">
		<t:call function="x:param-mirror" xmlns:x="x-urn:test:prefix-conflict">
			<t:param>
				<x:element />
			</t:param>
		</t:call>
		<t:expect label="child node, @select and @test should work"
			select="namespace-uri(element(x:element))" test="namespace-uri($t:result/self::element(x:element))"
			xmlns:x="x-urn:test:prefix-conflict">
			<x:element />
		</t:expect>
		<t:expect label="boolean @test should work" test="$t:result instance of element(x:element)"
			xmlns:x="x-urn:test:prefix-conflict" />
	</t:scenario>

</t:description>
