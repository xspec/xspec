<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       test/generate-xspec-tests.xspec                          -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<t:description xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               stylesheet="../src/compiler/generate-xspec-tests.xsl">

   <!--
       Test the source file generate-xspec-tests.xsl.

       Test only the XSLT version. It is very difficult to test the XQuery
       version (generate-query-tests.xsl), because its output is textual XQuery.
       Unless, of course, we use XQueryX (XML representation of XQuery)...
   -->

   <!--t:scenario label="FIRST TEST.......">
      <t:variable name="ctxt" as="document-node()">
         <t:description>
            <t:scenario/>
         </t:description>
      </t:variable>
      <t:apply select="$ctxt"/>
      <t:expect label="the result" test="$t:result instance of document-node()"/>
   </t:scenario-->

   <t:scenario label="x:scenario[@label] transformed in x:compile mode">
      <t:context mode="t:compile" href="generate-xspec-tests/scenario.xspec" select="//t:scenario" />
      <t:expect>
         <t:label>
            - is xsl:template
            - @name is Q{XSpec-namespace}scenario-ID
            - the scenario label xsl:message
            - the generator (xsl:element) of the x:scenario element
            - the generator (xsl:element) of the x:scenario/x:label element
         </t:label>
         <xsl:template name="Q{{http://www.jenitennison.com/xslt/xspec}}scenario1"
                       as="element(Q{{http://www.jenitennison.com/xslt/xspec}}scenario)">
            <xsl:message>my label</xsl:message>
            <xsl:element name="t:scenario"
                         namespace="http://www.jenitennison.com/xslt/xspec">
               <xsl:attribute name="id"
                              namespace="">scenario1</xsl:attribute>
               <xsl:attribute name="xspec"
                              namespace="" />
               <xsl:element name="t:label"
                            namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:text>my label</xsl:text>
               </xsl:element>
            </xsl:element>
         </xsl:template>
      </t:expect>
   </t:scenario>

   <!--
       <t:expect/>
       
       TODO: Track down how it is transformed (named template, rule
       in a mode, etc.) and test it explicitly...
   -->
   <t:scenario label="x:expect[@test] transformed in x:compile mode">
      <t:context mode="t:compile" href="generate-xspec-tests/expect.xspec" select="//t:expect">
         <t:param tunnel="yes" name="context" as="empty-sequence()"/>
         <t:param tunnel="yes" name="call" as="empty-sequence()"/>
      </t:context>
      <t:expect label="is a template"
                test="$t:result instance of element(xsl:template)"/>
      <t:expect label="@test must be transformed to xsl:sequence/@select"
                test="$t:result/xsl:variable[@name eq 'Q{urn:x-xspec:compile:impl}test-result']">
         <xsl:variable name="Q{{urn:x-xspec:compile:impl}}test-result"
                       as="item()*">
            <xsl:choose>
               <xsl:when test="count($Q{{urn:x-xspec:compile:impl}}test-items) eq 1">
                  <xsl:for-each select="$Q{{urn:x-xspec:compile:impl}}test-items">
                     <xsl:sequence select="false()"
                                   version="3" />
                  </xsl:for-each>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:sequence select="false()"
                                version="3" />
               </xsl:otherwise>
            </xsl:choose>
         </xsl:variable>
      </t:expect>
   </t:scenario>

</t:description>


<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
