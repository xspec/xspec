<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       test/generate-xspec-tests.xspec                          -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<t:description xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               stylesheet="../src/compiler/generate-xspec-tests.xsl">

   <!--
       Test the source file generate-xspec-tests.xsl.

       Test only the XSLT version. It is very difficult to test the XQuery
       version (generate-query-tests.xsl), because its output is textual XQuery.
       Unless, of course, we use XQueryX (XML representation of XQuery)...
   -->

   <!-- $xspec-prefix in generate-common-tests.xsl accesses the initial context node or the
      source document which is not available at XSpec runtime. So hardcode $xspec-prefix here.
      TODO: XSpec had better provide a way (maybe an attribute in x:description) to define
      the source document... -->
   <t:param name="xspec-prefix" select="'t'" />

   <!--t:scenario label="FIRST TEST.......">
      <t:variable name="ctxt" as="document-node()">
         <t:description>
            <t:scenario/>
         </t:description>
      </t:variable>
      <t:apply select="$ctxt"/>
      <t:expect label="the result" test="$t:result instance of document-node()"/>
   </t:scenario-->

   <t:scenario label="x:scenario[@label] transformed in x:compile mode">
      <t:context mode="t:compile">
         <t:scenario label="my label"/>
      </t:context>
      <t:expect label="is a template" test="$t:result instance of element(xsl:template)"/>
      <!-- test also it is a QName in the namespace t:* -->
      <t:expect label="the name" test="starts-with($t:result/@name, 't:')" />
      <t:expect label="the name is a QName"
                test="namespace-uri-from-QName(resolve-QName($t:result/@name, $t:result/t:scenario))"
                select="'http://www.jenitennison.com/xslt/xspec'"/>
      <t:expect label="the label message" test="$t:result/xsl:message/string()" select="'my label'"/>
      <t:expect label="the scenario" test="exists($t:result/t:scenario)"/>
      <t:expect label="the scenario label" test="$t:result/t:scenario/t:label/string()" select="'my label'"/>
   </t:scenario>

   <!--
       <t:expect/>
       
       TODO: Track down how it is transformed (named templated, rule
       in a mode, etc.) and test it explicitely...
   -->
   <t:scenario label="x:expect[@test] transformed in x:compile mode">
      <t:context mode="t:compile">
         <t:param tunnel="yes" name="context" as="empty-sequence()"/>
         <t:param tunnel="yes" name="call" as="empty-sequence()"/>

         <t:expect test="false()"/>
      </t:context>
      <t:expect label="is a template"
                test="$t:result instance of element(xsl:template)"/>
      <t:expect label="@test must be transformed to @select"
                test="$t:result/xsl:variable[@name eq 'impl:test-result']/*/xsl:otherwise/*">
         <xsl:sequence select="false()" version="..."/>
      </t:expect>
   </t:scenario>

</t:description>


<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
