<?xml version="1.0" encoding="UTF-8"?>
<t:description xmlns:t="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:test="http://www.jenitennison.com/xslt/unit-test" stylesheet="../src/compiler/generate-tests-utils.xsl">
  <!--
	   Test the source file generate-tests-utils.xsl.
   -->
  <!--
	   Function test:node-deep-equal($seq1, $seq2).
   -->
  <t:scenario label="test:node-deep-equal($seq1, $seq2)">
    <t:scenario label="Identical Attribute Sequences">
      <!-- TODO: This scenario does not run on XQuery: xspec/xspec#82 -->
      <t:call function="test:node-deep-equal">
        <t:param name="node1" select="/node/@attribute" as="node()">
          <node attribute="foobar"/>
        </t:param>
        <t:param name="node2" select="/node/@attribute" as="node()">
          <node attribute="foobar"/>
        </t:param>
      </t:call>
      <t:expect label="the result" test="$x:result eq true()"/>
    </t:scenario>
  </t:scenario>

  <!--
    Function test:report-atomic-value
  -->
  <t:scenario label="test:report-atomic-value">

    <!-- TODO: Many of these scenarios fail on XQuery
        xspec/xspec#58 has not been implemented for XQuery -->

    <t:scenario label="xs:integer">
      <t:scenario label="Max of xs:unsignedLong (a subtype of xs:integer)">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:integer(18446744073709551615)" />
        </t:call>
        <t:expect label="Numeric literal" select="'18446744073709551615'" />
      </t:scenario>

      <t:scenario label="0">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:integer(0)" />
        </t:call>
        <t:expect label="Numeric literal" select="'0'" />
      </t:scenario>

      <t:scenario label="-1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:integer(-1)" />
        </t:call>
        <t:expect label="Numeric literal" select="'-1'" />
      </t:scenario>
    </t:scenario>

    <t:scenario label="xs:decimal">
      <t:scenario label="1.2">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(1.2)" />
        </t:call>
        <t:expect label="Numeric literal" select="'1.2'" />
      </t:scenario>

      <t:scenario label="1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(1)" />
        </t:call>
        <t:expect label="Numeric literal" select="'1.0'" />
      </t:scenario>

      <t:scenario label="0.1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(0.1)" />
        </t:call>
        <t:expect label="Numeric literal" select="'0.1'" />
      </t:scenario>

      <t:scenario label="0">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(0)" />
        </t:call>
        <t:expect label="Numeric literal" select="'0.0'" />
      </t:scenario>

      <t:scenario label="-0.1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(-0.1)" />
        </t:call>
        <t:expect label="Numeric literal" select="'-0.1'" />
      </t:scenario>

      <t:scenario label="-1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(-1)" />
        </t:call>
        <t:expect label="Numeric literal" select="'-1.0'" />
      </t:scenario>

      <t:scenario label="-1.2">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:decimal(-1.2)" />
        </t:call>
        <t:expect label="Numeric literal" select="'-1.2'" />
      </t:scenario>

    </t:scenario>

    <t:scenario label="xs:double">
      <t:scenario label="1.234e56">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:double(1.234e56)" />
        </t:call>
        <t:expect label="Constructor" test="matches($x:result, 'xs:double\(''.+E.+''\)')" />
      </t:scenario>

      <t:scenario label="1">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:double(1)" />
        </t:call>
        <t:expect label="Constructor" select="'xs:double(''1'')'" />
      </t:scenario>

      <t:scenario label="NaN">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:double('NaN')" />
        </t:call>
        <t:expect label="Constructor" select="'xs:double(''NaN'')'" />
      </t:scenario>

      <t:scenario label="INF">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:double('INF')" />
        </t:call>
        <t:expect label="Constructor" select="'xs:double(''INF'')'" />
      </t:scenario>

      <t:scenario label="-INF">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:double('-INF')" />
        </t:call>
        <t:expect label="Constructor" select="'xs:double(''-INF'')'" />
      </t:scenario>

    </t:scenario>

    <t:scenario label="xs:QName">
      <t:scenario label="No namespace">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:QName('foo')" />
        </t:call>
        <t:expect label="Function" select="'QName('''', ''foo'')'" />
      </t:scenario>

      <t:scenario label="In namespace, with prefix">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:QName('x:foo')" />
        </t:call>
        <t:expect label="Function" select="'QName(''http://www.jenitennison.com/xslt/xspec'', ''x:foo'')'" />
      </t:scenario>

      <t:scenario label="In namespace, without prefix">
        <t:call function="test:report-atomic-value">
          <t:param select="QName('x-urn:test:report-atomic-value', 'foo')" />
        </t:call>
        <t:expect label="Function" select="'QName(''x-urn:test:report-atomic-value'', ''foo'')'" />
      </t:scenario>
    </t:scenario>

    <t:scenario label="Other types that enters xsl:otherwise branch of the function">
      <t:scenario label="xs:untypedAtomic">
        <t:call function="test:report-atomic-value">
          <t:param select="xs:untypedAtomic('foo')" />
        </t:call>
        <t:expect label="Constructor" select="'xs:untypedAtomic(''foo'')'" />
      </t:scenario>
    </t:scenario>

 </t:scenario>

  <!--
    Function test:atom-type
        http://www.w3.org/TR/xslt20/#built-in-types
   -->
  <t:scenario label="test:atom-type">

    <!-- TODO: Most of these scenarios fail on XQuery
        xspec/xspec#58 has not been implemented for XQuery -->

    <t:scenario label="All the primitive atomic types defined in [XML Schema Part 2], with the exception of xs:NOTATION">

      <t:scenario label="xs:string">
        <t:call function="test:atom-type">
          <t:param select="xs:string('foo')" />
        </t:call>
        <t:expect label="xs:string" select="'xs:string'"/>
      </t:scenario>

      <t:scenario label="xs:boolean">
        <t:call function="test:atom-type">
          <t:param select="xs:boolean('true')" />
        </t:call>
        <t:expect label="xs:boolean" select="'xs:boolean'"/>
      </t:scenario>

      <t:scenario label="xs:decimal">
        <t:call function="test:atom-type">
          <t:param select="xs:decimal(1)" />
        </t:call>
        <t:expect label="xs:decimal" select="'xs:decimal'"/>
      </t:scenario>

      <t:scenario label="xs:double">
        <t:call function="test:atom-type">
          <t:param select="xs:double(1)" />
        </t:call>
        <t:expect label="xs:double" select="'xs:double'"/>
      </t:scenario>

      <t:scenario label="xs:float">
        <t:call function="test:atom-type">
          <t:param select="xs:float(1)" />
        </t:call>
        <t:expect label="xs:float" select="'xs:float'"/>
      </t:scenario>

      <t:scenario label="xs:date">
        <t:call function="test:atom-type">
          <t:param select="xs:date('1111-11-11')" />
        </t:call>
        <t:expect label="xs:date" select="'xs:date'"/>
      </t:scenario>

      <t:scenario label="xs:time">
        <t:call function="test:atom-type">
          <t:param select="xs:time('11:11:11')" />
        </t:call>
        <t:expect label="xs:time" select="'xs:time'"/>
      </t:scenario>

      <t:scenario label="xs:dateTime">
        <t:call function="test:atom-type">
          <t:param select="xs:dateTime('1111-11-11T11:11:11')" />
        </t:call>
        <t:expect label="xs:dateTime" select="'xs:dateTime'"/>
      </t:scenario>

      <t:scenario label="xs:duration">
        <t:call function="test:atom-type">
          <t:param select="xs:duration('PT1S')" />
        </t:call>
        <t:expect label="xs:duration" select="'xs:duration'"/>
      </t:scenario>

      <t:scenario label="xs:QName">
        <t:call function="test:atom-type">
          <t:param select="xs:QName('foo')" />
        </t:call>
        <t:expect label="xs:QName" select="'xs:QName'"/>
      </t:scenario>

      <t:scenario label="xs:anyURI">
        <t:call function="test:atom-type">
          <t:param select="xs:anyURI('foo')" />
        </t:call>
        <t:expect label="xs:anyURI" select="'xs:anyURI'"/>
      </t:scenario>

      <t:scenario label="xs:gDay">
        <t:call function="test:atom-type">
          <t:param select="xs:gDay('---11')" />
        </t:call>
        <t:expect label="xs:gDay" select="'xs:gDay'"/>
      </t:scenario>

      <t:scenario label="xs:gMonthDay">
        <t:call function="test:atom-type">
          <t:param select="xs:gMonthDay('--11-11')" />
        </t:call>
        <t:expect label="xs:gMonthDay" select="'xs:gMonthDay'"/>
      </t:scenario>

      <t:scenario label="xs:gMonth">
        <t:call function="test:atom-type">
          <t:param select="xs:gMonth('--11')" />
        </t:call>
        <t:expect label="xs:gMonth" select="'xs:gMonth'"/>
      </t:scenario>

      <t:scenario label="xs:gYearMonth">
        <t:call function="test:atom-type">
          <t:param select="xs:gYearMonth('1111-11')" />
        </t:call>
        <t:expect label="xs:gYearMonth" select="'xs:gYearMonth'"/>
      </t:scenario>

      <t:scenario label="xs:gYear">
        <t:call function="test:atom-type">
          <t:param select="xs:gYear('1111')" />
        </t:call>
        <t:expect label="xs:gYear" select="'xs:gYear'"/>
      </t:scenario>

      <t:scenario label="xs:base64Binary">
        <t:call function="test:atom-type">
          <t:param select="xs:base64Binary(xs:hexBinary('11'))" />
        </t:call>
        <t:expect label="xs:base64Binary" select="'xs:base64Binary'"/>
      </t:scenario>

      <t:scenario label="xs:hexBinary">
        <t:call function="test:atom-type">
          <t:param select="xs:hexBinary('11')" />
        </t:call>
        <t:expect label="xs:hexBinary" select="'xs:hexBinary'"/>
      </t:scenario>

    </t:scenario>

    <t:scenario label="The derived atomic type xs:integer defined in [XML Schema Part 2]">

      <t:scenario label="xs:integer">
        <t:call function="test:atom-type">
          <t:param select="xs:integer(1)" />
        </t:call>
        <t:expect label="xs:integer" select="'xs:integer'"/>
      </t:scenario>

    </t:scenario>

    <!-- The types xs:anyType and xs:anySimpleType: Not atomic -->

    <t:scenario label="The following types defined in [XPath 2.0]">

      <t:scenario label="xs:yearMonthDuration">
        <t:call function="test:atom-type">
          <t:param select="xs:yearMonthDuration('P1M')" />
        </t:call>
        <t:expect label="xs:yearMonthDuration" select="'xs:yearMonthDuration'"/>
      </t:scenario>

      <t:scenario label="xs:dayTimeDuration">
        <t:call function="test:atom-type">
          <t:param select="xs:dayTimeDuration('PT1S')" />
        </t:call>
        <t:expect label="xs:dayTimeDuration" select="'xs:dayTimeDuration'"/>
      </t:scenario>

      <!-- xs:anyAtomicType: Abstract -->

      <!-- xs:untyped: Not atomic -->

      <t:scenario label="xs:untypedAtomic">
        <t:call function="test:atom-type">
          <t:param select="xs:untypedAtomic('foo')" />
        </t:call>
        <t:expect label="xs:untypedAtomic" select="'xs:untypedAtomic'"/>
      </t:scenario>

    </t:scenario>

  </t:scenario>
</t:description>
