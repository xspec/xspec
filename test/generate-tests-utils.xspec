<?xml version="1.0" encoding="UTF-8"?>
<t:description xmlns:items="x-urn:test:xspec-items"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:test="http://www.jenitennison.com/xslt/unit-test"
               stylesheet="items.xsl">

   <!--
       Test the source file generate-tests-utils.xsl.

       The test target (../src/compiler/generate-tests-utils.xsl) is included
       implicitly by the XSpec compiler. You don't need to specify it in
       /t:description/@stylesheet. If you specify it explicitly, you'll get a warning:
       "Stylesheet module ../src/compiler/generate-tests-utils.xsl is
       included or imported more than once."
   -->

   <!--
       Template test:report-sequence
   -->
   <t:scenario label="test:report-sequence">

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L486-L550">
         <!-- These scenarios do not run on XQuery. XQuery implements the tested template as a function. -->

         <t:scenario label="Integer">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="1" as="xs:integer" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of integer">
               <t:result select="1" />
            </t:expect>
         </t:scenario>

         <t:scenario label="Empty Sequence">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="()" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of empty sequence">
               <t:result select="()" />
            </t:expect>
         </t:scenario>

         <t:scenario label="String">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="'test'" as="xs:string" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of string">
               <t:result select="'test'" />
            </t:expect>
         </t:scenario>

         <t:scenario label="URI">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="xs:anyURI('test.xml')" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of xs:anyURI">
               <t:result select="xs:anyURI('test.xml')" />
            </t:expect>
         </t:scenario>

         <t:scenario label="QName">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="QName('http://www.jenitennison.com/xslt/unit-test', 'tests')" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of QName">
               <t:result select="QName('http://www.jenitennison.com/xslt/unit-test', 'tests')" />
            </t:expect>
         </t:scenario>

         <t:scenario label="Attributes">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="/*/@*" as="attribute()+">
                  <doc a="1" b="2" />
               </t:param>
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result containing attributes">
               <t:result select="/*/@*">
                  <t:pseudo-attribute a="1" />
                  <t:pseudo-attribute b="2" />
               </t:result>
            </t:expect>
         </t:scenario>

         <t:scenario label="Attributes and content">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="/*/@*, /*/foo" as="node()+">
                  <doc a="1" b="2">
                     <foo />
                  </doc>
               </t:param>
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result containing attributes and content">
               <t:result select="/*/(@* | node())">
                  <t:pseudo-attribute a="1" />
                  <t:pseudo-attribute b="2" />
                  <t:pseudo-element>
                    <foo />
                  </t:pseudo-element>
               </t:result>
            </t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrappable-sequence
   -->
   <t:scenario label="test:wrappable-sequence">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrappable-sequence() has not been implemented for XQuery -->

      <t:scenario label="All kinds of nodes">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:all-nodes" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="All nodes that can be wrapped">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:wrappable-nodes" />
         </t:call>
         <t:expect label="True" select="true()" />
      </t:scenario>

      <t:scenario label="All nodes that can be wrapped, and atomic value">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:wrappable-nodes, $items:integer" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="Nodes that cannot be wrapped">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:non-wrappable-nodes" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="Empty sequence">
         <t:call function="test:wrappable-sequence">
            <t:param as="empty-sequence()" />
         </t:call>
         <t:expect label="True" select="true()" />
      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrappable-node
   -->
   <t:scenario label="test:wrappable-node">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrappable-node() has not been implemented for XQuery -->

      <t:scenario label="Nodes">

         <t:scenario label="Attribute">
            <t:call function="test:wrappable-node">
               <t:param select="$items:attribute" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="Comment">
            <t:call function="test:wrappable-node">
               <t:param select="$items:comment" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Document">
            <t:call function="test:wrappable-node">
               <t:param select="$items:document" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Element">
            <t:call function="test:wrappable-node">
               <t:param select="$items:element" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Namespace">
            <t:call function="test:wrappable-node">
               <t:param select="$items:namespace" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="Processing instruction">
            <t:call function="test:wrappable-node">
               <t:param select="$items:processing-instruction" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Text">
            <t:call function="test:wrappable-node">
               <t:param select="$items:text" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Value">
         <t:call function="test:wrappable-node">
            <t:param select="$items:integer" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrap-nodes
   -->
   <t:scenario label="test:wrap-nodes">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrap-nodes() has not been implemented for XQuery -->

      <t:scenario label="All nodes that can be wrapped">
         <t:call function="test:wrap-nodes">
            <t:param select="$items:wrappable-nodes" />
         </t:call>
         <t:expect label="Result is document node" test="$t:result instance of document-node()" />
         <t:expect label="Only one instance" test="count($t:result)" select="1" />
         <t:expect label="Wraps all nodes while unwrapping document node"
            test="$t:result/node()" select="for $node in $items:wrappable-nodes
               return (if ($node instance of document-node())
                       then $node/node()
                       else $node)" />
      </t:scenario>

      <t:scenario label="Empty sequence">
         <t:call function="test:wrap-nodes">
            <t:param as="empty-sequence()" />
         </t:call>
         <t:expect label="Result is document node" test="$t:result instance of document-node()" />
         <t:expect label="Only one instance" test="count($t:result)" select="1" />
         <t:expect label="No child node" test="empty($t:result/node())" />
      </t:scenario>

      <!-- Scenarios for schema-aware processor are in xspec-47.xspec -->
   </t:scenario>

</t:description>
