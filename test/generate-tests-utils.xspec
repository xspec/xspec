<?xml version="1.0" encoding="UTF-8"?>
<t:description xmlns:items="x-urn:test:xspec-items"
               xmlns:t="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:test="http://www.jenitennison.com/xslt/unit-test"
               stylesheet="items.xsl">

   <!--
       Test the source file generate-tests-utils.xsl.

       The test target (../src/compiler/generate-tests-utils.xsl) is included
       implicitly by the XSpec compiler. You don't need to specify it in
       /t:description/@stylesheet. If you specify it explicitly, you'll get a warning:
       "Stylesheet module ../src/compiler/generate-tests-utils.xsl is
       included or imported more than once."
   -->

   <!--
       Template test:report-sequence
   -->
   <t:scenario label="test:report-sequence">

      <t:scenario label="Copy of https://github.com/xspec/xspec/blob/120b3316aef2c1106287dc7c5270f3ed49062c68/src/compiler/generate-tests-utils.xsl#L486-L550">
         <!-- These scenarios do not run on XQuery. XQuery implements the tested template as a function. -->

         <t:scenario label="Integer">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="1" as="xs:integer" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of integer">
               <t:result select="1" />
            </t:expect>
         </t:scenario>

         <t:scenario label="Empty Sequence">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="()" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of empty sequence">
               <t:result select="()" />
            </t:expect>
         </t:scenario>

         <t:scenario label="String">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="'test'" as="xs:string" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of string">
               <t:result select="'test'" />
            </t:expect>
         </t:scenario>

         <t:scenario label="URI">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="xs:anyURI('test.xml')" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of xs:anyURI">
               <t:result select="xs:anyURI('test.xml')" />
            </t:expect>
         </t:scenario>

         <t:scenario label="QName">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="QName('http://www.jenitennison.com/xslt/unit-test', 'tests')" />
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result with @select of QName">
               <t:result select="QName('http://www.jenitennison.com/xslt/unit-test', 'tests')" />
            </t:expect>
         </t:scenario>

         <t:scenario label="Attributes">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="/*/@*" as="attribute()+">
                  <doc a="1" b="2" />
               </t:param>
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result containing attributes">
               <t:result select="/*/@*">
                  <t:pseudo-attribute a="1" />
                  <t:pseudo-attribute b="2" />
               </t:result>
            </t:expect>
         </t:scenario>

         <t:scenario label="Attributes and content">
            <t:call template="test:report-sequence">
               <t:param name="sequence" select="/*/@*, /*/foo" as="node()+">
                  <doc a="1" b="2">
                     <foo />
                  </doc>
               </t:param>
               <t:param name="wrapper-name" select="'t:result'" />
            </t:call>
            <t:expect label="t:result containing attributes and content">
               <t:result select="/*/(@* | node())">
                  <t:pseudo-attribute a="1" />
                  <t:pseudo-attribute b="2" />
                  <t:pseudo-element>
                    <foo />
                  </t:pseudo-element>
               </t:result>
            </t:expect>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:report-atomic-value
   -->
   <t:scenario label="test:report-atomic-value">
      <!-- TODO: Many of these scenarios fail on XQuery
           xspec/xspec#58 has not been implemented for XQuery -->

      <t:scenario label="xs:integer">

         <t:scenario label="Max of xs:unsignedLong (a subtype of xs:integer)">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(18446744073709551615)" />
            </t:call>
            <t:expect label="Numeric literal" select="'18446744073709551615'" />
         </t:scenario>

         <t:scenario label="0">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(0)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0'" />
         </t:scenario>

         <t:scenario label="-1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:integer(-1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:decimal">

         <t:scenario label="1.2">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(1.2)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.2'" />
         </t:scenario>

         <t:scenario label="1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'1.0'" />
         </t:scenario>

         <t:scenario label="0.1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(0.1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0.1'" />
         </t:scenario>

         <t:scenario label="0">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(0)" />
            </t:call>
            <t:expect label="Numeric literal" select="'0.0'" />
         </t:scenario>

         <t:scenario label="-0.1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-0.1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-0.1'" />
         </t:scenario>

         <t:scenario label="-1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-1)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1.0'" />
         </t:scenario>

         <t:scenario label="-1.2">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:decimal(-1.2)" />
            </t:call>
            <t:expect label="Numeric literal" select="'-1.2'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:double">

         <t:scenario label="1.234e56">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double(1.234e56)" />
            </t:call>
            <t:expect label="Constructor" test="matches($t:result, 'xs:double\(''.+E.+''\)')" />
         </t:scenario>

         <t:scenario label="1">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double(1)" />
            </t:call>
            <t:expect label="Constructor" select="'xs:double(''1'')'" />
         </t:scenario>

         <t:scenario label="NaN">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('NaN')" />
            </t:call>
            <t:expect label="Constructor" select="'xs:double(''NaN'')'" />
         </t:scenario>

         <t:scenario label="INF">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('INF')" />
            </t:call>
            <t:expect label="Constructor" select="'xs:double(''INF'')'" />
         </t:scenario>

         <t:scenario label="-INF">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:double('-INF')" />
            </t:call>
            <t:expect label="Constructor" select="'xs:double(''-INF'')'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="xs:QName">

         <t:scenario label="No namespace">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:QName('foo')" />
            </t:call>
            <t:expect label="Function" select="'QName('''', ''foo'')'" />
         </t:scenario>

         <t:scenario label="In namespace, with prefix">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:QName('t:foo')" />
            </t:call>
            <t:expect label="Function" select="'QName(''http://www.jenitennison.com/xslt/xspec'', ''t:foo'')'" />
         </t:scenario>

         <t:scenario label="In namespace, without prefix">
            <t:call function="test:report-atomic-value">
               <t:param select="QName('x-urn:test:report-atomic-value', 'foo')" />
            </t:call>
            <t:expect label="Function" select="'QName(''x-urn:test:report-atomic-value'', ''foo'')'" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Other types that enters xsl:otherwise branch of the function">

         <t:scenario label="xs:untypedAtomic">
            <t:call function="test:report-atomic-value">
               <t:param select="xs:untypedAtomic('foo')" />
            </t:call>
            <t:expect label="Constructor" select="'xs:untypedAtomic(''foo'')'" />
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:atom-type
           http://www.w3.org/TR/xslt20/#built-in-types
   -->
   <t:scenario label="test:atom-type">
      <!-- TODO: Most of these scenarios fail on XQuery
           xspec/xspec#58 has not been implemented for XQuery -->

      <t:scenario label="All the primitive atomic types defined in [XML Schema Part 2], with the exception of xs:NOTATION">

         <t:scenario label="xs:string">
            <t:call function="test:atom-type">
               <t:param select="xs:string('foo')" />
            </t:call>
            <t:expect label="xs:string" select="'xs:string'"/>
         </t:scenario>

         <t:scenario label="xs:boolean">
            <t:call function="test:atom-type">
               <t:param select="xs:boolean('true')" />
            </t:call>
            <t:expect label="xs:boolean" select="'xs:boolean'"/>
         </t:scenario>

         <t:scenario label="xs:decimal">
            <t:call function="test:atom-type">
               <t:param select="xs:decimal(1)" />
            </t:call>
            <t:expect label="xs:decimal" select="'xs:decimal'"/>
         </t:scenario>

         <t:scenario label="xs:double">
            <t:call function="test:atom-type">
               <t:param select="xs:double(1)" />
            </t:call>
            <t:expect label="xs:double" select="'xs:double'"/>
         </t:scenario>

         <t:scenario label="xs:float">
            <t:call function="test:atom-type">
               <t:param select="xs:float(1)" />
            </t:call>
            <t:expect label="xs:float" select="'xs:float'"/>
         </t:scenario>

         <t:scenario label="xs:date">
            <t:call function="test:atom-type">
               <t:param select="xs:date('1111-11-11')" />
            </t:call>
            <t:expect label="xs:date" select="'xs:date'"/>
         </t:scenario>

         <t:scenario label="xs:time">
           <t:call function="test:atom-type">
              <t:param select="xs:time('11:11:11')" />
           </t:call>
           <t:expect label="xs:time" select="'xs:time'"/>
         </t:scenario>

         <t:scenario label="xs:dateTime">
            <t:call function="test:atom-type">
               <t:param select="xs:dateTime('1111-11-11T11:11:11')" />
            </t:call>
            <t:expect label="xs:dateTime" select="'xs:dateTime'"/>
         </t:scenario>

         <t:scenario label="xs:duration">
            <t:call function="test:atom-type">
               <t:param select="xs:duration('PT1S')" />
            </t:call>
            <t:expect label="xs:duration" select="'xs:duration'"/>
         </t:scenario>

         <t:scenario label="xs:QName">
            <t:call function="test:atom-type">
               <t:param select="xs:QName('foo')" />
            </t:call>
            <t:expect label="xs:QName" select="'xs:QName'"/>
         </t:scenario>

         <t:scenario label="xs:anyURI">
            <t:call function="test:atom-type">
               <t:param select="xs:anyURI('foo')" />
            </t:call>
            <t:expect label="xs:anyURI" select="'xs:anyURI'"/>
         </t:scenario>

         <t:scenario label="xs:gDay">
            <t:call function="test:atom-type">
               <t:param select="xs:gDay('---11')" />
            </t:call>
            <t:expect label="xs:gDay" select="'xs:gDay'"/>
         </t:scenario>

         <t:scenario label="xs:gMonthDay">
            <t:call function="test:atom-type">
               <t:param select="xs:gMonthDay('--11-11')" />
            </t:call>
            <t:expect label="xs:gMonthDay" select="'xs:gMonthDay'"/>
         </t:scenario>

         <t:scenario label="xs:gMonth">
            <t:call function="test:atom-type">
               <t:param select="xs:gMonth('--11')" />
            </t:call>
            <t:expect label="xs:gMonth" select="'xs:gMonth'"/>
         </t:scenario>

         <t:scenario label="xs:gYearMonth">
            <t:call function="test:atom-type">
               <t:param select="xs:gYearMonth('1111-11')" />
            </t:call>
            <t:expect label="xs:gYearMonth" select="'xs:gYearMonth'"/>
         </t:scenario>

         <t:scenario label="xs:gYear">
            <t:call function="test:atom-type">
               <t:param select="xs:gYear('1111')" />
            </t:call>
            <t:expect label="xs:gYear" select="'xs:gYear'"/>
         </t:scenario>

         <t:scenario label="xs:base64Binary">
            <t:call function="test:atom-type">
               <t:param select="xs:base64Binary(xs:hexBinary('11'))" />
            </t:call>
            <t:expect label="xs:base64Binary" select="'xs:base64Binary'"/>
         </t:scenario>

         <t:scenario label="xs:hexBinary">
            <t:call function="test:atom-type">
               <t:param select="xs:hexBinary('11')" />
            </t:call>
            <t:expect label="xs:hexBinary" select="'xs:hexBinary'"/>
         </t:scenario>

      </t:scenario>

      <t:scenario label="The derived atomic type xs:integer defined in [XML Schema Part 2]">

         <t:scenario label="xs:integer">
            <t:call function="test:atom-type">
               <t:param select="xs:integer(1)" />
            </t:call>
            <t:expect label="xs:integer" select="'xs:integer'"/>
         </t:scenario>

      </t:scenario>

      <!-- The types xs:anyType and xs:anySimpleType: Not atomic -->

      <t:scenario label="The following types defined in [XPath 2.0]">

         <t:scenario label="xs:yearMonthDuration">
            <t:call function="test:atom-type">
               <t:param select="xs:yearMonthDuration('P1M')" />
            </t:call>
            <t:expect label="xs:yearMonthDuration" select="'xs:yearMonthDuration'"/>
         </t:scenario>

         <t:scenario label="xs:dayTimeDuration">
            <t:call function="test:atom-type">
               <t:param select="xs:dayTimeDuration('PT1S')" />
            </t:call>
            <t:expect label="xs:dayTimeDuration" select="'xs:dayTimeDuration'"/>
         </t:scenario>

         <!-- xs:anyAtomicType: Abstract -->

         <!-- xs:untyped: Not atomic -->

         <t:scenario label="xs:untypedAtomic">
            <t:call function="test:atom-type">
               <t:param select="xs:untypedAtomic('foo')" />
            </t:call>
            <t:expect label="xs:untypedAtomic" select="'xs:untypedAtomic'"/>
         </t:scenario>

      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrappable-sequence
   -->
   <t:scenario label="test:wrappable-sequence">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrappable-sequence() has not been implemented for XQuery -->

      <t:scenario label="All kinds of nodes">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:all-nodes" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="All nodes that can be wrapped">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:wrappable-nodes" />
         </t:call>
         <t:expect label="True" select="true()" />
      </t:scenario>

      <t:scenario label="All nodes that can be wrapped, and atomic value">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:wrappable-nodes, $items:integer" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="Nodes that cannot be wrapped">
         <t:call function="test:wrappable-sequence">
            <t:param select="$items:non-wrappable-nodes" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

      <t:scenario label="Empty sequence">
         <t:call function="test:wrappable-sequence">
            <t:param as="empty-sequence()" />
         </t:call>
         <t:expect label="True" select="true()" />
      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrappable-node
   -->
   <t:scenario label="test:wrappable-node">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrappable-node() has not been implemented for XQuery -->

      <t:scenario label="Nodes">

         <t:scenario label="Attribute">
            <t:call function="test:wrappable-node">
               <t:param select="$items:attribute" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="Comment">
            <t:call function="test:wrappable-node">
               <t:param select="$items:comment" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Document">
            <t:call function="test:wrappable-node">
               <t:param select="$items:document" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Element">
            <t:call function="test:wrappable-node">
               <t:param select="$items:element" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Namespace">
            <t:call function="test:wrappable-node">
               <t:param select="$items:namespace" />
            </t:call>
            <t:expect label="False" select="false()" />
         </t:scenario>

         <t:scenario label="Processing instruction">
            <t:call function="test:wrappable-node">
               <t:param select="$items:processing-instruction" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

         <t:scenario label="Text">
            <t:call function="test:wrappable-node">
               <t:param select="$items:text" />
            </t:call>
            <t:expect label="True" select="true()" />
         </t:scenario>

      </t:scenario>

      <t:scenario label="Value">
         <t:call function="test:wrappable-node">
            <t:param select="$items:integer" />
         </t:call>
         <t:expect label="False" select="false()" />
      </t:scenario>

   </t:scenario>

   <!--
       Function test:wrap-nodes
   -->
   <t:scenario label="test:wrap-nodes">
      <!-- TODO: These scenarios do not run on XQuery
           test:wrap-nodes() has not been implemented for XQuery -->

      <t:scenario label="All nodes that can be wrapped">
         <t:call function="test:wrap-nodes">
            <t:param select="$items:wrappable-nodes" />
         </t:call>
         <t:expect label="Result is document node" test="$t:result instance of document-node()" />
         <t:expect label="Only one instance" test="count($t:result)" select="1" />
         <t:expect label="Wraps all nodes while unwrapping document node"
            test="$t:result/node()" select="for $node in $items:wrappable-nodes
               return (if ($node instance of document-node())
                       then $node/node()
                       else $node)" />
      </t:scenario>

      <t:scenario label="Empty sequence">
         <t:call function="test:wrap-nodes">
            <t:param as="empty-sequence()" />
         </t:call>
         <t:expect label="Result is document node" test="$t:result instance of document-node()" />
         <t:expect label="Only one instance" test="count($t:result)" select="1" />
         <t:expect label="No child node" test="empty($t:result/node())" />
      </t:scenario>

      <!-- Scenarios for schema-aware processor are in xspec-47.xspec -->
   </t:scenario>

</t:description>
