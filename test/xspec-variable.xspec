<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       test/xspec-variable.xspec                                -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


<!-- TODO: Make the following changes after other code gets merged onto master branch.
  - Test that variable/@name should be EQNAME and should be added to EQName test. See
    test/xspec-eqname.xspec on AirQuick's branch.
  - To better test different namespace prefixes, consider updating after
    https://github.com/xspec/xspec/commit/b1e6d150644ea323252ea3fd9f5addbdde1da40a
    is integrated. See files named test/xspec-prefix-conflict*.* on AirQuick's branch.
  - Restore "Text directly in XSpec variable" scenario. XQuery $myv:myspace1 needs x:text
    support in schema and compiler.
  - Move "@select and element content" scenario from xspec-variable_stylesheet.xspec to this file.
    Need certain changes in generate-query-helper.xsl; see <xsl:template match="*" mode="test:generate-variable-declarations">.
  -->

<x:description
	xmlns:my="http://example.org/ns/my"
	xmlns:myv="http://example.org/ns/my/variable"
	xmlns:x="http://www.jenitennison.com/xslt/xspec"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	query="http://example.org/ns/my"
	query-at="xspec-variable-tested.xql"
	stylesheet="xspec-variable-tested.xsl">

	<!-- Variables used only in this test file are in a dedicated namespace to prevent conflict with
	 global parameters or global variables in the file to be tested. -->
	<x:variable name="myv:test-data" href="xspec-variable.xml"/>
	<x:variable name="myv:test-3" select="$myv:test-data/*/test[xs:integer(@num) eq 3]"/>

	<x:scenario label="Define variables in different ways">
		<x:scenario label="@select only">
			<x:variable name="myv:select-only" select="'y'"/>
			<x:call function="my:foo">
				<x:param name="elem"><foo role="{$myv:select-only}"/></x:param>
				<x:param name="p" select="0"/>
				<x:param name="textnode"/>
			</x:call>
			<x:expect label="the result" test="exists($x:result/self::bar/@role) and ($x:result/@role/string() eq 'y')"/>
		</x:scenario>
		<!--See xspec-variable_stylesheet.xspec for "@select and element content" scenario-->
		<x:scenario label="@select and @href">
			<x:variable name="myv:select-and-href" href="xspec-variable.xml" select="local-name(/test-data/*[1])"/>
			<x:call function="my:foo">
				<x:param name="elem"><foo role="{$myv:select-and-href}"/></x:param>
				<x:param name="p" select="0"/>
				<x:param name="textnode"/>
			</x:call>
			<x:expect label="the result" test="exists($x:result/self::bar/@role) and ($x:result/@role/string() eq 'test')"/>
		</x:scenario>
		<x:scenario label="element content">
			<x:variable name="myv:content">y</x:variable>
			<x:call function="my:foo">
				<x:param name="elem"><foo role="{$myv:content}"/></x:param>
				<x:param name="p" select="0"/>
				<x:param name="textnode"/>
			</x:call>
			<x:expect label="the result" test="exists($x:result/self::bar/@role) and ($x:result/@role/string() eq 'y')"/>
		</x:scenario>
		<x:scenario label="element content, deeper">
			<x:variable name="myv:content">
				<xyz>y</xyz>
			</x:variable>
			<x:call function="my:foo">
				<x:param name="elem"><foo role="{string($myv:content)}"/></x:param>
				<x:param name="p" select="0"/>
				<x:param name="textnode"/>
			</x:call>
			<x:expect label="the result" test="exists($x:result/self::bar/@role/string()) and ($x:result/@role/string() eq 'y')"/>
		</x:scenario>
		<x:scenario label="@href only">
			<x:variable name="myv:href-only" href="xspec-variable.xml"/>
			<x:call function="my:foo">
				<x:param name="elem"><foo role="{local-name($myv:href-only/test-data/*[1])}"/></x:param>
				<x:param name="p" select="0"/>
				<x:param name="textnode"/>
			</x:call>
			<x:expect label="the result" test="exists($x:result/self::bar/@role) and ($x:result/@role/string() eq 'test')"/>
		</x:scenario>
		<!--See xspec-node-selection.xspec for a scenario with both @href and element content-->
	</x:scenario>

	<x:scenario label="Call variable in different forms of SUT">
		<!-- For test of local vars in named template and template rule, see xspec-variable_stylesheet.xspec. -->
		<x:scenario label="Call local vars in test of function">
			<x:variable name="myv:param" select="xs:integer($myv:test-3/@num)" as="xs:integer"/>
			<x:call function="my:square">
				<x:param select="$myv:param"/>
			</x:call>
			<x:variable name="myv:expectedresult" select="$myv:test-3/@value" as="attribute(value)"/>
			<x:expect label="the result" select="$myv:expectedresult cast as xs:integer"/>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Check variables in different scopes">
		<x:scenario label="Call global var">
			<x:call function="my:square">
				<x:param select="$myv:test-3/@num" as="attribute(num)"/>
			</x:call>
			<x:expect label="the result" select="$myv:test-3/@value cast as xs:integer"/>
		</x:scenario>
		<x:scenario label="Call vars inherited from outer scenarios, and check same-name vars in non-conflicting scopes">
			<x:variable name="myv:param" select="xs:integer($myv:test-3/@num)" as="xs:integer"/>
			<x:scenario label="outer1">
				<x:variable name="myv:expectedresult" select="xs:integer($myv:test-3/@value)" as="xs:integer"/>
				<x:scenario label="inner1">
					<x:call function="my:square">
						<x:param select="$myv:param"/>
					</x:call>
					<x:expect label="the result" select="$myv:expectedresult"/>
				</x:scenario>
			</x:scenario>
			<x:scenario label="outer2">
				<x:variable name="myv:expectedresult" select="16" as="xs:integer"/>
				<x:scenario label="inner2">
					<x:call function="my:square">
						<x:param select="$myv:param+1"/>
					</x:call>
					<x:expect label="the result (param inherited from outermost scenario; expectedresult inherited from outer2)"
						select="$myv:expectedresult"/>
					<x:variable name="myv:variableafterexpect" select="16" as="xs:integer"/>
					<x:expect label="the result (defined between two expect elements)"
						select="$myv:variableafterexpect"/>
				</x:scenario>
			</x:scenario>
		</x:scenario>
	</x:scenario>

	<x:scenario label="Nonsense variable definition in pending scenario does not cause build failure">
		<x:scenario label="Pending scenario 1" pending="skip on purpose">
			<x:variable name="myv:nonsense1" select="$myv:nonexistent"/>
			<x:call function="my:square">
				<x:param select="$myv:nonsense1"/>
			</x:call>
			<x:expect label="the result" select="0"/>
		</x:scenario>
		<x:pending label="skip on purpose">
			<x:scenario label="Pending scenario 2">
				<x:variable name="myv:nonsense2" href="nonexistent.xml"/>
				<x:call function="my:square">
					<x:param select="$myv:nonsense2"/>
				</x:call>
				<x:expect label="the result" select="0"/>
			</x:scenario>
		</x:pending>
		<x:scenario label="Nonpending scenario (not needed, except to work around issue #446)">
			<x:call function="my:square">
				<x:param select="$myv:test-3/@num" as="attribute(num)"/>
			</x:call>
			<x:expect label="the result" select="$myv:test-3/@value cast as xs:integer"/>
		</x:scenario>
	</x:scenario>

	<x:scenario shared="yes" label="SHARED variables">
		<!-- When referencing this scenario via x:like, make sure $myv:str is already defined. -->
		<x:variable name="myv:bracketed" select="concat('[',$myv:str,']')" as="xs:string"/>
	</x:scenario>

	<x:scenario label="Interaction of variables and reuse of scenarios">
		<x:scenario label="Scenario 1">
			<x:call function="my:square">
				<x:param select="xs:integer(0)"/>
			</x:call>
			<x:variable name="myv:str" select="'abc'" as="xs:string"/>
			<x:like label="SHARED variables"/>
			<x:expect label="Scenario 1 string, bracketed" test="$myv:bracketed eq '[abc]'"/>
		</x:scenario>
		<x:scenario label="Scenario 1">
			<x:call function="my:square">
				<x:param select="xs:integer(0)"/>
			</x:call>
			<x:variable name="myv:str" select="'def'" as="xs:string"/>
			<x:like label="SHARED variables"/>
			<x:expect label="Scenario 2 string, bracketed" test="$myv:bracketed eq '[def]'"/>
		</x:scenario>
	</x:scenario>

</x:description>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
