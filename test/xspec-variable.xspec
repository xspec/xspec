<?xml version="1.0" encoding="UTF-8"?>
<!-- ===================================================================== -->
<!--  File:       test/xspec-variable.xspec                                -->
<!--  Author:     Florent Georges                                          -->
<!--  Tags:                                                                -->
<!--    Copyright (c) 2010 Jeni Tennison (see end of file.)                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<!-- TODO: Make the following changes after other code gets merged onto master branch.
  - Test that variable/@name should be EQNAME and should be added to EQName test. See
    test/xspec-eqname.xspec on AirQuick's branch.
  - Remove this file from schema test exclusion list. See https://github.com/xspec/xspec/pull/363.
  - To better test different namespace prefixes, consider updating after
    https://github.com/xspec/xspec/commit/b1e6d150644ea323252ea3fd9f5addbdde1da40a
    is integrated. See files named test/xspec-prefix-conflict*.* on AirQuick's branch.
  - Restore "Text directly in XSpec variable" scenario. XQuery $myspace1 needs x:text
    support in schema and compiler.
  - Move "@select and element content" scenario from xspec-variable_stylesheet.xspec to this file.
    Need certain changes in generate-query-helper.xsl; see <xsl:template match="*" mode="test:generate-variable-declarations">.
  -->

<t:description xmlns:t="http://www.jenitennison.com/xslt/xspec" xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:my="http://example.org/ns/my" stylesheet="xspec-variable-tested.xsl" query="http://example.org/ns/my" query-at="xspec-variable-tested.xql">
  <t:variable name="test-data" href="xspec-variable.xml"/>
  <t:variable name="test-3" select="$test-data/*/test[xs:integer(@num) eq 3]"/>

  <t:scenario label="Define variables in different ways">
    <t:scenario label="@select only">
      <t:variable name="select-only" select="'y'"/>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{$select-only}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result" test="$x:result/self::bar/@role/string() eq 'y'"/>
    </t:scenario>
    <!--See xspec-variable_stylesheet.xspec for "@select and element content" scenario-->
    <t:scenario label="@select and @href">
      <t:variable name="select-and-href" href="xspec-variable.xml" select="local-name(/test-data/*[1])"/>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{$select-and-href}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result" test="$x:result/self::bar/@role/string() eq 'test'"/>
    </t:scenario>
    <t:scenario label="element content">
      <t:variable name="content">y</t:variable>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{$content}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result" test="$x:result/self::bar/@role/string() eq 'y'"/>
    </t:scenario>
    <t:scenario label="element content, deeper">
      <t:variable name="content">
        <xyz>y</xyz>
      </t:variable>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{string($content)}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result" test="$x:result/self::bar/@role/string() eq 'y'"/>
    </t:scenario>
    <t:scenario label="@href only">
      <t:variable name="href-only" href="xspec-variable.xml"/>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{local-name($href-only/test-data/*[1])}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result" test="$x:result/self::bar/@role/string() eq 'test'"/>
    </t:scenario>
    <!-- REVIEW QUESTION: Remove the next scenario? A pending pull request on AirQuick's branch makes this pattern illegal. -->
    <t:scenario label="if both @href and element content occur, use @href and ignore content">
      <t:variable name="href-over-content" href="xspec-variable.xml">
        <doc><test-data><y/></test-data></doc>
      </t:variable>
      <t:call function="my:foo">
        <t:param name="elem"><foo role="{local-name($href-over-content/test-data/*[1])}"/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode"/>
      </t:call>
      <t:expect label="the result ('test', not 'y')" test="$x:result/self::bar/@role/string() eq 'test'"/>
    </t:scenario>
  </t:scenario>

  <t:scenario label="Call variable in different forms of SUT">
    <!-- For test of local vars in named template and template rule, see xspec-variable_stylesheet.xspec. -->
    <t:scenario label="Call local vars in test of function">
      <t:variable name="param" select="xs:integer($test-3/@num)" as="xs:integer"/>
      <t:call function="my:square">
        <t:param select="$param"/>
      </t:call>
      <t:variable name="expectedresult" select="$test-3/@value" as="attribute(value)"/>
      <t:expect label="the result" select="$expectedresult cast as xs:integer"/>
    </t:scenario>
  </t:scenario>

  <t:scenario label="Check variables in different scopes">
    <t:scenario label="Call global var">
      <t:call function="my:square">
        <t:param select="$test-3/@num" as="attribute(num)"/>
      </t:call>
      <t:expect label="the result" select="$test-3/@value cast as xs:integer"/>
    </t:scenario>
    <t:scenario label="Call vars inherited from outer scenarios, and check same-name vars in non-conflicting scopes">
      <t:variable name="param" select="xs:integer($test-3/@num)" as="xs:integer"/>
      <t:scenario label="outer1">
        <t:variable name="expectedresult" select="xs:integer($test-3/@value)" as="xs:integer"/>
        <t:scenario label="inner1">
          <t:call function="my:square">
            <t:param select="$param"/>
          </t:call>
          <t:expect label="the result" select="$expectedresult"/>
        </t:scenario>
      </t:scenario>
      <t:scenario label="outer2">
        <t:variable name="expectedresult" select="16" as="xs:integer"/>
        <t:scenario label="inner2">
          <t:call function="my:square">
            <t:param select="$param+1"/>
          </t:call>
          <t:expect label="the result (param inherited from outermost scenario; expectedresult inherited from outer2)"
            select="$expectedresult"/>
          <t:variable name="variableafterexpect" select="16" as="xs:integer"/>
          <t:expect label="the result (defined between two expect elements)"
            select="$variableafterexpect"/>
        </t:scenario>
      </t:scenario>
    </t:scenario>
  </t:scenario>

  <t:scenario label="Check behavior of whitespace-only text node">
    <t:scenario label="Text directly in XSpec variable" pending="Wait for x:text to get merged in from AirQuick, and then uncomment t:variable">
      <!--<t:variable name="myspace1" as="text()"><t:text>&#x09;&#x0A;&#x0D;&#x20;  </t:text></t:variable>-->
      <t:call function="my:foo">
        <t:param name="elem"><foo/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode" select="$myspace1"/>
      </t:call>
      <t:expect label="String with correct space" test="$x:result//string/string() = 'abc&#x09;&#x0A;&#x0D;&#x20;  def'"/>
    </t:scenario>
    <t:scenario label="Text defined in code to be tested">
      <t:variable name="myspace2" as="text()" select="$my:myspace"/>
      <t:call function="my:foo">
        <t:param name="elem"><foo/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode" select="$myspace2"/>
      </t:call>
      <t:expect label="String with correct space" test="$x:result//string/string() = 'abc&#x09;&#x0A;&#x0D;&#x20;  def'"/>
    </t:scenario>
    <t:scenario label="Text defined in XML file">
      <t:variable name="myspace3" as="text()" href="xspec-variable.xml" select="//myspace/text()"/>
      <t:call function="my:foo">
        <t:param name="elem"><foo/></t:param>
        <t:param name="p" select="0"/>
        <t:param name="textnode" select="$myspace3"/>
      </t:call>
      <t:expect label="String with correct space" test="$x:result//string/string() = 'abc&#x09;&#x0A;&#x0D;&#x20;  def'"/>
    </t:scenario>
  </t:scenario>

  <t:scenario label="Nonsense variable definition in pending scenario does not cause build failure">
    <t:scenario label="Pending scenario 1" pending="skip on purpose">
      <t:variable name="nonsense1" select="$nonexistent"/>
      <t:call function="my:square">
        <t:param select="$nonsense1"/>
      </t:call>
      <t:expect label="the result" test="0"/>
    </t:scenario>
    <t:pending label="skip on purpose">
      <t:scenario label="Pending scenario 2">
        <t:variable name="nonsense2" href="nonexistent.xml"/>
        <t:call function="my:square">
          <t:param select="$nonsense2"/>
        </t:call>
        <t:expect label="the result" test="0"/>
      </t:scenario>
    </t:pending>
    <t:scenario label="Nonpending scenario (not needed, except to work around issue #446)">
      <t:call function="my:square">
        <t:param select="$test-3/@num" as="attribute(num)"/>
      </t:call>
      <t:expect label="the result" select="$test-3/@value cast as xs:integer"/>
    </t:scenario>
  </t:scenario>

  <t:scenario shared="yes" label="SHARED variables">
    <!-- When referencing this scenario via t:like, make sure $str is already defined. -->
    <t:variable name="bracketed" select="concat('[',$str,']')" as="xs:string"/>
  </t:scenario>

  <t:scenario label="Interaction of variables and reuse of scenarios">
    <t:scenario label="Scenario 1">
      <t:call function="my:square">
        <t:param select="xs:integer(0)"/>
      </t:call>
      <t:variable name="str" select="'abc'" as="xs:string"/>
      <t:like label="SHARED variables"/>
      <t:expect label="Scenario 1 string, bracketed" test="$bracketed eq '[abc]'"/>
    </t:scenario>
    <t:scenario label="Scenario 1">
      <t:call function="my:square">
        <t:param select="xs:integer(0)"/>
      </t:call>
      <t:variable name="str" select="'def'" as="xs:string"/>
      <t:like label="SHARED variables"/>
      <t:expect label="Scenario 2 string, bracketed" test="$bracketed eq '[def]'"/>
    </t:scenario>
  </t:scenario>

</t:description>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.             -->
<!--                                                                       -->
<!-- Copyright (c) 2010 Jeni Tennison                                      -->
<!--                                                                       -->
<!-- The contents of this file are subject to the MIT License (see the URI -->
<!-- http://www.opensource.org/licenses/mit-license.php for details).      -->
<!--                                                                       -->
<!-- Permission is hereby granted, free of charge, to any person obtaining -->
<!-- a copy of this software and associated documentation files (the       -->
<!-- "Software"), to deal in the Software without restriction, including   -->
<!-- without limitation the rights to use, copy, modify, merge, publish,   -->
<!-- distribute, sublicense, and/or sell copies of the Software, and to    -->
<!-- permit persons to whom the Software is furnished to do so, subject to -->
<!-- the following conditions:                                             -->
<!--                                                                       -->
<!-- The above copyright notice and this permission notice shall be        -->
<!-- included in all copies or substantial portions of the Software.       -->
<!--                                                                       -->
<!-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       -->
<!-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    -->
<!-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.-->
<!-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  -->
<!-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  -->
<!-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     -->
<!-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
